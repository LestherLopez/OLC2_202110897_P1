2023-08-11 17:52:28:200 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-11 17:52:28:230 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-11 17:52:28:826 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ift }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declarestmt (BLOCK (ALT VAR ID DOUBLEPTS type IG expr) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ (= left expr) PARDER LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($left.start.GetLine(), $left.start.GetColumn(), $expr.e, $block.blk, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }))) (RULE type (BLOCK (ALT STRINGS) (ALT INTS) (ALT FLOATS) (ALT BOOLS) (ALT CHARACTERS)))))
2023-08-11 17:52:28:828 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ift }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declarestmt (BLOCK (ALT VAR ID DOUBLEPTS type IG expr) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ (= left expr) PARDER LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($left.start.GetLine(), $left.start.GetColumn(), $expr.e, $block.blk, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }))) (RULE type (BLOCK (ALT (SET STRINGS INTS FLOATS BOOLS CHARACTERS))))))
2023-08-11 17:52:28:828 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ift }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declarestmt (BLOCK (ALT VAR ID DOUBLEPTS type IG expr) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ (= left expr) PARDER LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($left.start.GetLine(), $left.start.GetColumn(), $expr.e, $block.blk, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }))) (RULE type (BLOCK (ALT (SET STRINGS INTS FLOATS BOOLS CHARACTERS))))))
2023-08-11 17:52:28:828 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-11 17:52:28:843 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=399>   left=expr<tokenIndex=403,p=6> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | PARIZQ<tokenIndex=409> expr<tokenIndex=411> PARDER<tokenIndex=413> { $e = $expr.e } 
        | NUMBER<tokenIndex=419>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=425>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=431> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=437> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MUL<tokenIndex=269>|DIV<tokenIndex=271>) right=expr<tokenIndex=276,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(ADD<tokenIndex=289>|SUB<tokenIndex=291>|PERCENT<tokenIndex=293>) right=expr<tokenIndex=298,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MAY_IG<tokenIndex=311>|MAYOR<tokenIndex=313>) right=expr<tokenIndex=318,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(MEN_IG<tokenIndex=331>|MENOR<tokenIndex=333>) right=expr<tokenIndex=338,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(IG_IG<tokenIndex=351>|DIF<tokenIndex=353>) right=expr<tokenIndex=358,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=AND<tokenIndex=370> right=expr<tokenIndex=374,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> op=OR<tokenIndex=386> right=expr<tokenIndex=390,p=8> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-11 17:52:28:860 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 399)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 403) (= p 6)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 409))) (expr (ELEMENT_OPTIONS (= tokenIndex 411))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 413))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 419))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 425))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 431))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 437))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 269))) (DIV (ELEMENT_OPTIONS (= tokenIndex 271))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 276) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 289))) (SUB (ELEMENT_OPTIONS (= tokenIndex 291))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 293))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 298) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 311))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 313))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 318) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 331))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 333))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 338) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 351))) (DIF (ELEMENT_OPTIONS (= tokenIndex 353))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 358) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 370)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 374) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 386)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 390) (= p 8)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-11 17:52:28:867 grammar LogManager.java:25 import STRINGS=1
2023-08-11 17:52:28:867 grammar LogManager.java:25 import INTS=2
2023-08-11 17:52:28:867 grammar LogManager.java:25 import FLOATS=3
2023-08-11 17:52:28:867 grammar LogManager.java:25 import BOOLS=4
2023-08-11 17:52:28:867 grammar LogManager.java:25 import CHARACTERS=5
2023-08-11 17:52:28:867 grammar LogManager.java:25 import VAR=6
2023-08-11 17:52:28:867 grammar LogManager.java:25 import NIL=7
2023-08-11 17:52:28:867 grammar LogManager.java:25 import TRUE=8
2023-08-11 17:52:28:867 grammar LogManager.java:25 import FALSE=9
2023-08-11 17:52:28:867 grammar LogManager.java:25 import PRINT=10
2023-08-11 17:52:28:867 grammar LogManager.java:25 import IF=11
2023-08-11 17:52:28:867 grammar LogManager.java:25 import ELSE=12
2023-08-11 17:52:28:867 grammar LogManager.java:25 import WHILE=13
2023-08-11 17:52:28:867 grammar LogManager.java:25 import LET=14
2023-08-11 17:52:28:867 grammar LogManager.java:25 import NUMBER=15
2023-08-11 17:52:28:867 grammar LogManager.java:25 import STRING=16
2023-08-11 17:52:28:867 grammar LogManager.java:25 import ID=17
2023-08-11 17:52:28:867 grammar LogManager.java:25 import DIF=18
2023-08-11 17:52:28:867 grammar LogManager.java:25 import IG_IG=19
2023-08-11 17:52:28:867 grammar LogManager.java:25 import NOT=20
2023-08-11 17:52:28:867 grammar LogManager.java:25 import OR=21
2023-08-11 17:52:28:867 grammar LogManager.java:25 import AND=22
2023-08-11 17:52:28:867 grammar LogManager.java:25 import IG=23
2023-08-11 17:52:28:867 grammar LogManager.java:25 import MAY_IG=24
2023-08-11 17:52:28:867 grammar LogManager.java:25 import MEN_IG=25
2023-08-11 17:52:28:867 grammar LogManager.java:25 import MAYOR=26
2023-08-11 17:52:28:867 grammar LogManager.java:25 import MENOR=27
2023-08-11 17:52:28:867 grammar LogManager.java:25 import MUL=28
2023-08-11 17:52:28:867 grammar LogManager.java:25 import DIV=29
2023-08-11 17:52:28:867 grammar LogManager.java:25 import ADD=30
2023-08-11 17:52:28:867 grammar LogManager.java:25 import SUB=31
2023-08-11 17:52:28:867 grammar LogManager.java:25 import PERCENT=32
2023-08-11 17:52:28:867 grammar LogManager.java:25 import PARIZQ=33
2023-08-11 17:52:28:867 grammar LogManager.java:25 import PARDER=34
2023-08-11 17:52:28:867 grammar LogManager.java:25 import LLAVEIZQ=35
2023-08-11 17:52:28:867 grammar LogManager.java:25 import LLAVEDER=36
2023-08-11 17:52:28:867 grammar LogManager.java:25 import DOUBLEPTS=37
2023-08-11 17:52:28:867 grammar LogManager.java:25 import QUESTION=38
2023-08-11 17:52:28:867 grammar LogManager.java:25 import WHITESPACE=39
2023-08-11 17:52:28:867 grammar LogManager.java:25 import COMMENT=40
2023-08-11 17:52:28:867 grammar LogManager.java:25 import LINE_COMMENT=41
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'String'=1
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'Int'=2
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'Float'=3
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'Bool'=4
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'Character'=5
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'var'=6
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'nil'=7
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'true'=8
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'false'=9
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'print'=10
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'if'=11
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'else'=12
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'while'=13
2023-08-11 17:52:28:867 grammar LogManager.java:25 import 'let'=14
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '!='=18
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '=='=19
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '!'=20
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '||'=21
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '&&'=22
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '='=23
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '>='=24
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '<='=25
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '>'=26
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '<'=27
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '*'=28
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '/'=29
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '+'=30
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '-'=31
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '%'=32
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '('=33
2023-08-11 17:52:28:867 grammar LogManager.java:25 import ')'=34
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '{'=35
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '}'=36
2023-08-11 17:52:28:867 grammar LogManager.java:25 import ':'=37
2023-08-11 17:52:28:867 grammar LogManager.java:25 import '?'=38
2023-08-11 17:52:28:867 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, NUMBER=15, STRING=16, ID=17, DIF=18, IG_IG=19, NOT=20, OR=21, AND=22, IG=23, MAY_IG=24, MEN_IG=25, MAYOR=26, MENOR=27, MUL=28, DIV=29, ADD=30, SUB=31, PERCENT=32, PARIZQ=33, PARDER=34, LLAVEIZQ=35, LLAVEDER=36, DOUBLEPTS=37, QUESTION=38, WHITESPACE=39, COMMENT=40, LINE_COMMENT=41, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, '!='=18, '=='=19, '!'=20, '||'=21, '&&'=22, '='=23, '>='=24, '<='=25, '>'=26, '<'=27, '*'=28, '/'=29, '+'=30, '-'=31, '%'=32, '('=33, ')'=34, '{'=35, '}'=36, ':'=37, '?'=38}
2023-08-11 17:52:28:867 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, NUMBER=15, STRING=16, ID=17, DIF=18, IG_IG=19, NOT=20, OR=21, AND=22, IG=23, MAY_IG=24, MEN_IG=25, MAYOR=26, MENOR=27, MUL=28, DIV=29, ADD=30, SUB=31, PERCENT=32, PARIZQ=33, PARDER=34, LLAVEIZQ=35, LLAVEDER=36, DOUBLEPTS=37, QUESTION=38, WHITESPACE=39, COMMENT=40, LINE_COMMENT=41}
2023-08-11 17:52:28:867 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, '!='=18, '=='=19, '!'=20, '||'=21, '&&'=22, '='=23, '>='=24, '<='=25, '>'=26, '<'=27, '*'=28, '/'=29, '+'=30, '-'=31, '%'=32, '('=33, ')'=34, '{'=35, '}'=36, ':'=37, '?'=38}
2023-08-11 17:52:28:890 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-11 17:52:28:890 LL1 LogManager.java:25 look=[{10..11}, {<EOF>, 36}]
2023-08-11 17:52:28:890 LL1 LogManager.java:25 LL(1)? true
2023-08-11 17:52:28:890 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-11 17:52:28:890 LL1 LogManager.java:25 look=[10, 11]
2023-08-11 17:52:28:890 LL1 LogManager.java:25 LL(1)? true
2023-08-11 17:52:28:890 LL1 LogManager.java:25 
DECISION 2 in rule declarestmt
2023-08-11 17:52:28:890 LL1 LogManager.java:25 look=[6, 6, 6]
2023-08-11 17:52:28:890 LL1 LogManager.java:25 LL(1)? false
2023-08-11 17:52:28:890 LL1 LogManager.java:25 
DECISION 3 in rule constantstmt
2023-08-11 17:52:28:890 LL1 LogManager.java:25 look=[14, 14]
2023-08-11 17:52:28:890 LL1 LogManager.java:25 LL(1)? false
2023-08-11 17:52:28:890 LL1 LogManager.java:25 
DECISION 4 in rule ifstmt
2023-08-11 17:52:28:890 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-11 17:52:28:890 LL1 LogManager.java:25 LL(1)? false
2023-08-11 17:52:28:890 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-11 17:52:28:890 LL1 LogManager.java:25 look=[20, 33, 15, 16, 8, 9]
2023-08-11 17:52:28:890 LL1 LogManager.java:25 LL(1)? true
2023-08-11 17:52:28:890 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-11 17:52:28:890 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-11 17:52:28:890 LL1 LogManager.java:25 LL(1)? false
2023-08-11 17:52:28:890 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-11 17:52:28:890 LL1 LogManager.java:25 look=[null, null]
2023-08-11 17:52:28:890 LL1 LogManager.java:25 LL(1)? false
2023-08-11 17:52:28:890 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-11 17:52:28:900 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-11 17:52:28:900 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-11 17:52:28:900 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-11 17:52:28:900 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-11 17:52:28:900 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-11 17:52:28:909 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-11 17:52:28:909 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-08-11 17:52:28:909 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:19='ift',<0>,40:26]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-11 17:52:28:909 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,44:29]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,44:59].[@-1,38:41='line',<0>,44:65]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,44:71].[@-1,50:52='pos',<0>,44:77]
2023-08-11 17:52:28:909 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,44:82].[@-1,60:60='e',<0>,44:87]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($left.start.GetLine(), $left.start.GetColumn(), $expr.e, $block.blk, nil) 
2023-08-11 17:52:28:917 action-translator LogManager.java:25 attr [@-1,2:4='ift',<0>,60:55]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 qattr [@-1,28:31='left',<0>,60:81].[@-1,33:37='start',<0>,60:86]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 qattr [@-1,51:54='left',<0>,60:104].[@-1,56:60='start',<0>,60:109]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,60:129].[@-1,81:81='e',<0>,60:134]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 qattr [@-1,85:89='block',<0>,60:138].[@-1,91:93='blk',<0>,60:144]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 translate 
2023-08-11 17:52:28:917 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-08-11 17:52:28:917 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:71]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:101].[@-1,37:41='start',<0>,2:106]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:124].[@-1,60:64='start',<0>,2:129]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:149].[@-1,85:85='e',<0>,2:154]
2023-08-11 17:52:28:917 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:158].[@-1,92:95='text',<0>,2:161]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:168].[@-1,104:104='e',<0>,2:173]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-11 17:52:28:925 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,11:13]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,11:43].[@-1,240:243='line',<0>,11:50]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,11:56].[@-1,253:255='pos',<0>,11:63]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,13:37].[@-1,341:344='text',<0>,13:44]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,17:13]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,17:43].[@-1,474:477='line',<0>,17:50]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,17:56].[@-1,487:489='pos',<0>,17:63]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,22:16].[@-1,25:28='text',<0>,22:23]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,23:9]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,23:39].[@-1,77:80='line',<0>,23:46]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,23:53].[@-1,91:93='pos',<0>,23:60]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-11 17:52:28:925 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:33]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,25:63].[@-1,37:40='line',<0>,25:68]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,25:75].[@-1,49:51='pos',<0>,25:80]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-11 17:52:28:925 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:34]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,26:64].[@-1,38:41='line',<0>,26:70]
2023-08-11 17:52:28:925 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,26:77].[@-1,51:53='pos',<0>,26:83]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 17:52:28:934 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:139]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,29:169].[@-1,37:41='start',<0>,29:174]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,29:192].[@-1,60:64='start',<0>,29:197]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,29:217].[@-1,85:85='e',<0>,29:222]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,29:226].[@-1,92:95='text',<0>,29:229]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,29:236].[@-1,105:105='e',<0>,29:242]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 17:52:28:934 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:173]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:203].[@-1,37:41='start',<0>,30:208]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:226].[@-1,60:64='start',<0>,30:231]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:251].[@-1,85:85='e',<0>,30:256]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:260].[@-1,92:95='text',<0>,30:263]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:270].[@-1,105:105='e',<0>,30:276]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 17:52:28:934 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:154]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:184].[@-1,37:41='start',<0>,31:189]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:207].[@-1,60:64='start',<0>,31:212]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:232].[@-1,85:85='e',<0>,31:237]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:241].[@-1,92:95='text',<0>,31:244]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:251].[@-1,105:105='e',<0>,31:257]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 17:52:28:934 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-11 17:52:28:934 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 17:52:28:934 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:149]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:179].[@-1,37:41='start',<0>,33:184]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:202].[@-1,60:64='start',<0>,33:207]
2023-08-11 17:52:28:934 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:227].[@-1,85:85='e',<0>,33:232]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:236].[@-1,92:95='text',<0>,33:239]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:246].[@-1,105:105='e',<0>,33:252]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 17:52:28:942 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:124]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:154].[@-1,37:41='start',<0>,34:159]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:177].[@-1,60:64='start',<0>,34:182]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:202].[@-1,85:85='e',<0>,34:207]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:211].[@-1,92:95='text',<0>,34:214]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:221].[@-1,105:105='e',<0>,34:227]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 17:52:28:942 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:123]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:153].[@-1,37:41='start',<0>,35:158]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:176].[@-1,60:64='start',<0>,35:181]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:201].[@-1,85:85='e',<0>,35:206]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:210].[@-1,92:95='text',<0>,35:213]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:220].[@-1,105:105='e',<0>,35:226]
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-11 17:52:28:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-11 17:52:29:152 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-11 17:52:29:152 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-11 17:52:29:227 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-11 17:52:29:227 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

