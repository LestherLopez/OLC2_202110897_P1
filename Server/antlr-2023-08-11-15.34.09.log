2023-08-11 15:34:08:858 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-11 15:34:08:866 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-11 15:34:09:239 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declarestmt (BLOCK (ALT VAR ID DOUBLEPTS type IG expr) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr)) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }))) (RULE type (BLOCK (ALT STRINGS) (ALT INTS) (ALT FLOATS) (ALT BOOLS) (ALT CHARACTERS)))))
2023-08-11 15:34:09:244 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declarestmt (BLOCK (ALT VAR ID DOUBLEPTS type IG expr) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr)) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }))) (RULE type (BLOCK (ALT (SET STRINGS INTS FLOATS BOOLS CHARACTERS))))))
2023-08-11 15:34:09:246 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declarestmt (BLOCK (ALT VAR ID DOUBLEPTS type IG expr) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr)) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }))) (RULE type (BLOCK (ALT (SET STRINGS INTS FLOATS BOOLS CHARACTERS))))))
2023-08-11 15:34:09:246 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-11 15:34:09:259 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=345>   left=expr<tokenIndex=349,p=6> 
        | PARIZQ<tokenIndex=353> expr<tokenIndex=355> PARDER<tokenIndex=357> { $e = $expr.e } 
        | NUMBER<tokenIndex=363>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=369>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=375> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=381> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MUL<tokenIndex=215>|DIV<tokenIndex=217>) right=expr<tokenIndex=222,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(ADD<tokenIndex=235>|SUB<tokenIndex=237>|PERCENT<tokenIndex=239>) right=expr<tokenIndex=244,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MAY_IG<tokenIndex=257>|MAYOR<tokenIndex=259>) right=expr<tokenIndex=264,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(MEN_IG<tokenIndex=277>|MENOR<tokenIndex=279>) right=expr<tokenIndex=284,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(IG_IG<tokenIndex=297>|DIF<tokenIndex=299>) right=expr<tokenIndex=304,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=AND<tokenIndex=316> right=expr<tokenIndex=320,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> op=OR<tokenIndex=332> right=expr<tokenIndex=336,p=8> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-11 15:34:09:277 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 345)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 349) (= p 6))))) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 353))) (expr (ELEMENT_OPTIONS (= tokenIndex 355))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 357))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 363))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 369))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 375))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 381))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 215))) (DIV (ELEMENT_OPTIONS (= tokenIndex 217))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 222) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 235))) (SUB (ELEMENT_OPTIONS (= tokenIndex 237))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 239))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 244) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 257))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 259))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 264) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 277))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 279))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 284) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 297))) (DIF (ELEMENT_OPTIONS (= tokenIndex 299))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 304) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 316)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 320) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 332)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 336) (= p 8)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-11 15:34:09:292 grammar LogManager.java:25 import STRINGS=1
2023-08-11 15:34:09:292 grammar LogManager.java:25 import INTS=2
2023-08-11 15:34:09:292 grammar LogManager.java:25 import FLOATS=3
2023-08-11 15:34:09:292 grammar LogManager.java:25 import BOOLS=4
2023-08-11 15:34:09:292 grammar LogManager.java:25 import CHARACTERS=5
2023-08-11 15:34:09:293 grammar LogManager.java:25 import VAR=6
2023-08-11 15:34:09:293 grammar LogManager.java:25 import NIL=7
2023-08-11 15:34:09:293 grammar LogManager.java:25 import TRUE=8
2023-08-11 15:34:09:293 grammar LogManager.java:25 import FALSE=9
2023-08-11 15:34:09:293 grammar LogManager.java:25 import PRINT=10
2023-08-11 15:34:09:293 grammar LogManager.java:25 import IF=11
2023-08-11 15:34:09:293 grammar LogManager.java:25 import ELSE=12
2023-08-11 15:34:09:293 grammar LogManager.java:25 import WHILE=13
2023-08-11 15:34:09:293 grammar LogManager.java:25 import LET=14
2023-08-11 15:34:09:293 grammar LogManager.java:25 import NUMBER=15
2023-08-11 15:34:09:293 grammar LogManager.java:25 import STRING=16
2023-08-11 15:34:09:293 grammar LogManager.java:25 import ID=17
2023-08-11 15:34:09:293 grammar LogManager.java:25 import DIF=18
2023-08-11 15:34:09:293 grammar LogManager.java:25 import IG_IG=19
2023-08-11 15:34:09:293 grammar LogManager.java:25 import NOT=20
2023-08-11 15:34:09:293 grammar LogManager.java:25 import OR=21
2023-08-11 15:34:09:293 grammar LogManager.java:25 import AND=22
2023-08-11 15:34:09:293 grammar LogManager.java:25 import IG=23
2023-08-11 15:34:09:293 grammar LogManager.java:25 import MAY_IG=24
2023-08-11 15:34:09:293 grammar LogManager.java:25 import MEN_IG=25
2023-08-11 15:34:09:293 grammar LogManager.java:25 import MAYOR=26
2023-08-11 15:34:09:293 grammar LogManager.java:25 import MENOR=27
2023-08-11 15:34:09:293 grammar LogManager.java:25 import MUL=28
2023-08-11 15:34:09:293 grammar LogManager.java:25 import DIV=29
2023-08-11 15:34:09:293 grammar LogManager.java:25 import ADD=30
2023-08-11 15:34:09:293 grammar LogManager.java:25 import SUB=31
2023-08-11 15:34:09:293 grammar LogManager.java:25 import PERCENT=32
2023-08-11 15:34:09:293 grammar LogManager.java:25 import PARIZQ=33
2023-08-11 15:34:09:293 grammar LogManager.java:25 import PARDER=34
2023-08-11 15:34:09:293 grammar LogManager.java:25 import LLAVEIZQ=35
2023-08-11 15:34:09:293 grammar LogManager.java:25 import LLAVEDER=36
2023-08-11 15:34:09:293 grammar LogManager.java:25 import DOUBLEPTS=37
2023-08-11 15:34:09:293 grammar LogManager.java:25 import QUESTION=38
2023-08-11 15:34:09:293 grammar LogManager.java:25 import WHITESPACE=39
2023-08-11 15:34:09:293 grammar LogManager.java:25 import COMMENT=40
2023-08-11 15:34:09:293 grammar LogManager.java:25 import LINE_COMMENT=41
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'String'=1
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'Int'=2
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'Float'=3
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'Bool'=4
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'Character'=5
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'var'=6
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'nil'=7
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'true'=8
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'false'=9
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'print'=10
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'if'=11
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'else'=12
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'while'=13
2023-08-11 15:34:09:293 grammar LogManager.java:25 import 'let'=14
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '!='=18
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '=='=19
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '!'=20
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '||'=21
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '&&'=22
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '='=23
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '>='=24
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '<='=25
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '>'=26
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '<'=27
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '*'=28
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '/'=29
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '+'=30
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '-'=31
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '%'=32
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '('=33
2023-08-11 15:34:09:293 grammar LogManager.java:25 import ')'=34
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '{'=35
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '}'=36
2023-08-11 15:34:09:293 grammar LogManager.java:25 import ':'=37
2023-08-11 15:34:09:293 grammar LogManager.java:25 import '?'=38
2023-08-11 15:34:09:293 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, NUMBER=15, STRING=16, ID=17, DIF=18, IG_IG=19, NOT=20, OR=21, AND=22, IG=23, MAY_IG=24, MEN_IG=25, MAYOR=26, MENOR=27, MUL=28, DIV=29, ADD=30, SUB=31, PERCENT=32, PARIZQ=33, PARDER=34, LLAVEIZQ=35, LLAVEDER=36, DOUBLEPTS=37, QUESTION=38, WHITESPACE=39, COMMENT=40, LINE_COMMENT=41, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, '!='=18, '=='=19, '!'=20, '||'=21, '&&'=22, '='=23, '>='=24, '<='=25, '>'=26, '<'=27, '*'=28, '/'=29, '+'=30, '-'=31, '%'=32, '('=33, ')'=34, '{'=35, '}'=36, ':'=37, '?'=38}
2023-08-11 15:34:09:293 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, NUMBER=15, STRING=16, ID=17, DIF=18, IG_IG=19, NOT=20, OR=21, AND=22, IG=23, MAY_IG=24, MEN_IG=25, MAYOR=26, MENOR=27, MUL=28, DIV=29, ADD=30, SUB=31, PERCENT=32, PARIZQ=33, PARDER=34, LLAVEIZQ=35, LLAVEDER=36, DOUBLEPTS=37, QUESTION=38, WHITESPACE=39, COMMENT=40, LINE_COMMENT=41}
2023-08-11 15:34:09:293 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, '!='=18, '=='=19, '!'=20, '||'=21, '&&'=22, '='=23, '>='=24, '<='=25, '>'=26, '<'=27, '*'=28, '/'=29, '+'=30, '-'=31, '%'=32, '('=33, ')'=34, '{'=35, '}'=36, ':'=37, '?'=38}
2023-08-11 15:34:09:312 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-11 15:34:09:312 LL1 LogManager.java:25 look=[{10..11}, {<EOF>, 36}]
2023-08-11 15:34:09:312 LL1 LogManager.java:25 LL(1)? true
2023-08-11 15:34:09:312 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-11 15:34:09:312 LL1 LogManager.java:25 look=[10, 11]
2023-08-11 15:34:09:312 LL1 LogManager.java:25 LL(1)? true
2023-08-11 15:34:09:312 LL1 LogManager.java:25 
DECISION 2 in rule declarestmt
2023-08-11 15:34:09:312 LL1 LogManager.java:25 look=[6, 6, 6]
2023-08-11 15:34:09:312 LL1 LogManager.java:25 LL(1)? false
2023-08-11 15:34:09:312 LL1 LogManager.java:25 
DECISION 3 in rule constantstmt
2023-08-11 15:34:09:312 LL1 LogManager.java:25 look=[14, 14]
2023-08-11 15:34:09:312 LL1 LogManager.java:25 LL(1)? false
2023-08-11 15:34:09:312 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-11 15:34:09:312 LL1 LogManager.java:25 look=[20, 33, 15, 16, 8, 9]
2023-08-11 15:34:09:312 LL1 LogManager.java:25 LL(1)? true
2023-08-11 15:34:09:312 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-11 15:34:09:312 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-11 15:34:09:312 LL1 LogManager.java:25 LL(1)? false
2023-08-11 15:34:09:312 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-11 15:34:09:312 LL1 LogManager.java:25 look=[null, null]
2023-08-11 15:34:09:312 LL1 LogManager.java:25 LL(1)? false
2023-08-11 15:34:09:317 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-11 15:34:09:325 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-11 15:34:09:325 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-11 15:34:09:325 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-11 15:34:09:333 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-11 15:34:09:334 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-11 15:34:09:335 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-11 15:34:09:335 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-11 15:34:09:335 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-11 15:34:09:335 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-11 15:34:09:335 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-11 15:34:09:335 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-11 15:34:09:335 action-translator LogManager.java:25 translate  
2023-08-11 15:34:09:335 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-11 15:34:09:335 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,44:29]
2023-08-11 15:34:09:335 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,44:59].[@-1,38:41='line',<0>,44:65]
2023-08-11 15:34:09:335 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,44:71].[@-1,50:52='pos',<0>,44:77]
2023-08-11 15:34:09:335 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,44:82].[@-1,60:60='e',<0>,44:87]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 translate 
2023-08-11 15:34:09:343 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-11 15:34:09:343 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,11:13]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,11:43].[@-1,240:243='line',<0>,11:50]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,11:56].[@-1,253:255='pos',<0>,11:63]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,13:37].[@-1,341:344='text',<0>,13:44]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,17:13]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,17:43].[@-1,474:477='line',<0>,17:50]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,17:56].[@-1,487:489='pos',<0>,17:63]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,22:16].[@-1,25:28='text',<0>,22:23]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,23:9]
2023-08-11 15:34:09:343 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,23:39].[@-1,77:80='line',<0>,23:46]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,23:53].[@-1,91:93='pos',<0>,23:60]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-11 15:34:09:351 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:33]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,25:63].[@-1,37:40='line',<0>,25:68]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,25:75].[@-1,49:51='pos',<0>,25:80]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-11 15:34:09:351 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:34]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,26:64].[@-1,38:41='line',<0>,26:70]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,26:77].[@-1,51:53='pos',<0>,26:83]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-11 15:34:09:351 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 15:34:09:351 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:139]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,29:169].[@-1,37:41='start',<0>,29:174]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,29:192].[@-1,60:64='start',<0>,29:197]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,29:217].[@-1,85:85='e',<0>,29:222]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,29:226].[@-1,92:95='text',<0>,29:229]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,29:236].[@-1,105:105='e',<0>,29:242]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-11 15:34:09:351 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 15:34:09:351 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:173]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:203].[@-1,37:41='start',<0>,30:208]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:226].[@-1,60:64='start',<0>,30:231]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:251].[@-1,85:85='e',<0>,30:256]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:260].[@-1,92:95='text',<0>,30:263]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:270].[@-1,105:105='e',<0>,30:276]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-11 15:34:09:351 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 15:34:09:351 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:154]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:184].[@-1,37:41='start',<0>,31:189]
2023-08-11 15:34:09:351 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:207].[@-1,60:64='start',<0>,31:212]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:232].[@-1,85:85='e',<0>,31:237]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:241].[@-1,92:95='text',<0>,31:244]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:251].[@-1,105:105='e',<0>,31:257]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-11 15:34:09:360 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 15:34:09:360 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-11 15:34:09:360 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 15:34:09:360 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:149]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:179].[@-1,37:41='start',<0>,33:184]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:202].[@-1,60:64='start',<0>,33:207]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:227].[@-1,85:85='e',<0>,33:232]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:236].[@-1,92:95='text',<0>,33:239]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:246].[@-1,105:105='e',<0>,33:252]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-11 15:34:09:360 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 15:34:09:360 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:124]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:154].[@-1,37:41='start',<0>,34:159]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:177].[@-1,60:64='start',<0>,34:182]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:202].[@-1,85:85='e',<0>,34:207]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:211].[@-1,92:95='text',<0>,34:214]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:221].[@-1,105:105='e',<0>,34:227]
2023-08-11 15:34:09:360 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-11 15:34:09:360 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-11 15:34:09:360 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:123]
2023-08-11 15:34:09:367 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:153].[@-1,37:41='start',<0>,35:158]
2023-08-11 15:34:09:367 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:176].[@-1,60:64='start',<0>,35:181]
2023-08-11 15:34:09:367 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:201].[@-1,85:85='e',<0>,35:206]
2023-08-11 15:34:09:367 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:210].[@-1,92:95='text',<0>,35:213]
2023-08-11 15:34:09:367 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:220].[@-1,105:105='e',<0>,35:226]
2023-08-11 15:34:09:367 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-11 15:34:09:367 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-11 15:34:09:367 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-11 15:34:09:367 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-11 15:34:09:367 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-11 15:34:09:367 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-11 15:34:09:367 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-11 15:34:09:542 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-11 15:34:09:542 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-11 15:34:09:653 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-11 15:34:09:653 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

