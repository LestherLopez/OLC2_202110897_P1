2023-08-29 21:39:49:771 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-29 21:39:49:787 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-29 21:39:50:183 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (BLOCK (ALT CONTINUE) (ALT RETURN) (ALT BREAK))) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE PTCOMA {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK PTCOMA {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l)}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil)}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG ID))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT (= idprim ID) CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) {$assignvec = instructions.NewAssignationVector($idprim.line, $idprim.pos, $idprim.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-29 21:39:50:191 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE PTCOMA {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK PTCOMA {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l)}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil)}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG ID))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT (= idprim ID) CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) {$assignvec = instructions.NewAssignationVector($idprim.line, $idprim.pos, $idprim.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-29 21:39:50:194 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE PTCOMA {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK PTCOMA {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l)}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil)}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG ID))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT (= idprim ID) CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) {$assignvec = instructions.NewAssignationVector($idprim.line, $idprim.pos, $idprim.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-29 21:39:50:194 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-29 21:39:50:212 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=957> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=949> expr<tokenIndex=951> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-29 21:39:50:217 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 957))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 949))) (expr (ELEMENT_OPTIONS (= tokenIndex 951))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-29 21:39:50:221 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=1110>   left=expr<tokenIndex=1114,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | op = SUB<tokenIndex=1124>  left=expr<tokenIndex=1128,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)} 
        | PARIZQ<tokenIndex=1134> expr<tokenIndex=1136> PARDER<tokenIndex=1138> { $e = $expr.e } 
        | NUMBER<tokenIndex=1144>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1150>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=1156> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=1162> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=1168> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        | accessstmt<tokenIndex=1174> {$e = $accessstmt.access} 
        | emptvecstmt<tokenIndex=1180> {$e = $emptvecstmt.emptyvec} 
        | countvecstmt<tokenIndex=1186> {$e = $countvecstmt.count} 
        | accessvecstmt<tokenIndex=1192> {$e = $accessvecstmt.accessvec} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=980>|DIV<tokenIndex=982>) right=expr<tokenIndex=987,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=1000>|SUB<tokenIndex=1002>|PERCENT<tokenIndex=1004>) right=expr<tokenIndex=1009,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=1022>|MAYOR<tokenIndex=1024>) right=expr<tokenIndex=1029,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=1042>|MENOR<tokenIndex=1044>) right=expr<tokenIndex=1049,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=1062>|DIF<tokenIndex=1064>) right=expr<tokenIndex=1069,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=1081> right=expr<tokenIndex=1085,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=1097> right=expr<tokenIndex=1101,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-29 21:39:50:237 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 1110)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1114) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 1124)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1128) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1134))) (expr (ELEMENT_OPTIONS (= tokenIndex 1136))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1138))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1144))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1150))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 1156))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 1162))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1168))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 1174))) {$e = $accessstmt.access}) (ALT (emptvecstmt (ELEMENT_OPTIONS (= tokenIndex 1180))) {$e = $emptvecstmt.emptyvec}) (ALT (countvecstmt (ELEMENT_OPTIONS (= tokenIndex 1186))) {$e = $countvecstmt.count}) (ALT (accessvecstmt (ELEMENT_OPTIONS (= tokenIndex 1192))) {$e = $accessvecstmt.accessvec})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 980))) (DIV (ELEMENT_OPTIONS (= tokenIndex 982))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 987) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1000))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1002))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 1004))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1009) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1022))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1024))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1029) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1042))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1044))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1049) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1062))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1064))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1069) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1081)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1085) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1097)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1101) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-29 21:39:50:248 grammar LogManager.java:25 import STRINGS=1
2023-08-29 21:39:50:248 grammar LogManager.java:25 import INTS=2
2023-08-29 21:39:50:248 grammar LogManager.java:25 import FLOATS=3
2023-08-29 21:39:50:248 grammar LogManager.java:25 import BOOLS=4
2023-08-29 21:39:50:248 grammar LogManager.java:25 import CHARACTERS=5
2023-08-29 21:39:50:248 grammar LogManager.java:25 import VAR=6
2023-08-29 21:39:50:248 grammar LogManager.java:25 import NIL=7
2023-08-29 21:39:50:248 grammar LogManager.java:25 import TRUE=8
2023-08-29 21:39:50:248 grammar LogManager.java:25 import FALSE=9
2023-08-29 21:39:50:249 grammar LogManager.java:25 import PRINT=10
2023-08-29 21:39:50:249 grammar LogManager.java:25 import IF=11
2023-08-29 21:39:50:249 grammar LogManager.java:25 import ELSE=12
2023-08-29 21:39:50:249 grammar LogManager.java:25 import WHILE=13
2023-08-29 21:39:50:249 grammar LogManager.java:25 import LET=14
2023-08-29 21:39:50:249 grammar LogManager.java:25 import FOR=15
2023-08-29 21:39:50:249 grammar LogManager.java:25 import IN=16
2023-08-29 21:39:50:249 grammar LogManager.java:25 import SWITCH=17
2023-08-29 21:39:50:249 grammar LogManager.java:25 import CASE=18
2023-08-29 21:39:50:249 grammar LogManager.java:25 import DEFAULT=19
2023-08-29 21:39:50:249 grammar LogManager.java:25 import GUARD=20
2023-08-29 21:39:50:249 grammar LogManager.java:25 import CONTINUE=21
2023-08-29 21:39:50:249 grammar LogManager.java:25 import RETURN=22
2023-08-29 21:39:50:249 grammar LogManager.java:25 import BREAK=23
2023-08-29 21:39:50:249 grammar LogManager.java:25 import APPEND=24
2023-08-29 21:39:50:249 grammar LogManager.java:25 import REMOVELAST=25
2023-08-29 21:39:50:249 grammar LogManager.java:25 import REMOVE=26
2023-08-29 21:39:50:249 grammar LogManager.java:25 import AT=27
2023-08-29 21:39:50:249 grammar LogManager.java:25 import ISEMPTY=28
2023-08-29 21:39:50:250 grammar LogManager.java:25 import COUNT=29
2023-08-29 21:39:50:250 grammar LogManager.java:25 import NUMBER=30
2023-08-29 21:39:50:250 grammar LogManager.java:25 import STRING=31
2023-08-29 21:39:50:250 grammar LogManager.java:25 import ID=32
2023-08-29 21:39:50:250 grammar LogManager.java:25 import DIF=33
2023-08-29 21:39:50:250 grammar LogManager.java:25 import IG_IG=34
2023-08-29 21:39:50:250 grammar LogManager.java:25 import NOT=35
2023-08-29 21:39:50:250 grammar LogManager.java:25 import OR=36
2023-08-29 21:39:50:250 grammar LogManager.java:25 import AND=37
2023-08-29 21:39:50:250 grammar LogManager.java:25 import IG=38
2023-08-29 21:39:50:250 grammar LogManager.java:25 import IG_ADD=39
2023-08-29 21:39:50:250 grammar LogManager.java:25 import IG_SUB=40
2023-08-29 21:39:50:250 grammar LogManager.java:25 import MAY_IG=41
2023-08-29 21:39:50:250 grammar LogManager.java:25 import MEN_IG=42
2023-08-29 21:39:50:250 grammar LogManager.java:25 import MAYOR=43
2023-08-29 21:39:50:250 grammar LogManager.java:25 import MENOR=44
2023-08-29 21:39:50:250 grammar LogManager.java:25 import MUL=45
2023-08-29 21:39:50:250 grammar LogManager.java:25 import DIV=46
2023-08-29 21:39:50:250 grammar LogManager.java:25 import ADD=47
2023-08-29 21:39:50:250 grammar LogManager.java:25 import SUB=48
2023-08-29 21:39:50:250 grammar LogManager.java:25 import PERCENT=49
2023-08-29 21:39:50:250 grammar LogManager.java:25 import PARIZQ=50
2023-08-29 21:39:50:250 grammar LogManager.java:25 import PARDER=51
2023-08-29 21:39:50:250 grammar LogManager.java:25 import LLAVEIZQ=52
2023-08-29 21:39:50:250 grammar LogManager.java:25 import LLAVEDER=53
2023-08-29 21:39:50:250 grammar LogManager.java:25 import DOUBLEPTS=54
2023-08-29 21:39:50:250 grammar LogManager.java:25 import QUESTION=55
2023-08-29 21:39:50:250 grammar LogManager.java:25 import POINT=56
2023-08-29 21:39:50:250 grammar LogManager.java:25 import COMA=57
2023-08-29 21:39:50:251 grammar LogManager.java:25 import PTCOMA=58
2023-08-29 21:39:50:251 grammar LogManager.java:25 import CORCHETEIZQ=59
2023-08-29 21:39:50:251 grammar LogManager.java:25 import CORCHETEDER=60
2023-08-29 21:39:50:251 grammar LogManager.java:25 import WHITESPACE=61
2023-08-29 21:39:50:251 grammar LogManager.java:25 import COMMENT=62
2023-08-29 21:39:50:251 grammar LogManager.java:25 import LINE_COMMENT=63
2023-08-29 21:39:50:251 grammar LogManager.java:25 import 'String'=1
2023-08-29 21:39:50:251 grammar LogManager.java:25 import 'Int'=2
2023-08-29 21:39:50:252 grammar LogManager.java:25 import 'Float'=3
2023-08-29 21:39:50:252 grammar LogManager.java:25 import 'Bool'=4
2023-08-29 21:39:50:252 grammar LogManager.java:25 import 'Character'=5
2023-08-29 21:39:50:252 grammar LogManager.java:25 import 'var'=6
2023-08-29 21:39:50:252 grammar LogManager.java:25 import 'nil'=7
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'true'=8
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'false'=9
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'print'=10
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'if'=11
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'else'=12
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'while'=13
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'let'=14
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'for'=15
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'in'=16
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'switch'=17
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'case'=18
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'default'=19
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'guard'=20
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'continue'=21
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'return'=22
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'break'=23
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'append'=24
2023-08-29 21:39:50:253 grammar LogManager.java:25 import 'removeLast'=25
2023-08-29 21:39:50:254 grammar LogManager.java:25 import 'remove'=26
2023-08-29 21:39:50:254 grammar LogManager.java:25 import 'at'=27
2023-08-29 21:39:50:254 grammar LogManager.java:25 import 'IsEmpty'=28
2023-08-29 21:39:50:254 grammar LogManager.java:25 import 'count'=29
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '!='=33
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '=='=34
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '!'=35
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '||'=36
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '&&'=37
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '='=38
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '+='=39
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '-='=40
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '>='=41
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '<='=42
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '>'=43
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '<'=44
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '*'=45
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '/'=46
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '+'=47
2023-08-29 21:39:50:254 grammar LogManager.java:25 import '-'=48
2023-08-29 21:39:50:255 grammar LogManager.java:25 import '%'=49
2023-08-29 21:39:50:255 grammar LogManager.java:25 import '('=50
2023-08-29 21:39:50:255 grammar LogManager.java:25 import ')'=51
2023-08-29 21:39:50:255 grammar LogManager.java:25 import '{'=52
2023-08-29 21:39:50:255 grammar LogManager.java:25 import '}'=53
2023-08-29 21:39:50:255 grammar LogManager.java:25 import ':'=54
2023-08-29 21:39:50:255 grammar LogManager.java:25 import '?'=55
2023-08-29 21:39:50:255 grammar LogManager.java:25 import '.'=56
2023-08-29 21:39:50:255 grammar LogManager.java:25 import ','=57
2023-08-29 21:39:50:255 grammar LogManager.java:25 import ';'=58
2023-08-29 21:39:50:255 grammar LogManager.java:25 import '['=59
2023-08-29 21:39:50:255 grammar LogManager.java:25 import ']'=60
2023-08-29 21:39:50:256 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, APPEND=24, REMOVELAST=25, REMOVE=26, AT=27, ISEMPTY=28, COUNT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, IG_ADD=39, IG_SUB=40, MAY_IG=41, MEN_IG=42, MAYOR=43, MENOR=44, MUL=45, DIV=46, ADD=47, SUB=48, PERCENT=49, PARIZQ=50, PARDER=51, LLAVEIZQ=52, LLAVEDER=53, DOUBLEPTS=54, QUESTION=55, POINT=56, COMA=57, PTCOMA=58, CORCHETEIZQ=59, CORCHETEDER=60, WHITESPACE=61, COMMENT=62, LINE_COMMENT=63, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, 'IsEmpty'=28, 'count'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '+='=39, '-='=40, '>='=41, '<='=42, '>'=43, '<'=44, '*'=45, '/'=46, '+'=47, '-'=48, '%'=49, '('=50, ')'=51, '{'=52, '}'=53, ':'=54, '?'=55, '.'=56, ','=57, ';'=58, '['=59, ']'=60}
2023-08-29 21:39:50:256 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, APPEND=24, REMOVELAST=25, REMOVE=26, AT=27, ISEMPTY=28, COUNT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, IG_ADD=39, IG_SUB=40, MAY_IG=41, MEN_IG=42, MAYOR=43, MENOR=44, MUL=45, DIV=46, ADD=47, SUB=48, PERCENT=49, PARIZQ=50, PARDER=51, LLAVEIZQ=52, LLAVEDER=53, DOUBLEPTS=54, QUESTION=55, POINT=56, COMA=57, PTCOMA=58, CORCHETEIZQ=59, CORCHETEDER=60, WHITESPACE=61, COMMENT=62, LINE_COMMENT=63}
2023-08-29 21:39:50:256 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, 'IsEmpty'=28, 'count'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '+='=39, '-='=40, '>='=41, '<='=42, '>'=43, '<'=44, '*'=45, '/'=46, '+'=47, '-'=48, '%'=49, '('=50, ')'=51, '{'=52, '}'=53, ':'=54, '?'=55, '.'=56, ','=57, ';'=58, '['=59, ']'=60}
2023-08-29 21:39:50:292 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-29 21:39:50:292 LL1 LogManager.java:25 look=[{6, 10..11, 13..15, 17, 20..23, 32}, {<EOF>, 18..19, 21..23, 53}]
2023-08-29 21:39:50:293 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:293 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-29 21:39:50:293 LL1 LogManager.java:25 look=[10, 6, 14, 32, 32, 11, 13, 15, 17, 20, {21..23}, 6, 32, 32, 32, 32]
2023-08-29 21:39:50:293 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:293 LL1 LogManager.java:25 
DECISION 2 in rule declarestmt
2023-08-29 21:39:50:293 LL1 LogManager.java:25 look=[6, 6, 6]
2023-08-29 21:39:50:293 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:293 LL1 LogManager.java:25 
DECISION 3 in rule constantstmt
2023-08-29 21:39:50:293 LL1 LogManager.java:25 look=[14, 14]
2023-08-29 21:39:50:293 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:293 LL1 LogManager.java:25 
DECISION 4 in rule blockelifs
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[11, {<EOF>, 6, 10..11, 13..15, 17..23, 32, 53}]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 5 in rule ifstmt
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 6 in rule switchstmt
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[17, 17]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 7 in rule casestmt
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[18, 18]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 8 in rule blockcases
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[18, {18, 53}]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 9 in rule forstmt
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[15, 15]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 10 in rule transferstmt
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[22, 22, 21, 23]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 11 in rule declarevectorstmt
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[6, 6, 6, 6]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 12 in rule listParams
2023-08-29 21:39:50:294 LL1 LogManager.java:25 look=[null, 60]
2023-08-29 21:39:50:294 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:294 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-08-29 21:39:50:295 LL1 LogManager.java:25 look=[35, 48, 50, 30, 31, 8, 9, 7, 32, 32, 32, 32]
2023-08-29 21:39:50:295 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:295 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-08-29 21:39:50:295 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-29 21:39:50:295 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:295 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-08-29 21:39:50:295 LL1 LogManager.java:25 look=[null, null]
2023-08-29 21:39:50:295 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:295 LL1 LogManager.java:25 
DECISION 16 in rule increaseanddecreasestmt
2023-08-29 21:39:50:295 LL1 LogManager.java:25 look=[32, 32]
2023-08-29 21:39:50:295 LL1 LogManager.java:25 LL(1)? false
2023-08-29 21:39:50:295 LL1 LogManager.java:25 
DECISION 17 in rule type
2023-08-29 21:39:50:295 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-08-29 21:39:50:295 LL1 LogManager.java:25 LL(1)? true
2023-08-29 21:39:50:299 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-29 21:39:50:311 action-translator LogManager.java:25 translate $code = $block.blk
2023-08-29 21:39:50:311 action-translator LogManager.java:25 attr [@-1,1:4='code',<0>,18:13]
2023-08-29 21:39:50:312 action-translator LogManager.java:25 qattr [@-1,9:13='block',<0>,18:21].[@-1,15:17='blk',<0>,18:27]
2023-08-29 21:39:50:313 action-translator LogManager.java:25 translate 
$blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-29 21:39:50:313 action-translator LogManager.java:25 attr [@-1,3:5='blk',<0>,23:1]
2023-08-29 21:39:50:314 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    
2023-08-29 21:39:50:314 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,30:13]
2023-08-29 21:39:50:315 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,30:27]
2023-08-29 21:39:50:315 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-29 21:39:50:316 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,37:14]
2023-08-29 21:39:50:316 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,37:22].[@-1,20:23='prnt',<0>,37:32]
2023-08-29 21:39:50:316 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-08-29 21:39:50:316 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,38:15]
2023-08-29 21:39:50:316 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,38:23].[@-1,21:23='dec',<0>,38:35]
2023-08-29 21:39:50:316 action-translator LogManager.java:25 translate $inst = $constantstmt.const
2023-08-29 21:39:50:316 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,39:16]
2023-08-29 21:39:50:316 action-translator LogManager.java:25 qattr [@-1,9:20='constantstmt',<0>,39:24].[@-1,22:26='const',<0>,39:37]
2023-08-29 21:39:50:316 action-translator LogManager.java:25 translate $inst = $assignationstmt.assign
2023-08-29 21:39:50:316 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:19]
2023-08-29 21:39:50:316 action-translator LogManager.java:25 qattr [@-1,9:23='assignationstmt',<0>,40:27].[@-1,25:30='assign',<0>,40:43]
2023-08-29 21:39:50:317 action-translator LogManager.java:25 translate $inst = $increaseanddecreasestmt.increasedecrease
2023-08-29 21:39:50:317 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,41:27]
2023-08-29 21:39:50:317 action-translator LogManager.java:25 qattr [@-1,9:31='increaseanddecreasestmt',<0>,41:35].[@-1,33:48='increasedecrease',<0>,41:59]
2023-08-29 21:39:50:317 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-08-29 21:39:50:317 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:11]
2023-08-29 21:39:50:317 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,42:19].[@-1,17:19='ift',<0>,42:26]
2023-08-29 21:39:50:317 action-translator LogManager.java:25 translate $inst = $whilestmt.while
2023-08-29 21:39:50:317 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,43:13]
2023-08-29 21:39:50:317 action-translator LogManager.java:25 qattr [@-1,9:17='whilestmt',<0>,43:21].[@-1,19:23='while',<0>,43:31]
2023-08-29 21:39:50:317 action-translator LogManager.java:25 translate $inst = $forstmt.for
2023-08-29 21:39:50:317 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,44:11]
2023-08-29 21:39:50:318 action-translator LogManager.java:25 qattr [@-1,9:15='forstmt',<0>,44:19].[@-1,17:19='for',<0>,44:27]
2023-08-29 21:39:50:318 action-translator LogManager.java:25 translate $inst = $switchstmt.switch
2023-08-29 21:39:50:318 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:14]
2023-08-29 21:39:50:318 action-translator LogManager.java:25 qattr [@-1,9:18='switchstmt',<0>,45:22].[@-1,20:25='switch',<0>,45:33]
2023-08-29 21:39:50:318 action-translator LogManager.java:25 translate $inst = $guardstmt.gua
2023-08-29 21:39:50:319 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:13]
2023-08-29 21:39:50:319 action-translator LogManager.java:25 qattr [@-1,9:17='guardstmt',<0>,46:21].[@-1,19:21='gua',<0>,46:31]
2023-08-29 21:39:50:319 action-translator LogManager.java:25 translate $inst = $transferstmt.tran
2023-08-29 21:39:50:319 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:16]
2023-08-29 21:39:50:319 action-translator LogManager.java:25 qattr [@-1,9:20='transferstmt',<0>,47:24].[@-1,22:25='tran',<0>,47:37]
2023-08-29 21:39:50:319 action-translator LogManager.java:25 translate $inst = $declarevectorstmt.decvec
2023-08-29 21:39:50:319 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:21]
2023-08-29 21:39:50:319 action-translator LogManager.java:25 qattr [@-1,9:25='declarevectorstmt',<0>,48:29].[@-1,27:32='decvec',<0>,48:47]
2023-08-29 21:39:50:320 action-translator LogManager.java:25 translate $inst = $appendstmt.app
2023-08-29 21:39:50:320 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,49:17]
2023-08-29 21:39:50:320 action-translator LogManager.java:25 qattr [@-1,9:18='appendstmt',<0>,49:25].[@-1,20:22='app',<0>,49:36]
2023-08-29 21:39:50:320 action-translator LogManager.java:25 translate $inst = $removelaststmt.removl
2023-08-29 21:39:50:320 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,50:18]
2023-08-29 21:39:50:320 action-translator LogManager.java:25 qattr [@-1,9:22='removelaststmt',<0>,50:26].[@-1,24:29='removl',<0>,50:41]
2023-08-29 21:39:50:320 action-translator LogManager.java:25 translate $inst = $removestmt.remov
2023-08-29 21:39:50:320 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,51:14]
2023-08-29 21:39:50:320 action-translator LogManager.java:25 qattr [@-1,9:18='removestmt',<0>,51:22].[@-1,20:24='remov',<0>,51:33]
2023-08-29 21:39:50:321 action-translator LogManager.java:25 translate $inst = $assignationvecstmt.assignvec
2023-08-29 21:39:50:321 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,52:22]
2023-08-29 21:39:50:321 action-translator LogManager.java:25 qattr [@-1,9:26='assignationvecstmt',<0>,52:30].[@-1,28:36='assignvec',<0>,52:49]
2023-08-29 21:39:50:322 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)
2023-08-29 21:39:50:322 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,56:29]
2023-08-29 21:39:50:323 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,56:59].[@-1,38:41='line',<0>,56:65]
2023-08-29 21:39:50:323 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,56:72].[@-1,51:53='pos',<0>,56:78]
2023-08-29 21:39:50:323 action-translator LogManager.java:25 qattr [@-1,57:60='expr',<0>,56:84].[@-1,62:62='e',<0>,56:89]
2023-08-29 21:39:50:325 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-08-29 21:39:50:325 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,61:33]
2023-08-29 21:39:50:325 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,61:66].[@-1,38:41='line',<0>,61:70]
2023-08-29 21:39:50:325 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,61:77].[@-1,49:51='pos',<0>,61:81]
2023-08-29 21:39:50:325 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,61:87].[@-1,58:61='text',<0>,61:90]
2023-08-29 21:39:50:325 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,61:97].[@-1,70:70='t',<0>,61:102]
2023-08-29 21:39:50:326 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,61:106].[@-1,79:79='e',<0>,61:111]
2023-08-29 21:39:50:326 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-08-29 21:39:50:326 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,62:18]
2023-08-29 21:39:50:326 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,62:51].[@-1,38:41='line',<0>,62:55]
2023-08-29 21:39:50:326 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,62:62].[@-1,49:51='pos',<0>,62:66]
2023-08-29 21:39:50:326 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,62:72].[@-1,58:61='text',<0>,62:75]
2023-08-29 21:39:50:326 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,62:100].[@-1,88:88='e',<0>,62:105]
2023-08-29 21:39:50:327 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)
2023-08-29 21:39:50:327 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,63:34]
2023-08-29 21:39:50:327 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,63:67].[@-1,38:41='line',<0>,63:71]
2023-08-29 21:39:50:327 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,63:78].[@-1,49:51='pos',<0>,63:82]
2023-08-29 21:39:50:327 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,63:88].[@-1,58:61='text',<0>,63:91]
2023-08-29 21:39:50:327 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,63:98].[@-1,70:70='t',<0>,63:103]
2023-08-29 21:39:50:328 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)
2023-08-29 21:39:50:328 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,67:33]
2023-08-29 21:39:50:328 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,67:68].[@-1,40:43='line',<0>,67:72]
2023-08-29 21:39:50:328 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,67:79].[@-1,51:53='pos',<0>,67:83]
2023-08-29 21:39:50:328 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,67:89].[@-1,60:63='text',<0>,67:92]
2023-08-29 21:39:50:328 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,67:99].[@-1,72:72='t',<0>,67:104]
2023-08-29 21:39:50:328 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,67:108].[@-1,81:81='e',<0>,67:113]
2023-08-29 21:39:50:329 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-08-29 21:39:50:330 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,68:18]
2023-08-29 21:39:50:330 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,68:53].[@-1,40:43='line',<0>,68:57]
2023-08-29 21:39:50:330 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,68:64].[@-1,51:53='pos',<0>,68:68]
2023-08-29 21:39:50:330 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,68:74].[@-1,60:63='text',<0>,68:77]
2023-08-29 21:39:50:330 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,68:102].[@-1,90:90='e',<0>,68:107]
2023-08-29 21:39:50:330 action-translator LogManager.java:25 translate 
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  
2023-08-29 21:39:50:330 action-translator LogManager.java:25 attr [@-1,3:7='blkef',<0>,75:1]
2023-08-29 21:39:50:330 action-translator LogManager.java:25 translate    
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    
2023-08-29 21:39:50:331 action-translator LogManager.java:25 attr [@-1,114:118='blkef',<0>,84:13]
2023-08-29 21:39:50:331 action-translator LogManager.java:25 attr [@-1,130:134='blkef',<0>,84:29]
2023-08-29 21:39:50:332 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk
2023-08-29 21:39:50:333 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,91:41] [@-1,7:68=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)',<0>,91:46]
2023-08-29 21:39:50:333 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)
2023-08-29 21:39:50:333 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,91:60].[@-1,24:27='line',<0>,91:63]
2023-08-29 21:39:50:333 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,91:70].[@-1,34:36='pos',<0>,91:73]
2023-08-29 21:39:50:333 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,91:79].[@-1,45:45='e',<0>,91:84]
2023-08-29 21:39:50:333 action-translator LogManager.java:25 qattr [@-1,49:51='ifb',<0>,91:88].[@-1,53:55='blk',<0>,91:92]
2023-08-29 21:39:50:334 action-translator LogManager.java:25 attr [@-1,114:115='el',<0>,92:41]
2023-08-29 21:39:50:334 action-translator LogManager.java:25 qattr [@-1,120:122='ifb',<0>,92:47].[@-1,124:126='blk',<0>,92:51]
2023-08-29 21:39:50:334 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        
2023-08-29 21:39:50:334 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,93:88] [@-1,7:87=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)',<0>,93:93]
2023-08-29 21:39:50:335 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)
2023-08-29 21:39:50:335 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,93:107].[@-1,24:27='line',<0>,93:110]
2023-08-29 21:39:50:335 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,93:117].[@-1,34:36='pos',<0>,93:120]
2023-08-29 21:39:50:335 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,93:126].[@-1,45:45='e',<0>,93:131]
2023-08-29 21:39:50:335 action-translator LogManager.java:25 qattr [@-1,49:58='ifelseblck',<0>,93:135].[@-1,60:62='blk',<0>,93:146]
2023-08-29 21:39:50:335 action-translator LogManager.java:25 qattr [@-1,66:75='elseifblck',<0>,93:152].[@-1,77:79='blk',<0>,93:163]
2023-08-29 21:39:50:336 action-translator LogManager.java:25 setAttr [@-1,181:182='el',<0>,94:89] [@-1,185:200=' $ifelseblck.blk',<0>,94:93]
2023-08-29 21:39:50:336 action-translator LogManager.java:25 translate  $ifelseblck.blk
2023-08-29 21:39:50:336 action-translator LogManager.java:25 qattr [@-1,2:11='ifelseblck',<0>,93:88].[@-1,13:15='blk',<0>,93:99]
2023-08-29 21:39:50:336 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); 
2023-08-29 21:39:50:336 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,97:59] [@-1,7:83=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)',<0>,97:64]
2023-08-29 21:39:50:336 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)
2023-08-29 21:39:50:336 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,97:78].[@-1,24:27='line',<0>,97:81]
2023-08-29 21:39:50:337 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,97:88].[@-1,34:36='pos',<0>,97:91]
2023-08-29 21:39:50:337 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,97:97].[@-1,45:45='e',<0>,97:102]
2023-08-29 21:39:50:337 action-translator LogManager.java:25 qattr [@-1,49:52='elif',<0>,97:106].[@-1,54:56='blk',<0>,97:111]
2023-08-29 21:39:50:337 action-translator LogManager.java:25 qattr [@-1,60:69='blockelifs',<0>,97:117].[@-1,71:75='blkef',<0>,97:128]
2023-08-29 21:39:50:338 action-translator LogManager.java:25 translate  $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);
2023-08-29 21:39:50:338 action-translator LogManager.java:25 setAttr [@-1,2:7='switch',<0>,101:58] [@-1,10:91=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)',<0>,101:66]
2023-08-29 21:39:50:338 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)
2023-08-29 21:39:50:338 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,101:81].[@-1,32:35='line',<0>,101:88]
2023-08-29 21:39:50:338 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,101:95].[@-1,46:48='pos',<0>,101:102]
2023-08-29 21:39:50:339 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,101:108].[@-1,57:57='e',<0>,101:113]
2023-08-29 21:39:50:339 action-translator LogManager.java:25 qattr [@-1,72:76='block',<0>,101:128].[@-1,78:80='blk',<0>,101:134]
2023-08-29 21:39:50:339 action-translator LogManager.java:25 translate $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);
2023-08-29 21:39:50:339 action-translator LogManager.java:25 setAttr [@-1,1:6='switch',<0>,102:44] [@-1,9:92=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)',<0>,102:52]
2023-08-29 21:39:50:339 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)
2023-08-29 21:39:50:340 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,102:68].[@-1,32:35='line',<0>,102:75]
2023-08-29 21:39:50:340 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,102:82].[@-1,46:48='pos',<0>,102:89]
2023-08-29 21:39:50:340 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,102:95].[@-1,57:57='e',<0>,102:100]
2023-08-29 21:39:50:340 action-translator LogManager.java:25 qattr [@-1,66:73='casestmt',<0>,102:109].[@-1,75:77='cas',<0>,102:118]
2023-08-29 21:39:50:341 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")
2023-08-29 21:39:50:341 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,105:41]
2023-08-29 21:39:50:341 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,105:69].[@-1,35:38='line',<0>,105:74]
2023-08-29 21:39:50:341 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,105:80].[@-1,46:48='pos',<0>,105:85]
2023-08-29 21:39:50:341 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,105:91].[@-1,57:57='e',<0>,105:96]
2023-08-29 21:39:50:341 action-translator LogManager.java:25 qattr [@-1,60:64='block',<0>,105:99].[@-1,66:68='blk',<0>,105:105]
2023-08-29 21:39:50:341 action-translator LogManager.java:25 qattr [@-1,72:81='blockcases',<0>,105:111].[@-1,83:89='blkcase',<0>,105:122]
2023-08-29 21:39:50:341 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)
2023-08-29 21:39:50:341 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,107:63]
2023-08-29 21:39:50:341 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,107:91].[@-1,35:38='line',<0>,107:96]
2023-08-29 21:39:50:342 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,107:102].[@-1,46:48='pos',<0>,107:107]
2023-08-29 21:39:50:342 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,107:113].[@-1,57:57='e',<0>,107:118]
2023-08-29 21:39:50:342 action-translator LogManager.java:25 qattr [@-1,60:62='sen',<0>,107:121].[@-1,64:66='blk',<0>,107:125]
2023-08-29 21:39:50:342 action-translator LogManager.java:25 qattr [@-1,70:72='def',<0>,107:131].[@-1,74:76='blk',<0>,107:135]
2023-08-29 21:39:50:342 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  
2023-08-29 21:39:50:342 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,111:5]
2023-08-29 21:39:50:342 action-translator LogManager.java:25 translate 
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    
2023-08-29 21:39:50:343 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,118:13]
2023-08-29 21:39:50:343 action-translator LogManager.java:25 attr [@-1,136:142='blkcase',<0>,118:31]
2023-08-29 21:39:50:343 action-translator LogManager.java:25 translate $assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)
2023-08-29 21:39:50:343 action-translator LogManager.java:25 attr [@-1,1:6='assign',<0>,126:14]
2023-08-29 21:39:50:343 action-translator LogManager.java:25 qattr [@-1,39:40='IG',<0>,126:52].[@-1,42:45='line',<0>,126:55]
2023-08-29 21:39:50:343 action-translator LogManager.java:25 qattr [@-1,49:50='IG',<0>,126:62].[@-1,52:54='pos',<0>,126:65]
2023-08-29 21:39:50:343 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,126:72].[@-1,62:65='text',<0>,126:75]
2023-08-29 21:39:50:343 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,126:82].[@-1,74:74='e',<0>,126:87]
2023-08-29 21:39:50:344 action-translator LogManager.java:25 translate $while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)
2023-08-29 21:39:50:344 action-translator LogManager.java:25 attr [@-1,1:5='while',<0>,130:38]
2023-08-29 21:39:50:345 action-translator LogManager.java:25 qattr [@-1,32:36='WHILE',<0>,130:69].[@-1,38:41='line',<0>,130:75]
2023-08-29 21:39:50:345 action-translator LogManager.java:25 qattr [@-1,45:49='WHILE',<0>,130:82].[@-1,51:53='pos',<0>,130:88]
2023-08-29 21:39:50:345 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,130:95].[@-1,63:63='e',<0>,130:100]
2023-08-29 21:39:50:345 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,130:104].[@-1,73:75='blk',<0>,130:110]
2023-08-29 21:39:50:347 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)
2023-08-29 21:39:50:347 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,134:43]
2023-08-29 21:39:50:347 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,134:70].[@-1,32:35='line',<0>,134:74]
2023-08-29 21:39:50:348 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,134:81].[@-1,43:45='pos',<0>,134:85]
2023-08-29 21:39:50:348 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,134:91].[@-1,52:55='text',<0>,134:94]
2023-08-29 21:39:50:348 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,134:101].[@-1,64:64='e',<0>,134:106]
2023-08-29 21:39:50:348 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,134:115].[@-1,79:81='blk',<0>,134:121]
2023-08-29 21:39:50:349 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)
2023-08-29 21:39:50:349 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,135:72]
2023-08-29 21:39:50:349 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,135:99].[@-1,32:35='line',<0>,135:103]
2023-08-29 21:39:50:349 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,135:110].[@-1,43:45='pos',<0>,135:114]
2023-08-29 21:39:50:349 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,135:120].[@-1,52:55='text',<0>,135:123]
2023-08-29 21:39:50:349 action-translator LogManager.java:25 qattr [@-1,59:63='first',<0>,135:130].[@-1,65:65='e',<0>,135:136]
2023-08-29 21:39:50:349 action-translator LogManager.java:25 qattr [@-1,69:74='second',<0>,135:140].[@-1,76:76='e',<0>,135:147]
2023-08-29 21:39:50:349 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,135:151].[@-1,86:88='blk',<0>,135:157]
2023-08-29 21:39:50:351 action-translator LogManager.java:25 translate $gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)
2023-08-29 21:39:50:351 action-translator LogManager.java:25 attr [@-1,1:3='gua',<0>,140:69]
2023-08-29 21:39:50:351 action-translator LogManager.java:25 qattr [@-1,30:34='GUARD',<0>,140:98].[@-1,36:39='line',<0>,140:104]
2023-08-29 21:39:50:351 action-translator LogManager.java:25 qattr [@-1,43:47='GUARD',<0>,140:111].[@-1,49:51='pos',<0>,140:117]
2023-08-29 21:39:50:351 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,140:123].[@-1,60:60='e',<0>,140:128]
2023-08-29 21:39:50:351 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,140:132].[@-1,70:72='blk',<0>,140:138]
2023-08-29 21:39:50:351 action-translator LogManager.java:25 qattr [@-1,76:76='r',<0>,140:144].[@-1,78:81='text',<0>,140:146]
2023-08-29 21:39:50:352 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)
2023-08-29 21:39:50:352 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,144:17]
2023-08-29 21:39:50:352 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,144:50].[@-1,41:44='line',<0>,144:57]
2023-08-29 21:39:50:352 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,144:64].[@-1,55:57='pos',<0>,144:71]
2023-08-29 21:39:50:352 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)
2023-08-29 21:39:50:352 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,145:22]
2023-08-29 21:39:50:352 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,145:55].[@-1,41:44='line',<0>,145:62]
2023-08-29 21:39:50:352 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,145:69].[@-1,55:57='pos',<0>,145:76]
2023-08-29 21:39:50:352 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,145:82].[@-1,66:66='e',<0>,145:87]
2023-08-29 21:39:50:353 action-translator LogManager.java:25 translate $tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-08-29 21:39:50:353 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,146:19]
2023-08-29 21:39:50:353 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,146:52].[@-1,43:46='line',<0>,146:61]
2023-08-29 21:39:50:353 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,146:68].[@-1,59:61='pos',<0>,146:77]
2023-08-29 21:39:50:353 action-translator LogManager.java:25 translate $tran = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-08-29 21:39:50:353 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,147:16]
2023-08-29 21:39:50:353 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,147:46].[@-1,37:40='line',<0>,147:52]
2023-08-29 21:39:50:353 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,147:59].[@-1,50:52='pos',<0>,147:65]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 translate $decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l)
2023-08-29 21:39:50:355 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,151:87]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,151:129].[@-1,47:50='line',<0>,151:133]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,151:140].[@-1,58:60='pos',<0>,151:144]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,151:150].[@-1,67:70='text',<0>,151:153]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,151:160].[@-1,79:79='t',<0>,151:165]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,83:92='listParams',<0>,151:169].[@-1,94:94='l',<0>,151:180]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 translate $decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil)
2023-08-29 21:39:50:355 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,152:76]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,152:118].[@-1,47:50='line',<0>,152:122]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,152:129].[@-1,58:60='pos',<0>,152:133]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,152:139].[@-1,67:70='text',<0>,152:142]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,152:149].[@-1,79:79='t',<0>,152:154]
2023-08-29 21:39:50:355 action-translator LogManager.java:25 translate $app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-08-29 21:39:50:355 action-translator LogManager.java:25 attr [@-1,1:3='app',<0>,158:38]
2023-08-29 21:39:50:356 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,158:68].[@-1,34:37='line',<0>,158:71]
2023-08-29 21:39:50:356 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,158:78].[@-1,44:46='pos',<0>,158:81]
2023-08-29 21:39:50:356 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,158:87].[@-1,53:56='text',<0>,158:90]
2023-08-29 21:39:50:356 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,158:97].[@-1,65:65='e',<0>,158:102]
2023-08-29 21:39:50:356 action-translator LogManager.java:25 translate $removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-08-29 21:39:50:356 action-translator LogManager.java:25 attr [@-1,1:6='removl',<0>,162:37]
2023-08-29 21:39:50:356 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,162:74].[@-1,41:44='line',<0>,162:77]
2023-08-29 21:39:50:356 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,162:84].[@-1,51:53='pos',<0>,162:87]
2023-08-29 21:39:50:356 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,162:93].[@-1,60:63='text',<0>,162:96]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 translate $remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)
2023-08-29 21:39:50:357 action-translator LogManager.java:25 attr [@-1,1:5='remov',<0>,167:51]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,167:83].[@-1,36:39='line',<0>,167:86]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,167:93].[@-1,46:48='pos',<0>,167:96]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,167:102].[@-1,55:58='text',<0>,167:105]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,167:112].[@-1,67:67='e',<0>,167:117]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 translate $emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)
2023-08-29 21:39:50:357 action-translator LogManager.java:25 attr [@-1,1:8='emptyvec',<0>,171:20]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,171:59].[@-1,43:46='line',<0>,171:62]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,171:69].[@-1,53:55='pos',<0>,171:72]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,171:78].[@-1,62:65='text',<0>,171:81]
2023-08-29 21:39:50:357 action-translator LogManager.java:25 translate $count = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-08-29 21:39:50:358 action-translator LogManager.java:25 attr [@-1,1:5='count',<0>,175:18]
2023-08-29 21:39:50:358 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,175:48].[@-1,34:37='line',<0>,175:51]
2023-08-29 21:39:50:358 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,175:58].[@-1,44:46='pos',<0>,175:61]
2023-08-29 21:39:50:358 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,175:67].[@-1,53:56='text',<0>,175:70]
2023-08-29 21:39:50:359 action-translator LogManager.java:25 translate $accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)
2023-08-29 21:39:50:359 action-translator LogManager.java:25 attr [@-1,1:9='accessvec',<0>,179:35]
2023-08-29 21:39:50:359 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,179:76].[@-1,45:48='line',<0>,179:79]
2023-08-29 21:39:50:359 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,179:86].[@-1,55:57='pos',<0>,179:89]
2023-08-29 21:39:50:359 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,179:95].[@-1,64:67='text',<0>,179:98]
2023-08-29 21:39:50:359 action-translator LogManager.java:25 qattr [@-1,71:74='expr',<0>,179:105].[@-1,76:76='e',<0>,179:110]
2023-08-29 21:39:50:360 action-translator LogManager.java:25 translate $assignvec = instructions.NewAssignationVector($idprim.line, $idprim.pos, $idprim.text, $expprim.e, $expsegundo.e)
2023-08-29 21:39:50:360 action-translator LogManager.java:25 attr [@-1,1:9='assignvec',<0>,183:69]
2023-08-29 21:39:50:360 action-translator LogManager.java:25 qattr [@-1,48:53='idprim',<0>,183:116].[@-1,55:58='line',<0>,183:123]
2023-08-29 21:39:50:360 action-translator LogManager.java:25 qattr [@-1,62:67='idprim',<0>,183:130].[@-1,69:71='pos',<0>,183:137]
2023-08-29 21:39:50:360 action-translator LogManager.java:25 qattr [@-1,75:80='idprim',<0>,183:143].[@-1,82:85='text',<0>,183:150]
2023-08-29 21:39:50:360 action-translator LogManager.java:25 qattr [@-1,89:95='expprim',<0>,183:157].[@-1,97:97='e',<0>,183:165]
2023-08-29 21:39:50:360 action-translator LogManager.java:25 qattr [@-1,101:110='expsegundo',<0>,183:169].[@-1,112:112='e',<0>,183:180]
2023-08-29 21:39:50:361 action-translator LogManager.java:25 translate 
2023-08-29 21:39:50:362 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-29 21:39:50:362 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-29 21:39:50:362 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-29 21:39:50:362 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-29 21:39:50:363 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-29 21:39:50:363 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 21:39:50:363 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-29 21:39:50:363 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-29 21:39:50:363 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-29 21:39:50:363 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-29 21:39:50:364 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 21:39:50:366 action-translator LogManager.java:25 translate 
2023-08-29 21:39:50:366 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-08-29 21:39:50:366 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:74]
2023-08-29 21:39:50:366 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:104].[@-1,37:41='start',<0>,2:109]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:127].[@-1,60:64='start',<0>,2:132]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:152].[@-1,85:85='e',<0>,2:157]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:161].[@-1,92:95='text',<0>,2:164]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:171].[@-1,104:104='e',<0>,2:176]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)
2023-08-29 21:39:50:367 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:71]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,3:101].[@-1,37:41='start',<0>,3:106]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,3:124].[@-1,60:64='start',<0>,3:129]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,3:149].[@-1,85:85='e',<0>,3:154]
2023-08-29 21:39:50:367 action-translator LogManager.java:25 qattr [@-1,90:91='op',<0>,3:159].[@-1,93:96='text',<0>,3:162]
2023-08-29 21:39:50:368 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-29 21:39:50:368 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:82]
2023-08-29 21:39:50:368 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:87].[@-1,12:12='e',<0>,4:92]
2023-08-29 21:39:50:368 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-29 21:39:50:368 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-29 21:39:50:368 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-29 21:39:50:368 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-29 21:39:50:368 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-29 21:39:50:368 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-29 21:39:50:368 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-29 21:39:50:369 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-29 21:39:50:369 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-29 21:39:50:369 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-29 21:39:50:369 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-29 21:39:50:369 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-29 21:39:50:369 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-29 21:39:50:369 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-29 21:39:50:369 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-29 21:39:50:369 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-29 21:39:50:370 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:34]
2023-08-29 21:39:50:370 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,26:64].[@-1,37:40='line',<0>,26:69]
2023-08-29 21:39:50:370 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,26:76].[@-1,49:51='pos',<0>,26:81]
2023-08-29 21:39:50:370 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-29 21:39:50:370 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:35]
2023-08-29 21:39:50:370 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,27:65].[@-1,38:41='line',<0>,27:71]
2023-08-29 21:39:50:370 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,27:78].[@-1,51:53='pos',<0>,27:84]
2023-08-29 21:39:50:370 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-08-29 21:39:50:370 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:33]
2023-08-29 21:39:50:370 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,28:63].[@-1,36:39='line',<0>,28:67]
2023-08-29 21:39:50:370 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,28:74].[@-1,47:49='pos',<0>,28:78]
2023-08-29 21:39:50:371 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-08-29 21:39:50:371 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,29:39]
2023-08-29 21:39:50:371 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,29:44].[@-1,17:22='access',<0>,29:55]
2023-08-29 21:39:50:371 action-translator LogManager.java:25 translate $e = $emptvecstmt.emptyvec
2023-08-29 21:39:50:371 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,30:40]
2023-08-29 21:39:50:371 action-translator LogManager.java:25 qattr [@-1,6:16='emptvecstmt',<0>,30:45].[@-1,18:25='emptyvec',<0>,30:57]
2023-08-29 21:39:50:371 action-translator LogManager.java:25 translate $e = $countvecstmt.count
2023-08-29 21:39:50:371 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,31:41]
2023-08-29 21:39:50:372 action-translator LogManager.java:25 qattr [@-1,6:17='countvecstmt',<0>,31:46].[@-1,19:23='count',<0>,31:59]
2023-08-29 21:39:50:372 action-translator LogManager.java:25 translate $e = $accessvecstmt.accessvec
2023-08-29 21:39:50:372 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,32:42]
2023-08-29 21:39:50:372 action-translator LogManager.java:25 qattr [@-1,6:18='accessvecstmt',<0>,32:47].[@-1,20:28='accessvec',<0>,32:61]
2023-08-29 21:39:50:372 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-29 21:39:50:372 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 21:39:50:372 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:139]
2023-08-29 21:39:50:372 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:169].[@-1,37:41='start',<0>,35:174]
2023-08-29 21:39:50:373 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:192].[@-1,60:64='start',<0>,35:197]
2023-08-29 21:39:50:373 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:217].[@-1,85:85='e',<0>,35:222]
2023-08-29 21:39:50:373 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:226].[@-1,92:95='text',<0>,35:229]
2023-08-29 21:39:50:373 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:236].[@-1,105:105='e',<0>,35:242]
2023-08-29 21:39:50:373 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-29 21:39:50:373 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 21:39:50:374 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:177]
2023-08-29 21:39:50:374 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:207].[@-1,37:41='start',<0>,36:212]
2023-08-29 21:39:50:374 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:230].[@-1,60:64='start',<0>,36:235]
2023-08-29 21:39:50:374 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:255].[@-1,85:85='e',<0>,36:260]
2023-08-29 21:39:50:374 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:264].[@-1,92:95='text',<0>,36:267]
2023-08-29 21:39:50:374 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:274].[@-1,105:105='e',<0>,36:280]
2023-08-29 21:39:50:374 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-29 21:39:50:376 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 21:39:50:376 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:157]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:187].[@-1,37:41='start',<0>,37:192]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:210].[@-1,60:64='start',<0>,37:215]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:235].[@-1,85:85='e',<0>,37:240]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:244].[@-1,92:95='text',<0>,37:247]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:254].[@-1,105:105='e',<0>,37:260]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-29 21:39:50:376 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 21:39:50:376 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:157]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:187].[@-1,37:41='start',<0>,38:192]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:210].[@-1,60:64='start',<0>,38:215]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:235].[@-1,85:85='e',<0>,38:240]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:244].[@-1,92:95='text',<0>,38:247]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:254].[@-1,105:105='e',<0>,38:260]
2023-08-29 21:39:50:376 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-29 21:39:50:376 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 21:39:50:377 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:154]
2023-08-29 21:39:50:377 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:184].[@-1,37:41='start',<0>,39:189]
2023-08-29 21:39:50:377 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:207].[@-1,60:64='start',<0>,39:212]
2023-08-29 21:39:50:377 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:232].[@-1,85:85='e',<0>,39:237]
2023-08-29 21:39:50:377 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:241].[@-1,92:95='text',<0>,39:244]
2023-08-29 21:39:50:377 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:251].[@-1,105:105='e',<0>,39:257]
2023-08-29 21:39:50:377 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-29 21:39:50:378 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 21:39:50:378 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:129]
2023-08-29 21:39:50:378 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:159].[@-1,37:41='start',<0>,40:164]
2023-08-29 21:39:50:378 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:182].[@-1,60:64='start',<0>,40:187]
2023-08-29 21:39:50:379 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:207].[@-1,85:85='e',<0>,40:212]
2023-08-29 21:39:50:379 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:216].[@-1,92:95='text',<0>,40:219]
2023-08-29 21:39:50:379 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:226].[@-1,105:105='e',<0>,40:232]
2023-08-29 21:39:50:379 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-29 21:39:50:381 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 21:39:50:381 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:128]
2023-08-29 21:39:50:382 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:158].[@-1,37:41='start',<0>,41:163]
2023-08-29 21:39:50:382 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:181].[@-1,60:64='start',<0>,41:186]
2023-08-29 21:39:50:382 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:206].[@-1,85:85='e',<0>,41:211]
2023-08-29 21:39:50:382 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:215].[@-1,92:95='text',<0>,41:218]
2023-08-29 21:39:50:382 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:225].[@-1,105:105='e',<0>,41:231]
2023-08-29 21:39:50:382 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-29 21:39:50:382 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-29 21:39:50:382 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-29 21:39:50:382 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-29 21:39:50:382 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-29 21:39:50:382 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-29 21:39:50:382 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-29 21:39:50:382 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-08-29 21:39:50:382 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,246:9]
2023-08-29 21:39:50:382 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,246:41].[@-1,36:39='line',<0>,246:44]
2023-08-29 21:39:50:383 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,246:51].[@-1,46:48='pos',<0>,246:54]
2023-08-29 21:39:50:383 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,246:60].[@-1,55:58='text',<0>,246:63]
2023-08-29 21:39:50:383 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)
2023-08-29 21:39:50:383 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,250:18]
2023-08-29 21:39:50:383 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,250:71].[@-1,57:60='line',<0>,250:74]
2023-08-29 21:39:50:383 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,250:81].[@-1,67:69='pos',<0>,250:84]
2023-08-29 21:39:50:384 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,250:90].[@-1,76:79='text',<0>,250:93]
2023-08-29 21:39:50:384 action-translator LogManager.java:25 qattr [@-1,83:88='IG_ADD',<0>,250:100].[@-1,90:93='text',<0>,250:107]
2023-08-29 21:39:50:384 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,250:114].[@-1,102:102='e',<0>,250:119]
2023-08-29 21:39:50:384 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)
2023-08-29 21:39:50:384 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,251:18]
2023-08-29 21:39:50:384 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,251:71].[@-1,57:60='line',<0>,251:74]
2023-08-29 21:39:50:384 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,251:81].[@-1,67:69='pos',<0>,251:84]
2023-08-29 21:39:50:384 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,251:90].[@-1,76:79='text',<0>,251:93]
2023-08-29 21:39:50:385 action-translator LogManager.java:25 qattr [@-1,83:88='IG_SUB',<0>,251:100].[@-1,90:93='text',<0>,251:107]
2023-08-29 21:39:50:385 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,251:114].[@-1,102:102='e',<0>,251:119]
2023-08-29 21:39:50:385 action-translator LogManager.java:25 translate $t = environment.STRING
2023-08-29 21:39:50:385 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,256:13]
2023-08-29 21:39:50:385 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-08-29 21:39:50:385 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,257:10]
2023-08-29 21:39:50:385 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-08-29 21:39:50:385 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,258:12]
2023-08-29 21:39:50:385 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-08-29 21:39:50:385 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,259:17]
2023-08-29 21:39:50:385 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-08-29 21:39:50:385 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,260:19]
2023-08-29 21:39:50:638 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-29 21:39:50:638 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-29 21:39:50:712 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-29 21:39:50:712 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

