2023-08-28 06:46:56:381 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-28 06:46:56:402 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-28 06:46:57:176 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (BLOCK (ALT CONTINUE) (ALT RETURN) (ALT BREAK))) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE PTCOMA {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK PTCOMA {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l)}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil)}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG ID))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-28 06:46:57:184 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE PTCOMA {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK PTCOMA {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l)}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil)}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG ID))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-28 06:46:57:187 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr PTCOMA {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE PTCOMA {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK PTCOMA {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l)}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER {$decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil)}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG ID))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-28 06:46:57:187 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-28 06:46:57:214 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=739> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=731> expr<tokenIndex=733> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-28 06:46:57:225 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 739))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 731))) (expr (ELEMENT_OPTIONS (= tokenIndex 733))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-28 06:46:57:229 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=892>   left=expr<tokenIndex=896,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | op = SUB<tokenIndex=906>  left=expr<tokenIndex=910,p=8> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)} 
        | PARIZQ<tokenIndex=916> expr<tokenIndex=918> PARDER<tokenIndex=920> { $e = $expr.e } 
        | NUMBER<tokenIndex=926>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=932>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=938> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=944> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=950> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        | accessstmt<tokenIndex=956> {$e = $accessstmt.access} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MUL<tokenIndex=762>|DIV<tokenIndex=764>) right=expr<tokenIndex=769,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(ADD<tokenIndex=782>|SUB<tokenIndex=784>|PERCENT<tokenIndex=786>) right=expr<tokenIndex=791,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MAY_IG<tokenIndex=804>|MAYOR<tokenIndex=806>) right=expr<tokenIndex=811,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MEN_IG<tokenIndex=824>|MENOR<tokenIndex=826>) right=expr<tokenIndex=831,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(IG_IG<tokenIndex=844>|DIF<tokenIndex=846>) right=expr<tokenIndex=851,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=AND<tokenIndex=863> right=expr<tokenIndex=867,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=OR<tokenIndex=879> right=expr<tokenIndex=883,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-28 06:46:57:243 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 892)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 896) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 906)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 910) (= p 8)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 916))) (expr (ELEMENT_OPTIONS (= tokenIndex 918))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 920))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 926))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 932))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 938))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 944))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 950))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 956))) {$e = $accessstmt.access})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 762))) (DIV (ELEMENT_OPTIONS (= tokenIndex 764))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 769) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 782))) (SUB (ELEMENT_OPTIONS (= tokenIndex 784))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 786))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 791) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 804))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 806))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 811) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 824))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 826))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 831) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 844))) (DIF (ELEMENT_OPTIONS (= tokenIndex 846))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 851) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 863)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 867) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 879)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 883) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-28 06:46:57:253 grammar LogManager.java:25 import STRINGS=1
2023-08-28 06:46:57:253 grammar LogManager.java:25 import INTS=2
2023-08-28 06:46:57:254 grammar LogManager.java:25 import FLOATS=3
2023-08-28 06:46:57:254 grammar LogManager.java:25 import BOOLS=4
2023-08-28 06:46:57:254 grammar LogManager.java:25 import CHARACTERS=5
2023-08-28 06:46:57:254 grammar LogManager.java:25 import VAR=6
2023-08-28 06:46:57:254 grammar LogManager.java:25 import NIL=7
2023-08-28 06:46:57:255 grammar LogManager.java:25 import TRUE=8
2023-08-28 06:46:57:256 grammar LogManager.java:25 import FALSE=9
2023-08-28 06:46:57:257 grammar LogManager.java:25 import PRINT=10
2023-08-28 06:46:57:257 grammar LogManager.java:25 import IF=11
2023-08-28 06:46:57:258 grammar LogManager.java:25 import ELSE=12
2023-08-28 06:46:57:258 grammar LogManager.java:25 import WHILE=13
2023-08-28 06:46:57:258 grammar LogManager.java:25 import LET=14
2023-08-28 06:46:57:258 grammar LogManager.java:25 import FOR=15
2023-08-28 06:46:57:258 grammar LogManager.java:25 import IN=16
2023-08-28 06:46:57:258 grammar LogManager.java:25 import SWITCH=17
2023-08-28 06:46:57:258 grammar LogManager.java:25 import CASE=18
2023-08-28 06:46:57:258 grammar LogManager.java:25 import DEFAULT=19
2023-08-28 06:46:57:258 grammar LogManager.java:25 import GUARD=20
2023-08-28 06:46:57:258 grammar LogManager.java:25 import CONTINUE=21
2023-08-28 06:46:57:258 grammar LogManager.java:25 import RETURN=22
2023-08-28 06:46:57:258 grammar LogManager.java:25 import BREAK=23
2023-08-28 06:46:57:258 grammar LogManager.java:25 import NUMBER=24
2023-08-28 06:46:57:258 grammar LogManager.java:25 import STRING=25
2023-08-28 06:46:57:258 grammar LogManager.java:25 import ID=26
2023-08-28 06:46:57:258 grammar LogManager.java:25 import DIF=27
2023-08-28 06:46:57:258 grammar LogManager.java:25 import IG_IG=28
2023-08-28 06:46:57:258 grammar LogManager.java:25 import NOT=29
2023-08-28 06:46:57:258 grammar LogManager.java:25 import OR=30
2023-08-28 06:46:57:258 grammar LogManager.java:25 import AND=31
2023-08-28 06:46:57:259 grammar LogManager.java:25 import IG=32
2023-08-28 06:46:57:259 grammar LogManager.java:25 import IG_ADD=33
2023-08-28 06:46:57:259 grammar LogManager.java:25 import IG_SUB=34
2023-08-28 06:46:57:259 grammar LogManager.java:25 import MAY_IG=35
2023-08-28 06:46:57:259 grammar LogManager.java:25 import MEN_IG=36
2023-08-28 06:46:57:259 grammar LogManager.java:25 import MAYOR=37
2023-08-28 06:46:57:259 grammar LogManager.java:25 import MENOR=38
2023-08-28 06:46:57:259 grammar LogManager.java:25 import MUL=39
2023-08-28 06:46:57:259 grammar LogManager.java:25 import DIV=40
2023-08-28 06:46:57:259 grammar LogManager.java:25 import ADD=41
2023-08-28 06:46:57:259 grammar LogManager.java:25 import SUB=42
2023-08-28 06:46:57:259 grammar LogManager.java:25 import PERCENT=43
2023-08-28 06:46:57:259 grammar LogManager.java:25 import PARIZQ=44
2023-08-28 06:46:57:259 grammar LogManager.java:25 import PARDER=45
2023-08-28 06:46:57:259 grammar LogManager.java:25 import LLAVEIZQ=46
2023-08-28 06:46:57:260 grammar LogManager.java:25 import LLAVEDER=47
2023-08-28 06:46:57:260 grammar LogManager.java:25 import DOUBLEPTS=48
2023-08-28 06:46:57:260 grammar LogManager.java:25 import QUESTION=49
2023-08-28 06:46:57:260 grammar LogManager.java:25 import POINT=50
2023-08-28 06:46:57:260 grammar LogManager.java:25 import COMA=51
2023-08-28 06:46:57:260 grammar LogManager.java:25 import PTCOMA=52
2023-08-28 06:46:57:260 grammar LogManager.java:25 import CORCHETEIZQ=53
2023-08-28 06:46:57:260 grammar LogManager.java:25 import CORCHETEDER=54
2023-08-28 06:46:57:261 grammar LogManager.java:25 import WHITESPACE=55
2023-08-28 06:46:57:261 grammar LogManager.java:25 import COMMENT=56
2023-08-28 06:46:57:261 grammar LogManager.java:25 import LINE_COMMENT=57
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'String'=1
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'Int'=2
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'Float'=3
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'Bool'=4
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'Character'=5
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'var'=6
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'nil'=7
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'true'=8
2023-08-28 06:46:57:261 grammar LogManager.java:25 import 'false'=9
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'print'=10
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'if'=11
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'else'=12
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'while'=13
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'let'=14
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'for'=15
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'in'=16
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'switch'=17
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'case'=18
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'default'=19
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'guard'=20
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'continue'=21
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'return'=22
2023-08-28 06:46:57:262 grammar LogManager.java:25 import 'break'=23
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '!='=27
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '=='=28
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '!'=29
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '||'=30
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '&&'=31
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '='=32
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '+='=33
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '-='=34
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '>='=35
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '<='=36
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '>'=37
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '<'=38
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '*'=39
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '/'=40
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '+'=41
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '-'=42
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '%'=43
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '('=44
2023-08-28 06:46:57:263 grammar LogManager.java:25 import ')'=45
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '{'=46
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '}'=47
2023-08-28 06:46:57:263 grammar LogManager.java:25 import ':'=48
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '?'=49
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '.'=50
2023-08-28 06:46:57:263 grammar LogManager.java:25 import ','=51
2023-08-28 06:46:57:263 grammar LogManager.java:25 import ';'=52
2023-08-28 06:46:57:263 grammar LogManager.java:25 import '['=53
2023-08-28 06:46:57:264 grammar LogManager.java:25 import ']'=54
2023-08-28 06:46:57:264 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, NUMBER=24, STRING=25, ID=26, DIF=27, IG_IG=28, NOT=29, OR=30, AND=31, IG=32, IG_ADD=33, IG_SUB=34, MAY_IG=35, MEN_IG=36, MAYOR=37, MENOR=38, MUL=39, DIV=40, ADD=41, SUB=42, PERCENT=43, PARIZQ=44, PARDER=45, LLAVEIZQ=46, LLAVEDER=47, DOUBLEPTS=48, QUESTION=49, POINT=50, COMA=51, PTCOMA=52, CORCHETEIZQ=53, CORCHETEDER=54, WHITESPACE=55, COMMENT=56, LINE_COMMENT=57, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, '!='=27, '=='=28, '!'=29, '||'=30, '&&'=31, '='=32, '+='=33, '-='=34, '>='=35, '<='=36, '>'=37, '<'=38, '*'=39, '/'=40, '+'=41, '-'=42, '%'=43, '('=44, ')'=45, '{'=46, '}'=47, ':'=48, '?'=49, '.'=50, ','=51, ';'=52, '['=53, ']'=54}
2023-08-28 06:46:57:264 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, NUMBER=24, STRING=25, ID=26, DIF=27, IG_IG=28, NOT=29, OR=30, AND=31, IG=32, IG_ADD=33, IG_SUB=34, MAY_IG=35, MEN_IG=36, MAYOR=37, MENOR=38, MUL=39, DIV=40, ADD=41, SUB=42, PERCENT=43, PARIZQ=44, PARDER=45, LLAVEIZQ=46, LLAVEDER=47, DOUBLEPTS=48, QUESTION=49, POINT=50, COMA=51, PTCOMA=52, CORCHETEIZQ=53, CORCHETEDER=54, WHITESPACE=55, COMMENT=56, LINE_COMMENT=57}
2023-08-28 06:46:57:264 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, '!='=27, '=='=28, '!'=29, '||'=30, '&&'=31, '='=32, '+='=33, '-='=34, '>='=35, '<='=36, '>'=37, '<'=38, '*'=39, '/'=40, '+'=41, '-'=42, '%'=43, '('=44, ')'=45, '{'=46, '}'=47, ':'=48, '?'=49, '.'=50, ','=51, ';'=52, '['=53, ']'=54}
2023-08-28 06:46:57:301 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-28 06:46:57:302 LL1 LogManager.java:25 look=[{6, 10..11, 13..15, 17, 20..23, 26}, {<EOF>, 18..19, 21..23, 47}]
2023-08-28 06:46:57:302 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:302 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-28 06:46:57:303 LL1 LogManager.java:25 look=[10, 6, 14, 26, 26, 11, 13, 15, 17, 20, {21..23}, 6]
2023-08-28 06:46:57:303 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:303 LL1 LogManager.java:25 
DECISION 2 in rule declarestmt
2023-08-28 06:46:57:303 LL1 LogManager.java:25 look=[6, 6, 6]
2023-08-28 06:46:57:303 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:303 LL1 LogManager.java:25 
DECISION 3 in rule constantstmt
2023-08-28 06:46:57:303 LL1 LogManager.java:25 look=[14, 14]
2023-08-28 06:46:57:303 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:303 LL1 LogManager.java:25 
DECISION 4 in rule blockelifs
2023-08-28 06:46:57:303 LL1 LogManager.java:25 look=[11, {<EOF>, 6, 10..11, 13..15, 17..23, 26, 47}]
2023-08-28 06:46:57:303 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:303 LL1 LogManager.java:25 
DECISION 5 in rule ifstmt
2023-08-28 06:46:57:303 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-28 06:46:57:303 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:303 LL1 LogManager.java:25 
DECISION 6 in rule switchstmt
2023-08-28 06:46:57:303 LL1 LogManager.java:25 look=[17, 17]
2023-08-28 06:46:57:303 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:303 LL1 LogManager.java:25 
DECISION 7 in rule casestmt
2023-08-28 06:46:57:303 LL1 LogManager.java:25 look=[18, 18]
2023-08-28 06:46:57:303 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:303 LL1 LogManager.java:25 
DECISION 8 in rule blockcases
2023-08-28 06:46:57:304 LL1 LogManager.java:25 look=[18, {18, 47}]
2023-08-28 06:46:57:304 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:304 LL1 LogManager.java:25 
DECISION 9 in rule forstmt
2023-08-28 06:46:57:304 LL1 LogManager.java:25 look=[15, 15]
2023-08-28 06:46:57:304 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:304 LL1 LogManager.java:25 
DECISION 10 in rule transferstmt
2023-08-28 06:46:57:304 LL1 LogManager.java:25 look=[22, 22, 21, 23]
2023-08-28 06:46:57:304 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:304 LL1 LogManager.java:25 
DECISION 11 in rule declarevectorstmt
2023-08-28 06:46:57:304 LL1 LogManager.java:25 look=[6, 6, 6, 6]
2023-08-28 06:46:57:304 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:304 LL1 LogManager.java:25 
DECISION 12 in rule listParams
2023-08-28 06:46:57:304 LL1 LogManager.java:25 look=[null, 54]
2023-08-28 06:46:57:304 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:304 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-08-28 06:46:57:304 LL1 LogManager.java:25 look=[29, 42, 44, 24, 25, 8, 9, 7, 26]
2023-08-28 06:46:57:304 LL1 LogManager.java:25 LL(1)? true
2023-08-28 06:46:57:304 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-08-28 06:46:57:304 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-28 06:46:57:304 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:304 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-08-28 06:46:57:305 LL1 LogManager.java:25 look=[null, null]
2023-08-28 06:46:57:305 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:305 LL1 LogManager.java:25 
DECISION 16 in rule increaseanddecreasestmt
2023-08-28 06:46:57:305 LL1 LogManager.java:25 look=[26, 26]
2023-08-28 06:46:57:305 LL1 LogManager.java:25 LL(1)? false
2023-08-28 06:46:57:305 LL1 LogManager.java:25 
DECISION 17 in rule type
2023-08-28 06:46:57:305 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-08-28 06:46:57:305 LL1 LogManager.java:25 LL(1)? true
2023-08-28 06:46:57:311 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-28 06:46:57:323 action-translator LogManager.java:25 translate $code = $block.blk
2023-08-28 06:46:57:324 action-translator LogManager.java:25 attr [@-1,1:4='code',<0>,18:13]
2023-08-28 06:46:57:325 action-translator LogManager.java:25 qattr [@-1,9:13='block',<0>,18:21].[@-1,15:17='blk',<0>,18:27]
2023-08-28 06:46:57:325 action-translator LogManager.java:25 translate 
$blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-28 06:46:57:325 action-translator LogManager.java:25 attr [@-1,3:5='blk',<0>,23:1]
2023-08-28 06:46:57:327 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    
2023-08-28 06:46:57:327 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,30:13]
2023-08-28 06:46:57:327 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,30:27]
2023-08-28 06:46:57:328 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-28 06:46:57:328 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,37:14]
2023-08-28 06:46:57:329 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,37:22].[@-1,20:23='prnt',<0>,37:32]
2023-08-28 06:46:57:329 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-08-28 06:46:57:329 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,38:15]
2023-08-28 06:46:57:329 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,38:23].[@-1,21:23='dec',<0>,38:35]
2023-08-28 06:46:57:329 action-translator LogManager.java:25 translate $inst = $constantstmt.const
2023-08-28 06:46:57:329 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,39:16]
2023-08-28 06:46:57:329 action-translator LogManager.java:25 qattr [@-1,9:20='constantstmt',<0>,39:24].[@-1,22:26='const',<0>,39:37]
2023-08-28 06:46:57:330 action-translator LogManager.java:25 translate $inst = $assignationstmt.assign
2023-08-28 06:46:57:330 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:19]
2023-08-28 06:46:57:330 action-translator LogManager.java:25 qattr [@-1,9:23='assignationstmt',<0>,40:27].[@-1,25:30='assign',<0>,40:43]
2023-08-28 06:46:57:330 action-translator LogManager.java:25 translate $inst = $increaseanddecreasestmt.increasedecrease
2023-08-28 06:46:57:330 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,41:27]
2023-08-28 06:46:57:330 action-translator LogManager.java:25 qattr [@-1,9:31='increaseanddecreasestmt',<0>,41:35].[@-1,33:48='increasedecrease',<0>,41:59]
2023-08-28 06:46:57:330 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-08-28 06:46:57:330 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:11]
2023-08-28 06:46:57:330 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,42:19].[@-1,17:19='ift',<0>,42:26]
2023-08-28 06:46:57:331 action-translator LogManager.java:25 translate $inst = $whilestmt.while
2023-08-28 06:46:57:331 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,43:13]
2023-08-28 06:46:57:331 action-translator LogManager.java:25 qattr [@-1,9:17='whilestmt',<0>,43:21].[@-1,19:23='while',<0>,43:31]
2023-08-28 06:46:57:331 action-translator LogManager.java:25 translate $inst = $forstmt.for
2023-08-28 06:46:57:331 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,44:11]
2023-08-28 06:46:57:331 action-translator LogManager.java:25 qattr [@-1,9:15='forstmt',<0>,44:19].[@-1,17:19='for',<0>,44:27]
2023-08-28 06:46:57:331 action-translator LogManager.java:25 translate $inst = $switchstmt.switch
2023-08-28 06:46:57:331 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:14]
2023-08-28 06:46:57:331 action-translator LogManager.java:25 qattr [@-1,9:18='switchstmt',<0>,45:22].[@-1,20:25='switch',<0>,45:33]
2023-08-28 06:46:57:331 action-translator LogManager.java:25 translate $inst = $guardstmt.gua
2023-08-28 06:46:57:331 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:13]
2023-08-28 06:46:57:332 action-translator LogManager.java:25 qattr [@-1,9:17='guardstmt',<0>,46:21].[@-1,19:21='gua',<0>,46:31]
2023-08-28 06:46:57:332 action-translator LogManager.java:25 translate $inst = $transferstmt.tran
2023-08-28 06:46:57:332 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:16]
2023-08-28 06:46:57:332 action-translator LogManager.java:25 qattr [@-1,9:20='transferstmt',<0>,47:24].[@-1,22:25='tran',<0>,47:37]
2023-08-28 06:46:57:332 action-translator LogManager.java:25 translate $inst = $declarevectorstmt.decvec
2023-08-28 06:46:57:332 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:21]
2023-08-28 06:46:57:332 action-translator LogManager.java:25 qattr [@-1,9:25='declarevectorstmt',<0>,48:29].[@-1,27:32='decvec',<0>,48:47]
2023-08-28 06:46:57:333 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)
2023-08-28 06:46:57:333 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,52:29]
2023-08-28 06:46:57:333 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,52:59].[@-1,38:41='line',<0>,52:65]
2023-08-28 06:46:57:333 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,52:72].[@-1,51:53='pos',<0>,52:78]
2023-08-28 06:46:57:334 action-translator LogManager.java:25 qattr [@-1,57:60='expr',<0>,52:84].[@-1,62:62='e',<0>,52:89]
2023-08-28 06:46:57:335 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-08-28 06:46:57:335 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,57:33]
2023-08-28 06:46:57:335 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,57:66].[@-1,38:41='line',<0>,57:70]
2023-08-28 06:46:57:335 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,57:77].[@-1,49:51='pos',<0>,57:81]
2023-08-28 06:46:57:336 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,57:87].[@-1,58:61='text',<0>,57:90]
2023-08-28 06:46:57:336 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,57:97].[@-1,70:70='t',<0>,57:102]
2023-08-28 06:46:57:336 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,57:106].[@-1,79:79='e',<0>,57:111]
2023-08-28 06:46:57:337 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-08-28 06:46:57:337 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,58:18]
2023-08-28 06:46:57:337 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,58:51].[@-1,38:41='line',<0>,58:55]
2023-08-28 06:46:57:337 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,58:62].[@-1,49:51='pos',<0>,58:66]
2023-08-28 06:46:57:337 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,58:72].[@-1,58:61='text',<0>,58:75]
2023-08-28 06:46:57:338 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,58:100].[@-1,88:88='e',<0>,58:105]
2023-08-28 06:46:57:338 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)
2023-08-28 06:46:57:338 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,59:34]
2023-08-28 06:46:57:338 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,59:67].[@-1,38:41='line',<0>,59:71]
2023-08-28 06:46:57:338 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,59:78].[@-1,49:51='pos',<0>,59:82]
2023-08-28 06:46:57:339 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,59:88].[@-1,58:61='text',<0>,59:91]
2023-08-28 06:46:57:339 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,59:98].[@-1,70:70='t',<0>,59:103]
2023-08-28 06:46:57:340 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)
2023-08-28 06:46:57:340 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,63:33]
2023-08-28 06:46:57:340 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,63:68].[@-1,40:43='line',<0>,63:72]
2023-08-28 06:46:57:341 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,63:79].[@-1,51:53='pos',<0>,63:83]
2023-08-28 06:46:57:341 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,63:89].[@-1,60:63='text',<0>,63:92]
2023-08-28 06:46:57:341 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,63:99].[@-1,72:72='t',<0>,63:104]
2023-08-28 06:46:57:341 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,63:108].[@-1,81:81='e',<0>,63:113]
2023-08-28 06:46:57:342 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-08-28 06:46:57:342 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,64:18]
2023-08-28 06:46:57:342 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,64:53].[@-1,40:43='line',<0>,64:57]
2023-08-28 06:46:57:342 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,64:64].[@-1,51:53='pos',<0>,64:68]
2023-08-28 06:46:57:343 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,64:74].[@-1,60:63='text',<0>,64:77]
2023-08-28 06:46:57:343 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,64:102].[@-1,90:90='e',<0>,64:107]
2023-08-28 06:46:57:344 action-translator LogManager.java:25 translate 
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  
2023-08-28 06:46:57:344 action-translator LogManager.java:25 attr [@-1,3:7='blkef',<0>,71:1]
2023-08-28 06:46:57:344 action-translator LogManager.java:25 translate    
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    
2023-08-28 06:46:57:344 action-translator LogManager.java:25 attr [@-1,114:118='blkef',<0>,80:13]
2023-08-28 06:46:57:344 action-translator LogManager.java:25 attr [@-1,130:134='blkef',<0>,80:29]
2023-08-28 06:46:57:347 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk
2023-08-28 06:46:57:347 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,87:41] [@-1,7:68=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)',<0>,87:46]
2023-08-28 06:46:57:347 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)
2023-08-28 06:46:57:348 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,87:60].[@-1,24:27='line',<0>,87:63]
2023-08-28 06:46:57:348 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,87:70].[@-1,34:36='pos',<0>,87:73]
2023-08-28 06:46:57:348 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,87:79].[@-1,45:45='e',<0>,87:84]
2023-08-28 06:46:57:348 action-translator LogManager.java:25 qattr [@-1,49:51='ifb',<0>,87:88].[@-1,53:55='blk',<0>,87:92]
2023-08-28 06:46:57:348 action-translator LogManager.java:25 attr [@-1,114:115='el',<0>,88:41]
2023-08-28 06:46:57:348 action-translator LogManager.java:25 qattr [@-1,120:122='ifb',<0>,88:47].[@-1,124:126='blk',<0>,88:51]
2023-08-28 06:46:57:349 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        
2023-08-28 06:46:57:349 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,89:88] [@-1,7:87=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)',<0>,89:93]
2023-08-28 06:46:57:349 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)
2023-08-28 06:46:57:349 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,89:107].[@-1,24:27='line',<0>,89:110]
2023-08-28 06:46:57:349 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,89:117].[@-1,34:36='pos',<0>,89:120]
2023-08-28 06:46:57:349 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,89:126].[@-1,45:45='e',<0>,89:131]
2023-08-28 06:46:57:349 action-translator LogManager.java:25 qattr [@-1,49:58='ifelseblck',<0>,89:135].[@-1,60:62='blk',<0>,89:146]
2023-08-28 06:46:57:349 action-translator LogManager.java:25 qattr [@-1,66:75='elseifblck',<0>,89:152].[@-1,77:79='blk',<0>,89:163]
2023-08-28 06:46:57:349 action-translator LogManager.java:25 setAttr [@-1,181:182='el',<0>,90:89] [@-1,185:200=' $ifelseblck.blk',<0>,90:93]
2023-08-28 06:46:57:349 action-translator LogManager.java:25 translate  $ifelseblck.blk
2023-08-28 06:46:57:349 action-translator LogManager.java:25 qattr [@-1,2:11='ifelseblck',<0>,89:88].[@-1,13:15='blk',<0>,89:99]
2023-08-28 06:46:57:350 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); 
2023-08-28 06:46:57:350 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,93:59] [@-1,7:83=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)',<0>,93:64]
2023-08-28 06:46:57:350 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)
2023-08-28 06:46:57:350 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,93:78].[@-1,24:27='line',<0>,93:81]
2023-08-28 06:46:57:350 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,93:88].[@-1,34:36='pos',<0>,93:91]
2023-08-28 06:46:57:350 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,93:97].[@-1,45:45='e',<0>,93:102]
2023-08-28 06:46:57:350 action-translator LogManager.java:25 qattr [@-1,49:52='elif',<0>,93:106].[@-1,54:56='blk',<0>,93:111]
2023-08-28 06:46:57:350 action-translator LogManager.java:25 qattr [@-1,60:69='blockelifs',<0>,93:117].[@-1,71:75='blkef',<0>,93:128]
2023-08-28 06:46:57:352 action-translator LogManager.java:25 translate  $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);
2023-08-28 06:46:57:352 action-translator LogManager.java:25 setAttr [@-1,2:7='switch',<0>,97:58] [@-1,10:91=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)',<0>,97:66]
2023-08-28 06:46:57:352 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)
2023-08-28 06:46:57:352 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,97:81].[@-1,32:35='line',<0>,97:88]
2023-08-28 06:46:57:352 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,97:95].[@-1,46:48='pos',<0>,97:102]
2023-08-28 06:46:57:352 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,97:108].[@-1,57:57='e',<0>,97:113]
2023-08-28 06:46:57:352 action-translator LogManager.java:25 qattr [@-1,72:76='block',<0>,97:128].[@-1,78:80='blk',<0>,97:134]
2023-08-28 06:46:57:352 action-translator LogManager.java:25 translate $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);
2023-08-28 06:46:57:352 action-translator LogManager.java:25 setAttr [@-1,1:6='switch',<0>,98:44] [@-1,9:92=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)',<0>,98:52]
2023-08-28 06:46:57:352 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)
2023-08-28 06:46:57:354 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,98:68].[@-1,32:35='line',<0>,98:75]
2023-08-28 06:46:57:354 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,98:82].[@-1,46:48='pos',<0>,98:89]
2023-08-28 06:46:57:354 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,98:95].[@-1,57:57='e',<0>,98:100]
2023-08-28 06:46:57:354 action-translator LogManager.java:25 qattr [@-1,66:73='casestmt',<0>,98:109].[@-1,75:77='cas',<0>,98:118]
2023-08-28 06:46:57:356 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")
2023-08-28 06:46:57:356 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,101:41]
2023-08-28 06:46:57:356 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,101:69].[@-1,35:38='line',<0>,101:74]
2023-08-28 06:46:57:356 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,101:80].[@-1,46:48='pos',<0>,101:85]
2023-08-28 06:46:57:356 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,101:91].[@-1,57:57='e',<0>,101:96]
2023-08-28 06:46:57:357 action-translator LogManager.java:25 qattr [@-1,60:64='block',<0>,101:99].[@-1,66:68='blk',<0>,101:105]
2023-08-28 06:46:57:357 action-translator LogManager.java:25 qattr [@-1,72:81='blockcases',<0>,101:111].[@-1,83:89='blkcase',<0>,101:122]
2023-08-28 06:46:57:357 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)
2023-08-28 06:46:57:357 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,103:63]
2023-08-28 06:46:57:357 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,103:91].[@-1,35:38='line',<0>,103:96]
2023-08-28 06:46:57:357 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,103:102].[@-1,46:48='pos',<0>,103:107]
2023-08-28 06:46:57:357 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,103:113].[@-1,57:57='e',<0>,103:118]
2023-08-28 06:46:57:358 action-translator LogManager.java:25 qattr [@-1,60:62='sen',<0>,103:121].[@-1,64:66='blk',<0>,103:125]
2023-08-28 06:46:57:358 action-translator LogManager.java:25 qattr [@-1,70:72='def',<0>,103:131].[@-1,74:76='blk',<0>,103:135]
2023-08-28 06:46:57:358 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  
2023-08-28 06:46:57:358 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,107:5]
2023-08-28 06:46:57:358 action-translator LogManager.java:25 translate 
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    
2023-08-28 06:46:57:358 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,114:13]
2023-08-28 06:46:57:358 action-translator LogManager.java:25 attr [@-1,136:142='blkcase',<0>,114:31]
2023-08-28 06:46:57:359 action-translator LogManager.java:25 translate $assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)
2023-08-28 06:46:57:359 action-translator LogManager.java:25 attr [@-1,1:6='assign',<0>,122:14]
2023-08-28 06:46:57:359 action-translator LogManager.java:25 qattr [@-1,39:40='IG',<0>,122:52].[@-1,42:45='line',<0>,122:55]
2023-08-28 06:46:57:359 action-translator LogManager.java:25 qattr [@-1,49:50='IG',<0>,122:62].[@-1,52:54='pos',<0>,122:65]
2023-08-28 06:46:57:359 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,122:72].[@-1,62:65='text',<0>,122:75]
2023-08-28 06:46:57:359 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,122:82].[@-1,74:74='e',<0>,122:87]
2023-08-28 06:46:57:360 action-translator LogManager.java:25 translate $while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)
2023-08-28 06:46:57:360 action-translator LogManager.java:25 attr [@-1,1:5='while',<0>,126:38]
2023-08-28 06:46:57:360 action-translator LogManager.java:25 qattr [@-1,32:36='WHILE',<0>,126:69].[@-1,38:41='line',<0>,126:75]
2023-08-28 06:46:57:360 action-translator LogManager.java:25 qattr [@-1,45:49='WHILE',<0>,126:82].[@-1,51:53='pos',<0>,126:88]
2023-08-28 06:46:57:361 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,126:95].[@-1,63:63='e',<0>,126:100]
2023-08-28 06:46:57:361 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,126:104].[@-1,73:75='blk',<0>,126:110]
2023-08-28 06:46:57:361 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)
2023-08-28 06:46:57:362 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,130:43]
2023-08-28 06:46:57:362 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,130:70].[@-1,32:35='line',<0>,130:74]
2023-08-28 06:46:57:363 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,130:81].[@-1,43:45='pos',<0>,130:85]
2023-08-28 06:46:57:364 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,130:91].[@-1,52:55='text',<0>,130:94]
2023-08-28 06:46:57:364 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,130:101].[@-1,64:64='e',<0>,130:106]
2023-08-28 06:46:57:364 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,130:115].[@-1,79:81='blk',<0>,130:121]
2023-08-28 06:46:57:365 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)
2023-08-28 06:46:57:365 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,131:72]
2023-08-28 06:46:57:365 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,131:99].[@-1,32:35='line',<0>,131:103]
2023-08-28 06:46:57:365 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,131:110].[@-1,43:45='pos',<0>,131:114]
2023-08-28 06:46:57:365 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,131:120].[@-1,52:55='text',<0>,131:123]
2023-08-28 06:46:57:365 action-translator LogManager.java:25 qattr [@-1,59:63='first',<0>,131:130].[@-1,65:65='e',<0>,131:136]
2023-08-28 06:46:57:365 action-translator LogManager.java:25 qattr [@-1,69:74='second',<0>,131:140].[@-1,76:76='e',<0>,131:147]
2023-08-28 06:46:57:365 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,131:151].[@-1,86:88='blk',<0>,131:157]
2023-08-28 06:46:57:367 action-translator LogManager.java:25 translate $gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)
2023-08-28 06:46:57:367 action-translator LogManager.java:25 attr [@-1,1:3='gua',<0>,136:69]
2023-08-28 06:46:57:368 action-translator LogManager.java:25 qattr [@-1,30:34='GUARD',<0>,136:98].[@-1,36:39='line',<0>,136:104]
2023-08-28 06:46:57:368 action-translator LogManager.java:25 qattr [@-1,43:47='GUARD',<0>,136:111].[@-1,49:51='pos',<0>,136:117]
2023-08-28 06:46:57:368 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,136:123].[@-1,60:60='e',<0>,136:128]
2023-08-28 06:46:57:368 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,136:132].[@-1,70:72='blk',<0>,136:138]
2023-08-28 06:46:57:368 action-translator LogManager.java:25 qattr [@-1,76:76='r',<0>,136:144].[@-1,78:81='text',<0>,136:146]
2023-08-28 06:46:57:368 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)
2023-08-28 06:46:57:369 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,140:17]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,140:50].[@-1,41:44='line',<0>,140:57]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,140:64].[@-1,55:57='pos',<0>,140:71]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)
2023-08-28 06:46:57:369 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,141:22]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,141:55].[@-1,41:44='line',<0>,141:62]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,141:69].[@-1,55:57='pos',<0>,141:76]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,141:82].[@-1,66:66='e',<0>,141:87]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 translate $tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-08-28 06:46:57:369 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,142:19]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,142:52].[@-1,43:46='line',<0>,142:61]
2023-08-28 06:46:57:369 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,142:68].[@-1,59:61='pos',<0>,142:77]
2023-08-28 06:46:57:370 action-translator LogManager.java:25 translate $tran = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-08-28 06:46:57:370 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,143:16]
2023-08-28 06:46:57:370 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,143:46].[@-1,37:40='line',<0>,143:52]
2023-08-28 06:46:57:370 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,143:59].[@-1,50:52='pos',<0>,143:65]
2023-08-28 06:46:57:371 action-translator LogManager.java:25 translate $decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l)
2023-08-28 06:46:57:371 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,147:87]
2023-08-28 06:46:57:371 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,147:129].[@-1,47:50='line',<0>,147:133]
2023-08-28 06:46:57:371 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,147:140].[@-1,58:60='pos',<0>,147:144]
2023-08-28 06:46:57:371 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,147:150].[@-1,67:70='text',<0>,147:153]
2023-08-28 06:46:57:371 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,147:160].[@-1,79:79='t',<0>,147:165]
2023-08-28 06:46:57:371 action-translator LogManager.java:25 qattr [@-1,83:92='listParams',<0>,147:169].[@-1,94:94='l',<0>,147:180]
2023-08-28 06:46:57:372 action-translator LogManager.java:25 translate $decvec = instructions.NewToDecalreVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil)
2023-08-28 06:46:57:372 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,148:76]
2023-08-28 06:46:57:372 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,148:118].[@-1,47:50='line',<0>,148:122]
2023-08-28 06:46:57:372 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,148:129].[@-1,58:60='pos',<0>,148:133]
2023-08-28 06:46:57:372 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,148:139].[@-1,67:70='text',<0>,148:142]
2023-08-28 06:46:57:372 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,148:149].[@-1,79:79='t',<0>,148:154]
2023-08-28 06:46:57:373 action-translator LogManager.java:25 translate 
2023-08-28 06:46:57:373 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-28 06:46:57:373 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-28 06:46:57:373 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-28 06:46:57:373 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-28 06:46:57:373 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-28 06:46:57:374 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-28 06:46:57:375 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-28 06:46:57:375 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-28 06:46:57:375 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-28 06:46:57:375 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-28 06:46:57:376 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-28 06:46:57:378 action-translator LogManager.java:25 translate 
2023-08-28 06:46:57:378 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-08-28 06:46:57:378 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:71]
2023-08-28 06:46:57:378 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:101].[@-1,37:41='start',<0>,2:106]
2023-08-28 06:46:57:378 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:124].[@-1,60:64='start',<0>,2:129]
2023-08-28 06:46:57:378 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:149].[@-1,85:85='e',<0>,2:154]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:158].[@-1,92:95='text',<0>,2:161]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:168].[@-1,104:104='e',<0>,2:173]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)
2023-08-28 06:46:57:379 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:68]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,3:98].[@-1,37:41='start',<0>,3:103]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,3:121].[@-1,60:64='start',<0>,3:126]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,3:146].[@-1,85:85='e',<0>,3:151]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 qattr [@-1,90:91='op',<0>,3:156].[@-1,93:96='text',<0>,3:159]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-28 06:46:57:379 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-08-28 06:46:57:379 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-28 06:46:57:379 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-28 06:46:57:380 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-28 06:46:57:380 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-28 06:46:57:380 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-28 06:46:57:380 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-28 06:46:57:380 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-28 06:46:57:381 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-28 06:46:57:381 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-28 06:46:57:381 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-28 06:46:57:381 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-28 06:46:57:381 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-28 06:46:57:381 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-28 06:46:57:381 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-28 06:46:57:381 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-28 06:46:57:382 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-28 06:46:57:382 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:33]
2023-08-28 06:46:57:383 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,26:63].[@-1,37:40='line',<0>,26:68]
2023-08-28 06:46:57:383 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,26:75].[@-1,49:51='pos',<0>,26:80]
2023-08-28 06:46:57:383 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-28 06:46:57:383 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:34]
2023-08-28 06:46:57:383 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,27:64].[@-1,38:41='line',<0>,27:70]
2023-08-28 06:46:57:384 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,27:77].[@-1,51:53='pos',<0>,27:83]
2023-08-28 06:46:57:384 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-08-28 06:46:57:384 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:32]
2023-08-28 06:46:57:384 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,28:62].[@-1,36:39='line',<0>,28:66]
2023-08-28 06:46:57:384 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,28:73].[@-1,47:49='pos',<0>,28:77]
2023-08-28 06:46:57:384 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-08-28 06:46:57:384 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,29:38]
2023-08-28 06:46:57:384 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,29:43].[@-1,17:22='access',<0>,29:54]
2023-08-28 06:46:57:384 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-28 06:46:57:385 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 06:46:57:385 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:139]
2023-08-28 06:46:57:385 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:169].[@-1,37:41='start',<0>,32:174]
2023-08-28 06:46:57:385 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:192].[@-1,60:64='start',<0>,32:197]
2023-08-28 06:46:57:385 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:217].[@-1,85:85='e',<0>,32:222]
2023-08-28 06:46:57:385 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:226].[@-1,92:95='text',<0>,32:229]
2023-08-28 06:46:57:385 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:236].[@-1,105:105='e',<0>,32:242]
2023-08-28 06:46:57:386 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-28 06:46:57:386 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 06:46:57:386 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:173]
2023-08-28 06:46:57:386 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:203].[@-1,37:41='start',<0>,33:208]
2023-08-28 06:46:57:386 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:226].[@-1,60:64='start',<0>,33:231]
2023-08-28 06:46:57:386 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:251].[@-1,85:85='e',<0>,33:256]
2023-08-28 06:46:57:387 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:260].[@-1,92:95='text',<0>,33:263]
2023-08-28 06:46:57:387 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:270].[@-1,105:105='e',<0>,33:276]
2023-08-28 06:46:57:387 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-28 06:46:57:387 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 06:46:57:387 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:154]
2023-08-28 06:46:57:387 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:184].[@-1,37:41='start',<0>,34:189]
2023-08-28 06:46:57:387 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:207].[@-1,60:64='start',<0>,34:212]
2023-08-28 06:46:57:387 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:232].[@-1,85:85='e',<0>,34:237]
2023-08-28 06:46:57:387 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:241].[@-1,92:95='text',<0>,34:244]
2023-08-28 06:46:57:387 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:251].[@-1,105:105='e',<0>,34:257]
2023-08-28 06:46:57:388 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-28 06:46:57:388 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 06:46:57:388 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:154]
2023-08-28 06:46:57:388 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:184].[@-1,37:41='start',<0>,35:189]
2023-08-28 06:46:57:388 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:207].[@-1,60:64='start',<0>,35:212]
2023-08-28 06:46:57:388 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:232].[@-1,85:85='e',<0>,35:237]
2023-08-28 06:46:57:388 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:241].[@-1,92:95='text',<0>,35:244]
2023-08-28 06:46:57:388 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:251].[@-1,105:105='e',<0>,35:257]
2023-08-28 06:46:57:388 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-28 06:46:57:389 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 06:46:57:389 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:151]
2023-08-28 06:46:57:389 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:181].[@-1,37:41='start',<0>,36:186]
2023-08-28 06:46:57:389 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:204].[@-1,60:64='start',<0>,36:209]
2023-08-28 06:46:57:390 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:229].[@-1,85:85='e',<0>,36:234]
2023-08-28 06:46:57:390 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:238].[@-1,92:95='text',<0>,36:241]
2023-08-28 06:46:57:390 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:248].[@-1,105:105='e',<0>,36:254]
2023-08-28 06:46:57:390 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-28 06:46:57:390 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 06:46:57:391 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:127]
2023-08-28 06:46:57:391 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:157].[@-1,37:41='start',<0>,37:162]
2023-08-28 06:46:57:391 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:180].[@-1,60:64='start',<0>,37:185]
2023-08-28 06:46:57:392 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:205].[@-1,85:85='e',<0>,37:210]
2023-08-28 06:46:57:392 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:214].[@-1,92:95='text',<0>,37:217]
2023-08-28 06:46:57:392 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:224].[@-1,105:105='e',<0>,37:230]
2023-08-28 06:46:57:393 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-28 06:46:57:393 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 06:46:57:393 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:126]
2023-08-28 06:46:57:394 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:156].[@-1,37:41='start',<0>,38:161]
2023-08-28 06:46:57:394 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:179].[@-1,60:64='start',<0>,38:184]
2023-08-28 06:46:57:394 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:204].[@-1,85:85='e',<0>,38:209]
2023-08-28 06:46:57:394 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:213].[@-1,92:95='text',<0>,38:216]
2023-08-28 06:46:57:394 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:223].[@-1,105:105='e',<0>,38:229]
2023-08-28 06:46:57:394 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-28 06:46:57:394 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-28 06:46:57:394 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-28 06:46:57:394 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-28 06:46:57:394 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-28 06:46:57:394 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-28 06:46:57:394 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-28 06:46:57:395 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-08-28 06:46:57:395 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,206:9]
2023-08-28 06:46:57:395 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,206:41].[@-1,36:39='line',<0>,206:44]
2023-08-28 06:46:57:395 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,206:51].[@-1,46:48='pos',<0>,206:54]
2023-08-28 06:46:57:395 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,206:60].[@-1,55:58='text',<0>,206:63]
2023-08-28 06:46:57:396 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)
2023-08-28 06:46:57:396 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,210:18]
2023-08-28 06:46:57:396 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,210:71].[@-1,57:60='line',<0>,210:74]
2023-08-28 06:46:57:396 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,210:81].[@-1,67:69='pos',<0>,210:84]
2023-08-28 06:46:57:396 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,210:90].[@-1,76:79='text',<0>,210:93]
2023-08-28 06:46:57:396 action-translator LogManager.java:25 qattr [@-1,83:88='IG_ADD',<0>,210:100].[@-1,90:93='text',<0>,210:107]
2023-08-28 06:46:57:396 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,210:114].[@-1,102:102='e',<0>,210:119]
2023-08-28 06:46:57:397 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)
2023-08-28 06:46:57:397 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,211:18]
2023-08-28 06:46:57:397 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,211:71].[@-1,57:60='line',<0>,211:74]
2023-08-28 06:46:57:397 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,211:81].[@-1,67:69='pos',<0>,211:84]
2023-08-28 06:46:57:397 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,211:90].[@-1,76:79='text',<0>,211:93]
2023-08-28 06:46:57:397 action-translator LogManager.java:25 qattr [@-1,83:88='IG_SUB',<0>,211:100].[@-1,90:93='text',<0>,211:107]
2023-08-28 06:46:57:397 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,211:114].[@-1,102:102='e',<0>,211:119]
2023-08-28 06:46:57:398 action-translator LogManager.java:25 translate $t = environment.STRING
2023-08-28 06:46:57:398 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,216:13]
2023-08-28 06:46:57:398 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-08-28 06:46:57:398 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,217:10]
2023-08-28 06:46:57:398 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-08-28 06:46:57:398 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,218:12]
2023-08-28 06:46:57:398 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-08-28 06:46:57:398 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,219:17]
2023-08-28 06:46:57:399 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-08-28 06:46:57:399 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,220:19]
2023-08-28 06:46:57:754 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-28 06:46:57:755 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-28 06:46:57:916 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-28 06:46:57:917 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

