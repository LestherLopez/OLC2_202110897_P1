2023-09-06 20:55:14:356 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE GUION_BAJO (BLOCK (ALT '_'))) (RULE AND_SIMPLE (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-06 20:55:14:382 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE GUION_BAJO (BLOCK (ALT '_'))) (RULE AND_SIMPLE (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-06 20:55:14:871 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}) (ALT declarestructstmt {$inst = $declarestructstmt.decstruct }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (BLOCK (ALT CONTINUE) (ALT RETURN) (ALT BREAK))) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ listParams PARDER PTCOMA {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    
    $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2);}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT (= exte (BLOCK (ALT ID) (ALT GUION_BAJO))) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text, 1)}) (ALT (= exte (BLOCK (ALT ID) (ALT GUION_BAJO))) ID DOUBLEPTS (? (BLOCK (ALT INOUT))) CORCHETEIZQ type CORCHETEDER {
   
    $parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2);}))) (RULE declarestructstmt (returns interfaces.Instruction decstruct) (BLOCK (ALT STRUCT ID LLAVEIZQ listStruct LLAVEDER { $decstruct = instructions.NewToDeclareStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStruct.l) }))) (RULE listStruct (returns []interface{} l) (BLOCK (ALT (= list listStruct) COMA VAR ID DOUBLEPTS type {
                            var arr []interface{}
                            newParams := environment.NewStructType($ID.text, $type.t)
                            arr = append($list.l, newParams)
                            $l = arr

}) (ALT VAR ID DOUBLEPTS type {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
}) (ALT { $l = []interface{}{} }))) (RULE accessstructstmt (returns interfaces.Expression accessstruct) (BLOCK (ALT (= list ID) POINT ID { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text)  }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT accessstructstmt {$e = accessstructstmt.accessstruct}))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA (? (BLOCK (ALT AND_SIMPLE))) expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT (? (BLOCK (ALT AND_SIMPLE))) expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID DOUBLEPTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOUBLEPTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-06 20:55:14:882 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}) (ALT declarestructstmt {$inst = $declarestructstmt.decstruct }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ listParams PARDER PTCOMA {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    
    $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2);}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text, 1)}) (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS (? (BLOCK (ALT INOUT))) CORCHETEIZQ type CORCHETEDER {
   
    $parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2);}))) (RULE declarestructstmt (returns interfaces.Instruction decstruct) (BLOCK (ALT STRUCT ID LLAVEIZQ listStruct LLAVEDER { $decstruct = instructions.NewToDeclareStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStruct.l) }))) (RULE listStruct (returns []interface{} l) (BLOCK (ALT (= list listStruct) COMA VAR ID DOUBLEPTS type {
                            var arr []interface{}
                            newParams := environment.NewStructType($ID.text, $type.t)
                            arr = append($list.l, newParams)
                            $l = arr

}) (ALT VAR ID DOUBLEPTS type {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
}) (ALT { $l = []interface{}{} }))) (RULE accessstructstmt (returns interfaces.Expression accessstruct) (BLOCK (ALT (= list ID) POINT ID { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text)  }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT accessstructstmt {$e = accessstructstmt.accessstruct}))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA (? (BLOCK (ALT AND_SIMPLE))) expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT (? (BLOCK (ALT AND_SIMPLE))) expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID DOUBLEPTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOUBLEPTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-06 20:55:14:886 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}) (ALT declarestructstmt {$inst = $declarestructstmt.decstruct }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ listParams PARDER PTCOMA {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    
    $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2);}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text, 1)}) (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS (? (BLOCK (ALT INOUT))) CORCHETEIZQ type CORCHETEDER {
   
    $parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2);}))) (RULE declarestructstmt (returns interfaces.Instruction decstruct) (BLOCK (ALT STRUCT ID LLAVEIZQ listStruct LLAVEDER { $decstruct = instructions.NewToDeclareStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStruct.l) }))) (RULE listStruct (returns []interface{} l) (BLOCK (ALT (= list listStruct) COMA VAR ID DOUBLEPTS type {
                            var arr []interface{}
                            newParams := environment.NewStructType($ID.text, $type.t)
                            arr = append($list.l, newParams)
                            $l = arr

}) (ALT VAR ID DOUBLEPTS type {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
}) (ALT { $l = []interface{}{} }))) (RULE accessstructstmt (returns interfaces.Expression accessstruct) (BLOCK (ALT (= list ID) POINT ID { $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text)  }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT accessstructstmt {$e = accessstructstmt.accessstruct}))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA (? (BLOCK (ALT AND_SIMPLE))) expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT (? (BLOCK (ALT AND_SIMPLE))) expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID DOUBLEPTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOUBLEPTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-06 20:55:14:886 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-09-06 20:55:14:911 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lf]
    :   ( {} parameterfuncstmt<tokenIndex=1148> {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1140> parameterfuncstmt<tokenIndex=1142>  {
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      }
        )*
    ;
2023-09-06 20:55:14:919 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (BLOCK (ALT {} (parameterfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1148))) {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1140))) (parameterfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1142))) {
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      }))))))
2023-09-06 20:55:14:920 left-recursion LogManager.java:25 listStruct returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=1256> ID<tokenIndex=1258> DOUBLEPTS<tokenIndex=1260> type<tokenIndex=1262> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
} 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1242> VAR<tokenIndex=1244> ID<tokenIndex=1246> DOUBLEPTS<tokenIndex=1248> type<tokenIndex=1250> {
                                      var arr []interface{}
                                      newParams := environment.NewStructType($ID.text, $type.t)
                                      arr = append($list.l, newParams)
                                      $l = arr

          }
        )*
    ;
2023-09-06 20:55:14:924 grammar LogManager.java:25 added: (RULE listStruct (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 1256))) (ID (ELEMENT_OPTIONS (= tokenIndex 1258))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1260))) (type (ELEMENT_OPTIONS (= tokenIndex 1262))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr
}) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1242))) (VAR (ELEMENT_OPTIONS (= tokenIndex 1244))) (ID (ELEMENT_OPTIONS (= tokenIndex 1246))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1248))) (type (ELEMENT_OPTIONS (= tokenIndex 1250))) {
                                      var arr []interface{}
                                      newParams := environment.NewStructType($ID.text, $type.t)
                                      arr = append($list.l, newParams)
                                      $l = arr

          }))))))
2023-09-06 20:55:14:929 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=1439>   left=expr<tokenIndex=1443,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | op = SUB<tokenIndex=1453>  left=expr<tokenIndex=1457,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)} 
        | PARIZQ<tokenIndex=1463> expr<tokenIndex=1465> PARDER<tokenIndex=1467> { $e = $expr.e } 
        | NUMBER<tokenIndex=1473>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1479>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=1485> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=1491> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=1497> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        | accessstmt<tokenIndex=1503> {$e = $accessstmt.access} 
        | emptvecstmt<tokenIndex=1509> {$e = $emptvecstmt.emptyvec} 
        | countvecstmt<tokenIndex=1515> {$e = $countvecstmt.count} 
        | accessvecstmt<tokenIndex=1521> {$e = $accessvecstmt.accessvec} 
        | intfunctionstmt<tokenIndex=1527> {$e = $intfunctionstmt.intfunc} 
        | floatfunctionstmt<tokenIndex=1533> {$e = $floatfunctionstmt.floatfunc} 
        | stringfunctionstmt<tokenIndex=1539> {$e = $stringfunctionstmt.stringfunc} 
        | accessfuncstmt<tokenIndex=1545>     {$e = $accessfuncstmt.funcexp} 
        | ID<tokenIndex=1551> LLAVEIZQ<tokenIndex=1553> listStructExp<tokenIndex=1555> LLAVEDER<tokenIndex=1557> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | accessstructstmt<tokenIndex=1563> {$e = accessstructstmt.accessstruct} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 25)}?<p=25> op=(MUL<tokenIndex=1309>|DIV<tokenIndex=1311>) right=expr<tokenIndex=1316,p=26> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> op=(ADD<tokenIndex=1329>|SUB<tokenIndex=1331>|PERCENT<tokenIndex=1333>) right=expr<tokenIndex=1338,p=25> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=(MAY_IG<tokenIndex=1351>|MAYOR<tokenIndex=1353>) right=expr<tokenIndex=1358,p=24> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(MEN_IG<tokenIndex=1371>|MENOR<tokenIndex=1373>) right=expr<tokenIndex=1378,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(IG_IG<tokenIndex=1391>|DIF<tokenIndex=1393>) right=expr<tokenIndex=1398,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=AND<tokenIndex=1410> right=expr<tokenIndex=1414,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=OR<tokenIndex=1426> right=expr<tokenIndex=1430,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-06 20:55:14:945 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 1439)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1443) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 1453)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1457) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1463))) (expr (ELEMENT_OPTIONS (= tokenIndex 1465))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1467))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1473))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1479))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 1485))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 1491))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1497))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 1503))) {$e = $accessstmt.access}) (ALT (emptvecstmt (ELEMENT_OPTIONS (= tokenIndex 1509))) {$e = $emptvecstmt.emptyvec}) (ALT (countvecstmt (ELEMENT_OPTIONS (= tokenIndex 1515))) {$e = $countvecstmt.count}) (ALT (accessvecstmt (ELEMENT_OPTIONS (= tokenIndex 1521))) {$e = $accessvecstmt.accessvec}) (ALT (intfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1527))) {$e = $intfunctionstmt.intfunc}) (ALT (floatfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1533))) {$e = $floatfunctionstmt.floatfunc}) (ALT (stringfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1539))) {$e = $stringfunctionstmt.stringfunc}) (ALT (accessfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1545))) {$e = $accessfuncstmt.funcexp}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1551))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 1553))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 1555))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 1557))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (accessstructstmt (ELEMENT_OPTIONS (= tokenIndex 1563))) {$e = accessstructstmt.accessstruct})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 25)}? (ELEMENT_OPTIONS (= p 25))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 1309))) (DIV (ELEMENT_OPTIONS (= tokenIndex 1311))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1316) (= p 26)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1329))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1331))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 1333))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1338) (= p 25)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1351))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1353))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1358) (= p 24)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1371))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1373))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1378) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1391))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1393))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1398) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1410)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1414) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1426)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1430) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-06 20:55:14:945 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} AND_SIMPLE<tokenIndex=1766>? expr<tokenIndex=1769> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1755> AND_SIMPLE<tokenIndex=1757>? expr<tokenIndex=1760> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-06 20:55:14:948 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (? (BLOCK (ALT (AND_SIMPLE (ELEMENT_OPTIONS (= tokenIndex 1766)))))) (expr (ELEMENT_OPTIONS (= tokenIndex 1769))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1755))) (? (BLOCK (ALT (AND_SIMPLE (ELEMENT_OPTIONS (= tokenIndex 1757)))))) (expr (ELEMENT_OPTIONS (= tokenIndex 1760))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-06 20:55:14:948 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1798> DOUBLEPTS<tokenIndex=1800> expr<tokenIndex=1802>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1786> ID<tokenIndex=1788> DOUBLEPTS<tokenIndex=1790> expr<tokenIndex=1792> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-09-06 20:55:14:952 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1798))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1800))) (expr (ELEMENT_OPTIONS (= tokenIndex 1802))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1786))) (ID (ELEMENT_OPTIONS (= tokenIndex 1788))) (DOUBLEPTS (ELEMENT_OPTIONS (= tokenIndex 1790))) (expr (ELEMENT_OPTIONS (= tokenIndex 1792))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-09-06 20:55:14:965 grammar LogManager.java:25 import STRINGS=1
2023-09-06 20:55:14:966 grammar LogManager.java:25 import INTS=2
2023-09-06 20:55:14:966 grammar LogManager.java:25 import FLOATS=3
2023-09-06 20:55:14:966 grammar LogManager.java:25 import BOOLS=4
2023-09-06 20:55:14:966 grammar LogManager.java:25 import CHARACTERS=5
2023-09-06 20:55:14:966 grammar LogManager.java:25 import VAR=6
2023-09-06 20:55:14:966 grammar LogManager.java:25 import NIL=7
2023-09-06 20:55:14:966 grammar LogManager.java:25 import TRUE=8
2023-09-06 20:55:14:966 grammar LogManager.java:25 import FALSE=9
2023-09-06 20:55:14:966 grammar LogManager.java:25 import PRINT=10
2023-09-06 20:55:14:966 grammar LogManager.java:25 import IF=11
2023-09-06 20:55:14:966 grammar LogManager.java:25 import ELSE=12
2023-09-06 20:55:14:966 grammar LogManager.java:25 import WHILE=13
2023-09-06 20:55:14:966 grammar LogManager.java:25 import LET=14
2023-09-06 20:55:14:966 grammar LogManager.java:25 import FOR=15
2023-09-06 20:55:14:966 grammar LogManager.java:25 import IN=16
2023-09-06 20:55:14:966 grammar LogManager.java:25 import SWITCH=17
2023-09-06 20:55:14:966 grammar LogManager.java:25 import CASE=18
2023-09-06 20:55:14:966 grammar LogManager.java:25 import DEFAULT=19
2023-09-06 20:55:14:966 grammar LogManager.java:25 import GUARD=20
2023-09-06 20:55:14:967 grammar LogManager.java:25 import CONTINUE=21
2023-09-06 20:55:14:967 grammar LogManager.java:25 import RETURN=22
2023-09-06 20:55:14:967 grammar LogManager.java:25 import BREAK=23
2023-09-06 20:55:14:967 grammar LogManager.java:25 import APPEND=24
2023-09-06 20:55:14:967 grammar LogManager.java:25 import REMOVELAST=25
2023-09-06 20:55:14:967 grammar LogManager.java:25 import REMOVE=26
2023-09-06 20:55:14:967 grammar LogManager.java:25 import AT=27
2023-09-06 20:55:14:967 grammar LogManager.java:25 import ISEMPTY=28
2023-09-06 20:55:14:967 grammar LogManager.java:25 import COUNT=29
2023-09-06 20:55:14:967 grammar LogManager.java:25 import FUNC=30
2023-09-06 20:55:14:967 grammar LogManager.java:25 import INOUT=31
2023-09-06 20:55:14:967 grammar LogManager.java:25 import STRUCT=32
2023-09-06 20:55:14:967 grammar LogManager.java:25 import NUMBER=33
2023-09-06 20:55:14:967 grammar LogManager.java:25 import STRING=34
2023-09-06 20:55:14:967 grammar LogManager.java:25 import ID=35
2023-09-06 20:55:14:967 grammar LogManager.java:25 import DIF=36
2023-09-06 20:55:14:967 grammar LogManager.java:25 import IG_IG=37
2023-09-06 20:55:14:967 grammar LogManager.java:25 import NOT=38
2023-09-06 20:55:14:967 grammar LogManager.java:25 import OR=39
2023-09-06 20:55:14:967 grammar LogManager.java:25 import AND=40
2023-09-06 20:55:14:967 grammar LogManager.java:25 import IG=41
2023-09-06 20:55:14:967 grammar LogManager.java:25 import IG_ADD=42
2023-09-06 20:55:14:967 grammar LogManager.java:25 import IG_SUB=43
2023-09-06 20:55:14:967 grammar LogManager.java:25 import MAY_IG=44
2023-09-06 20:55:14:967 grammar LogManager.java:25 import MEN_IG=45
2023-09-06 20:55:14:967 grammar LogManager.java:25 import MAYOR=46
2023-09-06 20:55:14:967 grammar LogManager.java:25 import MENOR=47
2023-09-06 20:55:14:967 grammar LogManager.java:25 import MUL=48
2023-09-06 20:55:14:967 grammar LogManager.java:25 import DIV=49
2023-09-06 20:55:14:967 grammar LogManager.java:25 import ADD=50
2023-09-06 20:55:14:967 grammar LogManager.java:25 import SUB=51
2023-09-06 20:55:14:967 grammar LogManager.java:25 import PERCENT=52
2023-09-06 20:55:14:967 grammar LogManager.java:25 import PARIZQ=53
2023-09-06 20:55:14:967 grammar LogManager.java:25 import PARDER=54
2023-09-06 20:55:14:968 grammar LogManager.java:25 import LLAVEIZQ=55
2023-09-06 20:55:14:968 grammar LogManager.java:25 import LLAVEDER=56
2023-09-06 20:55:14:968 grammar LogManager.java:25 import DOUBLEPTS=57
2023-09-06 20:55:14:968 grammar LogManager.java:25 import QUESTION=58
2023-09-06 20:55:14:968 grammar LogManager.java:25 import POINT=59
2023-09-06 20:55:14:968 grammar LogManager.java:25 import COMA=60
2023-09-06 20:55:14:968 grammar LogManager.java:25 import PTCOMA=61
2023-09-06 20:55:14:968 grammar LogManager.java:25 import CORCHETEIZQ=62
2023-09-06 20:55:14:968 grammar LogManager.java:25 import CORCHETEDER=63
2023-09-06 20:55:14:968 grammar LogManager.java:25 import GUION_BAJO=64
2023-09-06 20:55:14:968 grammar LogManager.java:25 import AND_SIMPLE=65
2023-09-06 20:55:14:968 grammar LogManager.java:25 import WHITESPACE=66
2023-09-06 20:55:14:968 grammar LogManager.java:25 import COMMENT=67
2023-09-06 20:55:14:968 grammar LogManager.java:25 import LINE_COMMENT=68
2023-09-06 20:55:14:968 grammar LogManager.java:25 import 'String'=1
2023-09-06 20:55:14:968 grammar LogManager.java:25 import 'Int'=2
2023-09-06 20:55:14:968 grammar LogManager.java:25 import 'Float'=3
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'Bool'=4
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'Character'=5
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'var'=6
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'nil'=7
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'true'=8
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'false'=9
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'print'=10
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'if'=11
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'else'=12
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'while'=13
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'let'=14
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'for'=15
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'in'=16
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'switch'=17
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'case'=18
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'default'=19
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'guard'=20
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'continue'=21
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'return'=22
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'break'=23
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'append'=24
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'removeLast'=25
2023-09-06 20:55:14:969 grammar LogManager.java:25 import 'remove'=26
2023-09-06 20:55:14:970 grammar LogManager.java:25 import 'at'=27
2023-09-06 20:55:14:970 grammar LogManager.java:25 import 'IsEmpty'=28
2023-09-06 20:55:14:970 grammar LogManager.java:25 import 'count'=29
2023-09-06 20:55:14:970 grammar LogManager.java:25 import 'func'=30
2023-09-06 20:55:14:970 grammar LogManager.java:25 import 'inout'=31
2023-09-06 20:55:14:970 grammar LogManager.java:25 import 'struct'=32
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '!='=36
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '=='=37
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '!'=38
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '||'=39
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '&&'=40
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '='=41
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '+='=42
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '-='=43
2023-09-06 20:55:14:970 grammar LogManager.java:25 import '>='=44
2023-09-06 20:55:14:971 grammar LogManager.java:25 import '<='=45
2023-09-06 20:55:14:971 grammar LogManager.java:25 import '>'=46
2023-09-06 20:55:14:971 grammar LogManager.java:25 import '<'=47
2023-09-06 20:55:14:971 grammar LogManager.java:25 import '*'=48
2023-09-06 20:55:14:971 grammar LogManager.java:25 import '/'=49
2023-09-06 20:55:14:972 grammar LogManager.java:25 import '+'=50
2023-09-06 20:55:14:972 grammar LogManager.java:25 import '-'=51
2023-09-06 20:55:14:972 grammar LogManager.java:25 import '%'=52
2023-09-06 20:55:14:972 grammar LogManager.java:25 import '('=53
2023-09-06 20:55:14:972 grammar LogManager.java:25 import ')'=54
2023-09-06 20:55:14:972 grammar LogManager.java:25 import '{'=55
2023-09-06 20:55:14:972 grammar LogManager.java:25 import '}'=56
2023-09-06 20:55:14:973 grammar LogManager.java:25 import ':'=57
2023-09-06 20:55:14:973 grammar LogManager.java:25 import '?'=58
2023-09-06 20:55:14:973 grammar LogManager.java:25 import '.'=59
2023-09-06 20:55:14:973 grammar LogManager.java:25 import ','=60
2023-09-06 20:55:14:973 grammar LogManager.java:25 import ';'=61
2023-09-06 20:55:14:973 grammar LogManager.java:25 import '['=62
2023-09-06 20:55:14:973 grammar LogManager.java:25 import ']'=63
2023-09-06 20:55:14:973 grammar LogManager.java:25 import '_'=64
2023-09-06 20:55:14:973 grammar LogManager.java:25 import '&'=65
2023-09-06 20:55:14:974 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, APPEND=24, REMOVELAST=25, REMOVE=26, AT=27, ISEMPTY=28, COUNT=29, FUNC=30, INOUT=31, STRUCT=32, NUMBER=33, STRING=34, ID=35, DIF=36, IG_IG=37, NOT=38, OR=39, AND=40, IG=41, IG_ADD=42, IG_SUB=43, MAY_IG=44, MEN_IG=45, MAYOR=46, MENOR=47, MUL=48, DIV=49, ADD=50, SUB=51, PERCENT=52, PARIZQ=53, PARDER=54, LLAVEIZQ=55, LLAVEDER=56, DOUBLEPTS=57, QUESTION=58, POINT=59, COMA=60, PTCOMA=61, CORCHETEIZQ=62, CORCHETEDER=63, GUION_BAJO=64, AND_SIMPLE=65, WHITESPACE=66, COMMENT=67, LINE_COMMENT=68, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, 'IsEmpty'=28, 'count'=29, 'func'=30, 'inout'=31, 'struct'=32, '!='=36, '=='=37, '!'=38, '||'=39, '&&'=40, '='=41, '+='=42, '-='=43, '>='=44, '<='=45, '>'=46, '<'=47, '*'=48, '/'=49, '+'=50, '-'=51, '%'=52, '('=53, ')'=54, '{'=55, '}'=56, ':'=57, '?'=58, '.'=59, ','=60, ';'=61, '['=62, ']'=63, '_'=64, '&'=65}
2023-09-06 20:55:14:974 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, APPEND=24, REMOVELAST=25, REMOVE=26, AT=27, ISEMPTY=28, COUNT=29, FUNC=30, INOUT=31, STRUCT=32, NUMBER=33, STRING=34, ID=35, DIF=36, IG_IG=37, NOT=38, OR=39, AND=40, IG=41, IG_ADD=42, IG_SUB=43, MAY_IG=44, MEN_IG=45, MAYOR=46, MENOR=47, MUL=48, DIV=49, ADD=50, SUB=51, PERCENT=52, PARIZQ=53, PARDER=54, LLAVEIZQ=55, LLAVEDER=56, DOUBLEPTS=57, QUESTION=58, POINT=59, COMA=60, PTCOMA=61, CORCHETEIZQ=62, CORCHETEDER=63, GUION_BAJO=64, AND_SIMPLE=65, WHITESPACE=66, COMMENT=67, LINE_COMMENT=68}
2023-09-06 20:55:14:975 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, 'IsEmpty'=28, 'count'=29, 'func'=30, 'inout'=31, 'struct'=32, '!='=36, '=='=37, '!'=38, '||'=39, '&&'=40, '='=41, '+='=42, '-='=43, '>='=44, '<='=45, '>'=46, '<'=47, '*'=48, '/'=49, '+'=50, '-'=51, '%'=52, '('=53, ')'=54, '{'=55, '}'=56, ':'=57, '?'=58, '.'=59, ','=60, ';'=61, '['=62, ']'=63, '_'=64, '&'=65}
2023-09-06 20:55:15:025 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-06 20:55:15:026 LL1 LogManager.java:25 look=[{6, 10..11, 13..15, 17, 20..23, 30, 32, 35}, {<EOF>, 18..19, 21..23, 56}]
2023-09-06 20:55:15:027 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:027 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-06 20:55:15:027 LL1 LogManager.java:25 look=[10, 6, 14, 35, 35, 11, 13, 15, 17, 20, {21..23}, 6, 35, 35, 35, 35, 30, 35, 32]
2023-09-06 20:55:15:027 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:027 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-09-06 20:55:15:028 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:028 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:028 LL1 LogManager.java:25 
DECISION 3 in rule declarestmt
2023-09-06 20:55:15:028 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:028 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:028 LL1 LogManager.java:25 
DECISION 4 in rule declarestmt
2023-09-06 20:55:15:029 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:029 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:029 LL1 LogManager.java:25 
DECISION 5 in rule declarestmt
2023-09-06 20:55:15:029 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:030 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:030 LL1 LogManager.java:25 
DECISION 6 in rule declarestmt
2023-09-06 20:55:15:030 LL1 LogManager.java:25 look=[6, 6, 6]
2023-09-06 20:55:15:030 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:030 LL1 LogManager.java:25 
DECISION 7 in rule constantstmt
2023-09-06 20:55:15:031 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:031 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:031 LL1 LogManager.java:25 
DECISION 8 in rule constantstmt
2023-09-06 20:55:15:031 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:032 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:032 LL1 LogManager.java:25 
DECISION 9 in rule constantstmt
2023-09-06 20:55:15:032 LL1 LogManager.java:25 look=[14, 14]
2023-09-06 20:55:15:032 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:032 LL1 LogManager.java:25 
DECISION 10 in rule blockelifs
2023-09-06 20:55:15:032 LL1 LogManager.java:25 look=[11, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:032 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:032 LL1 LogManager.java:25 
DECISION 11 in rule ifstmt
2023-09-06 20:55:15:032 LL1 LogManager.java:25 look=[11, 11, 11]
2023-09-06 20:55:15:032 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:032 LL1 LogManager.java:25 
DECISION 12 in rule switchstmt
2023-09-06 20:55:15:032 LL1 LogManager.java:25 look=[17, 17]
2023-09-06 20:55:15:032 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:032 LL1 LogManager.java:25 
DECISION 13 in rule casestmt
2023-09-06 20:55:15:032 LL1 LogManager.java:25 look=[18, 18]
2023-09-06 20:55:15:032 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:032 LL1 LogManager.java:25 
DECISION 14 in rule blockcases
2023-09-06 20:55:15:032 LL1 LogManager.java:25 look=[18, {18, 56}]
2023-09-06 20:55:15:033 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:033 LL1 LogManager.java:25 
DECISION 15 in rule assignationstmt
2023-09-06 20:55:15:034 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:034 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:034 LL1 LogManager.java:25 
DECISION 16 in rule forstmt
2023-09-06 20:55:15:034 LL1 LogManager.java:25 look=[15, 15]
2023-09-06 20:55:15:034 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:034 LL1 LogManager.java:25 
DECISION 17 in rule transferstmt
2023-09-06 20:55:15:034 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:034 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:034 LL1 LogManager.java:25 
DECISION 18 in rule transferstmt
2023-09-06 20:55:15:034 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:034 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:034 LL1 LogManager.java:25 
DECISION 19 in rule transferstmt
2023-09-06 20:55:15:035 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:035 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:035 LL1 LogManager.java:25 
DECISION 20 in rule transferstmt
2023-09-06 20:55:15:035 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:035 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:035 LL1 LogManager.java:25 
DECISION 21 in rule transferstmt
2023-09-06 20:55:15:035 LL1 LogManager.java:25 look=[22, 22, 21, 23]
2023-09-06 20:55:15:035 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:035 LL1 LogManager.java:25 
DECISION 22 in rule declarevectorstmt
2023-09-06 20:55:15:035 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:035 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:035 LL1 LogManager.java:25 
DECISION 23 in rule declarevectorstmt
2023-09-06 20:55:15:035 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:035 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:035 LL1 LogManager.java:25 
DECISION 24 in rule declarevectorstmt
2023-09-06 20:55:15:036 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:036 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:036 LL1 LogManager.java:25 
DECISION 25 in rule declarevectorstmt
2023-09-06 20:55:15:036 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:036 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:036 LL1 LogManager.java:25 
DECISION 26 in rule declarevectorstmt
2023-09-06 20:55:15:036 LL1 LogManager.java:25 look=[6, 6, 6, 6]
2023-09-06 20:55:15:036 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:036 LL1 LogManager.java:25 
DECISION 27 in rule appendstmt
2023-09-06 20:55:15:036 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:037 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:037 LL1 LogManager.java:25 
DECISION 28 in rule removelaststmt
2023-09-06 20:55:15:037 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:037 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:037 LL1 LogManager.java:25 
DECISION 29 in rule removestmt
2023-09-06 20:55:15:037 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:037 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:037 LL1 LogManager.java:25 
DECISION 30 in rule assignationvecstmt
2023-09-06 20:55:15:037 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:038 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:038 LL1 LogManager.java:25 
DECISION 31 in rule declarematrixstmt
2023-09-06 20:55:15:038 LL1 LogManager.java:25 look=[61, <EOF>]
2023-09-06 20:55:15:038 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:038 LL1 LogManager.java:25 
DECISION 32 in rule declarefuncstmt
2023-09-06 20:55:15:038 LL1 LogManager.java:25 look=[30, 30, 30, 30]
2023-09-06 20:55:15:038 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:038 LL1 LogManager.java:25 
DECISION 33 in rule listParamsFunc
2023-09-06 20:55:15:038 LL1 LogManager.java:25 look=[null, 54]
2023-09-06 20:55:15:038 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:038 LL1 LogManager.java:25 
DECISION 34 in rule parameterfuncstmt
2023-09-06 20:55:15:038 LL1 LogManager.java:25 look=[31, 62]
2023-09-06 20:55:15:038 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:038 LL1 LogManager.java:25 
DECISION 35 in rule parameterfuncstmt
2023-09-06 20:55:15:038 LL1 LogManager.java:25 look=[{35, 64}, {35, 64}]
2023-09-06 20:55:15:038 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:038 LL1 LogManager.java:25 
DECISION 36 in rule listStruct
2023-09-06 20:55:15:038 LL1 LogManager.java:25 look=[6, null]
2023-09-06 20:55:15:038 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:038 LL1 LogManager.java:25 
DECISION 37 in rule listStruct
2023-09-06 20:55:15:038 LL1 LogManager.java:25 look=[null, 56]
2023-09-06 20:55:15:038 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:038 LL1 LogManager.java:25 
DECISION 38 in rule expr
2023-09-06 20:55:15:039 LL1 LogManager.java:25 look=[38, 51, 53, 33, 34, 8, 9, 7, 35, 35, 35, 35, 2, 3, 1, 35, 35, 35]
2023-09-06 20:55:15:039 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:039 LL1 LogManager.java:25 
DECISION 39 in rule expr
2023-09-06 20:55:15:039 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-06 20:55:15:039 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:039 LL1 LogManager.java:25 
DECISION 40 in rule expr
2023-09-06 20:55:15:039 LL1 LogManager.java:25 look=[null, null]
2023-09-06 20:55:15:039 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:039 LL1 LogManager.java:25 
DECISION 41 in rule accessfuncstmt
2023-09-06 20:55:15:039 LL1 LogManager.java:25 look=[35, 35]
2023-09-06 20:55:15:039 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:039 LL1 LogManager.java:25 
DECISION 42 in rule increaseanddecreasestmt
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:040 LL1 LogManager.java:25 
DECISION 43 in rule increaseanddecreasestmt
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[61, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 32, 35, 56}]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:040 LL1 LogManager.java:25 
DECISION 44 in rule increaseanddecreasestmt
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[35, 35]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:040 LL1 LogManager.java:25 
DECISION 45 in rule type
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:040 LL1 LogManager.java:25 
DECISION 46 in rule listParams
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[65, {1..3, 7..9, 33..35, 38, 51, 53}]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:040 LL1 LogManager.java:25 
DECISION 47 in rule listParams
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[65, {1..3, 7..9, 33..35, 38, 51, 53}]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? true
2023-09-06 20:55:15:040 LL1 LogManager.java:25 
DECISION 48 in rule listParams
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[null, {54, 63}]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:040 LL1 LogManager.java:25 
DECISION 49 in rule listStructExp
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[35, null]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:040 LL1 LogManager.java:25 
DECISION 50 in rule listStructExp
2023-09-06 20:55:15:040 LL1 LogManager.java:25 look=[null, 56]
2023-09-06 20:55:15:040 LL1 LogManager.java:25 LL(1)? false
2023-09-06 20:55:15:044 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-09-06 20:55:15:057 action-translator LogManager.java:25 translate $code = $block.blk
2023-09-06 20:55:15:057 action-translator LogManager.java:25 attr [@-1,1:4='code',<0>,18:13]
2023-09-06 20:55:15:058 action-translator LogManager.java:25 qattr [@-1,9:13='block',<0>,18:21].[@-1,15:17='blk',<0>,18:27]
2023-09-06 20:55:15:059 action-translator LogManager.java:25 translate 
$blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-06 20:55:15:059 action-translator LogManager.java:25 attr [@-1,3:5='blk',<0>,23:1]
2023-09-06 20:55:15:060 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    
2023-09-06 20:55:15:060 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,30:13]
2023-09-06 20:55:15:060 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,30:27]
2023-09-06 20:55:15:061 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-06 20:55:15:061 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,37:14]
2023-09-06 20:55:15:062 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,37:22].[@-1,20:23='prnt',<0>,37:32]
2023-09-06 20:55:15:062 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-09-06 20:55:15:062 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,38:15]
2023-09-06 20:55:15:062 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,38:23].[@-1,21:23='dec',<0>,38:35]
2023-09-06 20:55:15:062 action-translator LogManager.java:25 translate $inst = $constantstmt.const
2023-09-06 20:55:15:062 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,39:16]
2023-09-06 20:55:15:063 action-translator LogManager.java:25 qattr [@-1,9:20='constantstmt',<0>,39:24].[@-1,22:26='const',<0>,39:37]
2023-09-06 20:55:15:063 action-translator LogManager.java:25 translate $inst = $assignationstmt.assign
2023-09-06 20:55:15:063 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:19]
2023-09-06 20:55:15:063 action-translator LogManager.java:25 qattr [@-1,9:23='assignationstmt',<0>,40:27].[@-1,25:30='assign',<0>,40:43]
2023-09-06 20:55:15:063 action-translator LogManager.java:25 translate $inst = $increaseanddecreasestmt.increasedecrease
2023-09-06 20:55:15:063 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,41:27]
2023-09-06 20:55:15:063 action-translator LogManager.java:25 qattr [@-1,9:31='increaseanddecreasestmt',<0>,41:35].[@-1,33:48='increasedecrease',<0>,41:59]
2023-09-06 20:55:15:064 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-09-06 20:55:15:064 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:11]
2023-09-06 20:55:15:064 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,42:19].[@-1,17:19='ift',<0>,42:26]
2023-09-06 20:55:15:064 action-translator LogManager.java:25 translate $inst = $whilestmt.while
2023-09-06 20:55:15:064 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,43:13]
2023-09-06 20:55:15:064 action-translator LogManager.java:25 qattr [@-1,9:17='whilestmt',<0>,43:21].[@-1,19:23='while',<0>,43:31]
2023-09-06 20:55:15:064 action-translator LogManager.java:25 translate $inst = $forstmt.for
2023-09-06 20:55:15:064 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,44:11]
2023-09-06 20:55:15:064 action-translator LogManager.java:25 qattr [@-1,9:15='forstmt',<0>,44:19].[@-1,17:19='for',<0>,44:27]
2023-09-06 20:55:15:064 action-translator LogManager.java:25 translate $inst = $switchstmt.switch
2023-09-06 20:55:15:064 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:14]
2023-09-06 20:55:15:065 action-translator LogManager.java:25 qattr [@-1,9:18='switchstmt',<0>,45:22].[@-1,20:25='switch',<0>,45:33]
2023-09-06 20:55:15:065 action-translator LogManager.java:25 translate $inst = $guardstmt.gua
2023-09-06 20:55:15:065 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:13]
2023-09-06 20:55:15:065 action-translator LogManager.java:25 qattr [@-1,9:17='guardstmt',<0>,46:21].[@-1,19:21='gua',<0>,46:31]
2023-09-06 20:55:15:065 action-translator LogManager.java:25 translate $inst = $transferstmt.tran
2023-09-06 20:55:15:065 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:16]
2023-09-06 20:55:15:065 action-translator LogManager.java:25 qattr [@-1,9:20='transferstmt',<0>,47:24].[@-1,22:25='tran',<0>,47:37]
2023-09-06 20:55:15:065 action-translator LogManager.java:25 translate $inst = $declarevectorstmt.decvec
2023-09-06 20:55:15:066 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:21]
2023-09-06 20:55:15:066 action-translator LogManager.java:25 qattr [@-1,9:25='declarevectorstmt',<0>,48:29].[@-1,27:32='decvec',<0>,48:47]
2023-09-06 20:55:15:066 action-translator LogManager.java:25 translate $inst = $appendstmt.app
2023-09-06 20:55:15:066 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,49:17]
2023-09-06 20:55:15:066 action-translator LogManager.java:25 qattr [@-1,9:18='appendstmt',<0>,49:25].[@-1,20:22='app',<0>,49:36]
2023-09-06 20:55:15:067 action-translator LogManager.java:25 translate $inst = $removelaststmt.removl
2023-09-06 20:55:15:067 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,50:18]
2023-09-06 20:55:15:067 action-translator LogManager.java:25 qattr [@-1,9:22='removelaststmt',<0>,50:26].[@-1,24:29='removl',<0>,50:41]
2023-09-06 20:55:15:068 action-translator LogManager.java:25 translate $inst = $removestmt.remov
2023-09-06 20:55:15:068 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,51:14]
2023-09-06 20:55:15:068 action-translator LogManager.java:25 qattr [@-1,9:18='removestmt',<0>,51:22].[@-1,20:24='remov',<0>,51:33]
2023-09-06 20:55:15:068 action-translator LogManager.java:25 translate $inst = $assignationvecstmt.assignvec
2023-09-06 20:55:15:068 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,52:22]
2023-09-06 20:55:15:068 action-translator LogManager.java:25 qattr [@-1,9:26='assignationvecstmt',<0>,52:30].[@-1,28:36='assignvec',<0>,52:49]
2023-09-06 20:55:15:069 action-translator LogManager.java:25 translate $inst = $declarefuncstmt.decfunc
2023-09-06 20:55:15:069 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,53:19]
2023-09-06 20:55:15:069 action-translator LogManager.java:25 qattr [@-1,9:23='declarefuncstmt',<0>,53:27].[@-1,25:31='decfunc',<0>,53:43]
2023-09-06 20:55:15:069 action-translator LogManager.java:25 translate $inst = $accessfuncinstruction.accessfuncin
2023-09-06 20:55:15:069 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,54:25]
2023-09-06 20:55:15:069 action-translator LogManager.java:25 qattr [@-1,9:29='accessfuncinstruction',<0>,54:33].[@-1,31:42='accessfuncin',<0>,54:55]
2023-09-06 20:55:15:069 action-translator LogManager.java:25 translate $inst = $declarestructstmt.decstruct 
2023-09-06 20:55:15:069 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,55:25]
2023-09-06 20:55:15:069 action-translator LogManager.java:25 qattr [@-1,9:25='declarestructstmt',<0>,55:33].[@-1,27:35='decstruct',<0>,55:51]
2023-09-06 20:55:15:072 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)
2023-09-06 20:55:15:072 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,59:43]
2023-09-06 20:55:15:072 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,59:73].[@-1,38:41='line',<0>,59:79]
2023-09-06 20:55:15:072 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,59:86].[@-1,51:53='pos',<0>,59:92]
2023-09-06 20:55:15:073 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,59:98].[@-1,68:68='l',<0>,59:109]
2023-09-06 20:55:15:074 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-09-06 20:55:15:074 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,64:41]
2023-09-06 20:55:15:074 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,64:74].[@-1,38:41='line',<0>,64:78]
2023-09-06 20:55:15:074 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,64:85].[@-1,49:51='pos',<0>,64:89]
2023-09-06 20:55:15:075 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,64:95].[@-1,58:61='text',<0>,64:98]
2023-09-06 20:55:15:075 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,64:105].[@-1,70:70='t',<0>,64:110]
2023-09-06 20:55:15:075 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,64:114].[@-1,79:79='e',<0>,64:119]
2023-09-06 20:55:15:075 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-09-06 20:55:15:076 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,65:26]
2023-09-06 20:55:15:076 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,65:59].[@-1,38:41='line',<0>,65:63]
2023-09-06 20:55:15:076 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,65:70].[@-1,49:51='pos',<0>,65:74]
2023-09-06 20:55:15:076 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,65:80].[@-1,58:61='text',<0>,65:83]
2023-09-06 20:55:15:077 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,65:108].[@-1,88:88='e',<0>,65:113]
2023-09-06 20:55:15:077 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)
2023-09-06 20:55:15:077 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,66:42]
2023-09-06 20:55:15:077 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,66:75].[@-1,38:41='line',<0>,66:79]
2023-09-06 20:55:15:078 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,66:86].[@-1,49:51='pos',<0>,66:90]
2023-09-06 20:55:15:078 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,66:96].[@-1,58:61='text',<0>,66:99]
2023-09-06 20:55:15:078 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,66:106].[@-1,70:70='t',<0>,66:111]
2023-09-06 20:55:15:079 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)
2023-09-06 20:55:15:080 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,70:41]
2023-09-06 20:55:15:080 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,70:76].[@-1,40:43='line',<0>,70:80]
2023-09-06 20:55:15:080 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,70:87].[@-1,51:53='pos',<0>,70:91]
2023-09-06 20:55:15:080 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,70:97].[@-1,60:63='text',<0>,70:100]
2023-09-06 20:55:15:080 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,70:107].[@-1,72:72='t',<0>,70:112]
2023-09-06 20:55:15:081 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,70:116].[@-1,81:81='e',<0>,70:121]
2023-09-06 20:55:15:081 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-09-06 20:55:15:081 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,71:26]
2023-09-06 20:55:15:081 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,71:61].[@-1,40:43='line',<0>,71:65]
2023-09-06 20:55:15:081 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,71:72].[@-1,51:53='pos',<0>,71:76]
2023-09-06 20:55:15:081 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,71:82].[@-1,60:63='text',<0>,71:85]
2023-09-06 20:55:15:081 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,71:110].[@-1,90:90='e',<0>,71:115]
2023-09-06 20:55:15:081 action-translator LogManager.java:25 translate 
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  
2023-09-06 20:55:15:082 action-translator LogManager.java:25 attr [@-1,3:7='blkef',<0>,78:1]
2023-09-06 20:55:15:082 action-translator LogManager.java:25 translate    
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    
2023-09-06 20:55:15:082 action-translator LogManager.java:25 attr [@-1,114:118='blkef',<0>,87:13]
2023-09-06 20:55:15:082 action-translator LogManager.java:25 attr [@-1,130:134='blkef',<0>,87:29]
2023-09-06 20:55:15:083 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk
2023-09-06 20:55:15:084 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,94:41] [@-1,7:68=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)',<0>,94:46]
2023-09-06 20:55:15:084 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)
2023-09-06 20:55:15:084 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,94:60].[@-1,24:27='line',<0>,94:63]
2023-09-06 20:55:15:084 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,94:70].[@-1,34:36='pos',<0>,94:73]
2023-09-06 20:55:15:084 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,94:79].[@-1,45:45='e',<0>,94:84]
2023-09-06 20:55:15:084 action-translator LogManager.java:25 qattr [@-1,49:51='ifb',<0>,94:88].[@-1,53:55='blk',<0>,94:92]
2023-09-06 20:55:15:084 action-translator LogManager.java:25 attr [@-1,114:115='el',<0>,95:41]
2023-09-06 20:55:15:084 action-translator LogManager.java:25 qattr [@-1,120:122='ifb',<0>,95:47].[@-1,124:126='blk',<0>,95:51]
2023-09-06 20:55:15:085 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        
2023-09-06 20:55:15:085 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,96:88] [@-1,7:87=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)',<0>,96:93]
2023-09-06 20:55:15:085 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)
2023-09-06 20:55:15:085 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,96:107].[@-1,24:27='line',<0>,96:110]
2023-09-06 20:55:15:085 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,96:117].[@-1,34:36='pos',<0>,96:120]
2023-09-06 20:55:15:085 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,96:126].[@-1,45:45='e',<0>,96:131]
2023-09-06 20:55:15:086 action-translator LogManager.java:25 qattr [@-1,49:58='ifelseblck',<0>,96:135].[@-1,60:62='blk',<0>,96:146]
2023-09-06 20:55:15:086 action-translator LogManager.java:25 qattr [@-1,66:75='elseifblck',<0>,96:152].[@-1,77:79='blk',<0>,96:163]
2023-09-06 20:55:15:086 action-translator LogManager.java:25 setAttr [@-1,181:182='el',<0>,97:89] [@-1,185:200=' $ifelseblck.blk',<0>,97:93]
2023-09-06 20:55:15:086 action-translator LogManager.java:25 translate  $ifelseblck.blk
2023-09-06 20:55:15:086 action-translator LogManager.java:25 qattr [@-1,2:11='ifelseblck',<0>,96:88].[@-1,13:15='blk',<0>,96:99]
2023-09-06 20:55:15:086 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); 
2023-09-06 20:55:15:087 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,100:59] [@-1,7:83=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)',<0>,100:64]
2023-09-06 20:55:15:087 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)
2023-09-06 20:55:15:087 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,100:78].[@-1,24:27='line',<0>,100:81]
2023-09-06 20:55:15:087 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,100:88].[@-1,34:36='pos',<0>,100:91]
2023-09-06 20:55:15:087 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,100:97].[@-1,45:45='e',<0>,100:102]
2023-09-06 20:55:15:088 action-translator LogManager.java:25 qattr [@-1,49:52='elif',<0>,100:106].[@-1,54:56='blk',<0>,100:111]
2023-09-06 20:55:15:088 action-translator LogManager.java:25 qattr [@-1,60:69='blockelifs',<0>,100:117].[@-1,71:75='blkef',<0>,100:128]
2023-09-06 20:55:15:089 action-translator LogManager.java:25 translate  $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);
2023-09-06 20:55:15:089 action-translator LogManager.java:25 setAttr [@-1,2:7='switch',<0>,104:58] [@-1,10:91=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)',<0>,104:66]
2023-09-06 20:55:15:089 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)
2023-09-06 20:55:15:089 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,104:81].[@-1,32:35='line',<0>,104:88]
2023-09-06 20:55:15:089 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,104:95].[@-1,46:48='pos',<0>,104:102]
2023-09-06 20:55:15:089 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,104:108].[@-1,57:57='e',<0>,104:113]
2023-09-06 20:55:15:089 action-translator LogManager.java:25 qattr [@-1,72:76='block',<0>,104:128].[@-1,78:80='blk',<0>,104:134]
2023-09-06 20:55:15:090 action-translator LogManager.java:25 translate $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);
2023-09-06 20:55:15:090 action-translator LogManager.java:25 setAttr [@-1,1:6='switch',<0>,105:44] [@-1,9:92=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)',<0>,105:52]
2023-09-06 20:55:15:090 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)
2023-09-06 20:55:15:090 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,105:68].[@-1,32:35='line',<0>,105:75]
2023-09-06 20:55:15:090 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,105:82].[@-1,46:48='pos',<0>,105:89]
2023-09-06 20:55:15:090 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,105:95].[@-1,57:57='e',<0>,105:100]
2023-09-06 20:55:15:090 action-translator LogManager.java:25 qattr [@-1,66:73='casestmt',<0>,105:109].[@-1,75:77='cas',<0>,105:118]
2023-09-06 20:55:15:091 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")
2023-09-06 20:55:15:091 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,108:41]
2023-09-06 20:55:15:091 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,108:69].[@-1,35:38='line',<0>,108:74]
2023-09-06 20:55:15:091 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,108:80].[@-1,46:48='pos',<0>,108:85]
2023-09-06 20:55:15:091 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,108:91].[@-1,57:57='e',<0>,108:96]
2023-09-06 20:55:15:091 action-translator LogManager.java:25 qattr [@-1,60:64='block',<0>,108:99].[@-1,66:68='blk',<0>,108:105]
2023-09-06 20:55:15:091 action-translator LogManager.java:25 qattr [@-1,72:81='blockcases',<0>,108:111].[@-1,83:89='blkcase',<0>,108:122]
2023-09-06 20:55:15:092 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)
2023-09-06 20:55:15:092 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,110:63]
2023-09-06 20:55:15:092 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,110:91].[@-1,35:38='line',<0>,110:96]
2023-09-06 20:55:15:092 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,110:102].[@-1,46:48='pos',<0>,110:107]
2023-09-06 20:55:15:092 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,110:113].[@-1,57:57='e',<0>,110:118]
2023-09-06 20:55:15:092 action-translator LogManager.java:25 qattr [@-1,60:62='sen',<0>,110:121].[@-1,64:66='blk',<0>,110:125]
2023-09-06 20:55:15:092 action-translator LogManager.java:25 qattr [@-1,70:72='def',<0>,110:131].[@-1,74:76='blk',<0>,110:135]
2023-09-06 20:55:15:092 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  
2023-09-06 20:55:15:092 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,114:5]
2023-09-06 20:55:15:093 action-translator LogManager.java:25 translate 
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    
2023-09-06 20:55:15:093 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,121:13]
2023-09-06 20:55:15:093 action-translator LogManager.java:25 attr [@-1,136:142='blkcase',<0>,121:31]
2023-09-06 20:55:15:094 action-translator LogManager.java:25 translate $assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)
2023-09-06 20:55:15:094 action-translator LogManager.java:25 attr [@-1,1:6='assign',<0>,129:22]
2023-09-06 20:55:15:094 action-translator LogManager.java:25 qattr [@-1,39:40='IG',<0>,129:60].[@-1,42:45='line',<0>,129:63]
2023-09-06 20:55:15:094 action-translator LogManager.java:25 qattr [@-1,49:50='IG',<0>,129:70].[@-1,52:54='pos',<0>,129:73]
2023-09-06 20:55:15:094 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,129:80].[@-1,62:65='text',<0>,129:83]
2023-09-06 20:55:15:094 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,129:90].[@-1,74:74='e',<0>,129:95]
2023-09-06 20:55:15:095 action-translator LogManager.java:25 translate $while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)
2023-09-06 20:55:15:095 action-translator LogManager.java:25 attr [@-1,1:5='while',<0>,133:38]
2023-09-06 20:55:15:095 action-translator LogManager.java:25 qattr [@-1,32:36='WHILE',<0>,133:69].[@-1,38:41='line',<0>,133:75]
2023-09-06 20:55:15:095 action-translator LogManager.java:25 qattr [@-1,45:49='WHILE',<0>,133:82].[@-1,51:53='pos',<0>,133:88]
2023-09-06 20:55:15:095 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,133:95].[@-1,63:63='e',<0>,133:100]
2023-09-06 20:55:15:095 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,133:104].[@-1,73:75='blk',<0>,133:110]
2023-09-06 20:55:15:096 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)
2023-09-06 20:55:15:096 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,137:43]
2023-09-06 20:55:15:096 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,137:70].[@-1,32:35='line',<0>,137:74]
2023-09-06 20:55:15:097 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,137:81].[@-1,43:45='pos',<0>,137:85]
2023-09-06 20:55:15:098 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,137:91].[@-1,52:55='text',<0>,137:94]
2023-09-06 20:55:15:098 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,137:101].[@-1,64:64='e',<0>,137:106]
2023-09-06 20:55:15:098 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,137:115].[@-1,79:81='blk',<0>,137:121]
2023-09-06 20:55:15:099 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)
2023-09-06 20:55:15:099 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,138:72]
2023-09-06 20:55:15:099 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,138:99].[@-1,32:35='line',<0>,138:103]
2023-09-06 20:55:15:099 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,138:110].[@-1,43:45='pos',<0>,138:114]
2023-09-06 20:55:15:099 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,138:120].[@-1,52:55='text',<0>,138:123]
2023-09-06 20:55:15:099 action-translator LogManager.java:25 qattr [@-1,59:63='first',<0>,138:130].[@-1,65:65='e',<0>,138:136]
2023-09-06 20:55:15:099 action-translator LogManager.java:25 qattr [@-1,69:74='second',<0>,138:140].[@-1,76:76='e',<0>,138:147]
2023-09-06 20:55:15:099 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,138:151].[@-1,86:88='blk',<0>,138:157]
2023-09-06 20:55:15:100 action-translator LogManager.java:25 translate $gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)
2023-09-06 20:55:15:100 action-translator LogManager.java:25 attr [@-1,1:3='gua',<0>,144:69]
2023-09-06 20:55:15:100 action-translator LogManager.java:25 qattr [@-1,30:34='GUARD',<0>,144:98].[@-1,36:39='line',<0>,144:104]
2023-09-06 20:55:15:100 action-translator LogManager.java:25 qattr [@-1,43:47='GUARD',<0>,144:111].[@-1,49:51='pos',<0>,144:117]
2023-09-06 20:55:15:101 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,144:123].[@-1,60:60='e',<0>,144:128]
2023-09-06 20:55:15:101 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,144:132].[@-1,70:72='blk',<0>,144:138]
2023-09-06 20:55:15:101 action-translator LogManager.java:25 qattr [@-1,76:76='r',<0>,144:144].[@-1,78:81='text',<0>,144:146]
2023-09-06 20:55:15:102 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)
2023-09-06 20:55:15:102 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,148:18]
2023-09-06 20:55:15:102 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,148:51].[@-1,41:44='line',<0>,148:58]
2023-09-06 20:55:15:102 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,148:65].[@-1,55:57='pos',<0>,148:72]
2023-09-06 20:55:15:102 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)
2023-09-06 20:55:15:103 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,149:23]
2023-09-06 20:55:15:103 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,149:56].[@-1,41:44='line',<0>,149:63]
2023-09-06 20:55:15:103 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,149:70].[@-1,55:57='pos',<0>,149:77]
2023-09-06 20:55:15:103 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,149:83].[@-1,66:66='e',<0>,149:88]
2023-09-06 20:55:15:103 action-translator LogManager.java:25 translate $tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-06 20:55:15:103 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,150:20]
2023-09-06 20:55:15:103 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,150:53].[@-1,43:46='line',<0>,150:62]
2023-09-06 20:55:15:103 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,150:69].[@-1,59:61='pos',<0>,150:78]
2023-09-06 20:55:15:104 action-translator LogManager.java:25 translate $tran = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-06 20:55:15:105 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,151:17]
2023-09-06 20:55:15:105 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,151:47].[@-1,37:40='line',<0>,151:53]
2023-09-06 20:55:15:105 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,151:60].[@-1,50:52='pos',<0>,151:66]
2023-09-06 20:55:15:106 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")
2023-09-06 20:55:15:106 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,155:95]
2023-09-06 20:55:15:106 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,155:137].[@-1,47:50='line',<0>,155:141]
2023-09-06 20:55:15:106 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,155:148].[@-1,58:60='pos',<0>,155:152]
2023-09-06 20:55:15:107 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,155:158].[@-1,67:70='text',<0>,155:161]
2023-09-06 20:55:15:107 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,155:168].[@-1,79:79='t',<0>,155:173]
2023-09-06 20:55:15:107 action-translator LogManager.java:25 qattr [@-1,83:92='listParams',<0>,155:177].[@-1,94:94='l',<0>,155:188]
2023-09-06 20:55:15:107 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")
2023-09-06 20:55:15:107 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,156:84]
2023-09-06 20:55:15:108 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,156:126].[@-1,47:50='line',<0>,156:130]
2023-09-06 20:55:15:108 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,156:137].[@-1,58:60='pos',<0>,156:141]
2023-09-06 20:55:15:108 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,156:147].[@-1,67:70='text',<0>,156:150]
2023-09-06 20:55:15:108 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,156:157].[@-1,79:79='t',<0>,156:162]
2023-09-06 20:55:15:108 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)
2023-09-06 20:55:15:108 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,158:67]
2023-09-06 20:55:15:108 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,158:109].[@-1,47:50='line',<0>,158:113]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,158:120].[@-1,58:60='pos',<0>,158:124]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 qattr [@-1,64:64='F',<0>,158:130].[@-1,66:69='text',<0>,158:132]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 qattr [@-1,73:76='type',<0>,158:139].[@-1,78:78='t',<0>,158:144]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 qattr [@-1,87:87='S',<0>,158:153].[@-1,89:92='text',<0>,158:155]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 translate $accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)
2023-09-06 20:55:15:109 action-translator LogManager.java:25 attr [@-1,1:12='accessfuncin',<0>,162:38]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,162:83].[@-1,49:52='line',<0>,162:86]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,162:93].[@-1,59:61='pos',<0>,162:96]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,162:102].[@-1,68:71='text',<0>,162:105]
2023-09-06 20:55:15:109 action-translator LogManager.java:25 qattr [@-1,75:84='listParams',<0>,162:112].[@-1,86:86='l',<0>,162:123]
2023-09-06 20:55:15:110 action-translator LogManager.java:25 translate $app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-06 20:55:15:110 action-translator LogManager.java:25 attr [@-1,1:3='app',<0>,167:46]
2023-09-06 20:55:15:110 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,167:76].[@-1,34:37='line',<0>,167:79]
2023-09-06 20:55:15:110 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,167:86].[@-1,44:46='pos',<0>,167:89]
2023-09-06 20:55:15:111 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,167:95].[@-1,53:56='text',<0>,167:98]
2023-09-06 20:55:15:111 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,167:105].[@-1,65:65='e',<0>,167:110]
2023-09-06 20:55:15:112 action-translator LogManager.java:25 translate $removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-09-06 20:55:15:112 action-translator LogManager.java:25 attr [@-1,1:6='removl',<0>,171:45]
2023-09-06 20:55:15:112 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,171:82].[@-1,41:44='line',<0>,171:85]
2023-09-06 20:55:15:112 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,171:92].[@-1,51:53='pos',<0>,171:95]
2023-09-06 20:55:15:113 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,171:101].[@-1,60:63='text',<0>,171:104]
2023-09-06 20:55:15:114 action-translator LogManager.java:25 translate $remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-06 20:55:15:114 action-translator LogManager.java:25 attr [@-1,1:5='remov',<0>,176:59]
2023-09-06 20:55:15:115 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,176:91].[@-1,36:39='line',<0>,176:94]
2023-09-06 20:55:15:115 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,176:101].[@-1,46:48='pos',<0>,176:104]
2023-09-06 20:55:15:115 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,176:110].[@-1,55:58='text',<0>,176:113]
2023-09-06 20:55:15:115 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,176:120].[@-1,67:67='e',<0>,176:125]
2023-09-06 20:55:15:116 action-translator LogManager.java:25 translate $emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)
2023-09-06 20:55:15:116 action-translator LogManager.java:25 attr [@-1,1:8='emptyvec',<0>,180:21]
2023-09-06 20:55:15:117 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,180:60].[@-1,43:46='line',<0>,180:63]
2023-09-06 20:55:15:117 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,180:70].[@-1,53:55='pos',<0>,180:73]
2023-09-06 20:55:15:117 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,180:79].[@-1,62:65='text',<0>,180:82]
2023-09-06 20:55:15:117 action-translator LogManager.java:25 translate $count = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-09-06 20:55:15:117 action-translator LogManager.java:25 attr [@-1,1:5='count',<0>,184:18]
2023-09-06 20:55:15:117 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,184:48].[@-1,34:37='line',<0>,184:51]
2023-09-06 20:55:15:117 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,184:58].[@-1,44:46='pos',<0>,184:61]
2023-09-06 20:55:15:118 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,184:67].[@-1,53:56='text',<0>,184:70]
2023-09-06 20:55:15:118 action-translator LogManager.java:25 translate $accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-06 20:55:15:118 action-translator LogManager.java:25 attr [@-1,1:9='accessvec',<0>,188:35]
2023-09-06 20:55:15:118 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,188:76].[@-1,45:48='line',<0>,188:79]
2023-09-06 20:55:15:118 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,188:86].[@-1,55:57='pos',<0>,188:89]
2023-09-06 20:55:15:118 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,188:95].[@-1,64:67='text',<0>,188:98]
2023-09-06 20:55:15:118 action-translator LogManager.java:25 qattr [@-1,71:74='expr',<0>,188:105].[@-1,76:76='e',<0>,188:110]
2023-09-06 20:55:15:119 action-translator LogManager.java:25 translate $assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)
2023-09-06 20:55:15:119 action-translator LogManager.java:25 attr [@-1,1:9='assignvec',<0>,193:70]
2023-09-06 20:55:15:119 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,193:117].[@-1,51:54='line',<0>,193:120]
2023-09-06 20:55:15:119 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,193:127].[@-1,61:63='pos',<0>,193:130]
2023-09-06 20:55:15:119 action-translator LogManager.java:25 qattr [@-1,67:68='ID',<0>,193:136].[@-1,70:73='text',<0>,193:139]
2023-09-06 20:55:15:120 action-translator LogManager.java:25 qattr [@-1,77:83='expprim',<0>,193:146].[@-1,85:85='e',<0>,193:154]
2023-09-06 20:55:15:120 action-translator LogManager.java:25 qattr [@-1,89:98='expsegundo',<0>,193:158].[@-1,100:100='e',<0>,193:169]
2023-09-06 20:55:15:122 action-translator LogManager.java:25 translate $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)
2023-09-06 20:55:15:122 action-translator LogManager.java:25 attr [@-1,1:7='decfunc',<0>,203:79]
2023-09-06 20:55:15:122 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,203:124].[@-1,49:52='line',<0>,203:127]
2023-09-06 20:55:15:122 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,203:134].[@-1,59:61='pos',<0>,203:137]
2023-09-06 20:55:15:122 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,203:143].[@-1,68:71='text',<0>,203:146]
2023-09-06 20:55:15:122 action-translator LogManager.java:25 qattr [@-1,75:88='listParamsFunc',<0>,203:153].[@-1,90:91='lf',<0>,203:168]
2023-09-06 20:55:15:122 action-translator LogManager.java:25 qattr [@-1,95:98='type',<0>,203:173].[@-1,100:100='t',<0>,203:178]
2023-09-06 20:55:15:122 action-translator LogManager.java:25 qattr [@-1,104:108='block',<0>,203:182].[@-1,110:112='blk',<0>,203:188]
2023-09-06 20:55:15:123 action-translator LogManager.java:25 translate 
    
    $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2);
2023-09-06 20:55:15:123 action-translator LogManager.java:25 setAttr [@-1,13:19='decfunc',<0>,206:5] [@-1,22:137=' instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2)',<0>,206:14]
2023-09-06 20:55:15:123 action-translator LogManager.java:25 translate  instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, environment.NULL, $block.blk, 2)
2023-09-06 20:55:15:123 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,204:99].[@-1,39:42='line',<0>,204:102]
2023-09-06 20:55:15:123 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,204:109].[@-1,49:51='pos',<0>,204:112]
2023-09-06 20:55:15:123 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,204:118].[@-1,58:61='text',<0>,204:121]
2023-09-06 20:55:15:123 action-translator LogManager.java:25 qattr [@-1,65:78='listParamsFunc',<0>,204:128].[@-1,80:81='lf',<0>,204:143]
2023-09-06 20:55:15:124 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,204:166].[@-1,109:111='blk',<0>,204:172]
2023-09-06 20:55:15:124 action-translator LogManager.java:25 translate $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)
2023-09-06 20:55:15:124 action-translator LogManager.java:25 attr [@-1,1:7='decfunc',<0>,207:64]
2023-09-06 20:55:15:124 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,207:109].[@-1,49:52='line',<0>,207:112]
2023-09-06 20:55:15:125 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,207:119].[@-1,59:61='pos',<0>,207:122]
2023-09-06 20:55:15:126 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,207:128].[@-1,68:71='text',<0>,207:131]
2023-09-06 20:55:15:126 action-translator LogManager.java:25 qattr [@-1,80:83='type',<0>,207:143].[@-1,85:85='t',<0>,207:148]
2023-09-06 20:55:15:126 action-translator LogManager.java:25 qattr [@-1,89:93='block',<0>,207:152].[@-1,95:97='blk',<0>,207:158]
2023-09-06 20:55:15:126 action-translator LogManager.java:25 translate 
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }

2023-09-06 20:55:15:126 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,209:8].[@-1,16:18='blk',<0>,209:14]
2023-09-06 20:55:15:126 action-translator LogManager.java:25 attr [@-1,39:45='decfunc',<0>,210:10]
2023-09-06 20:55:15:126 action-translator LogManager.java:25 qattr [@-1,84:85='ID',<0>,210:55].[@-1,87:90='line',<0>,210:58]
2023-09-06 20:55:15:127 action-translator LogManager.java:25 qattr [@-1,94:95='ID',<0>,210:65].[@-1,97:99='pos',<0>,210:68]
2023-09-06 20:55:15:127 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,210:74].[@-1,106:109='text',<0>,210:77]
2023-09-06 20:55:15:127 action-translator LogManager.java:25 qattr [@-1,136:140='block',<0>,210:107].[@-1,142:144='blk',<0>,210:113]
2023-09-06 20:55:15:128 action-translator LogManager.java:25 translate 
2023-09-06 20:55:15:128 action-translator LogManager.java:25 translate 
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        
2023-09-06 20:55:15:128 action-translator LogManager.java:25 attr [@-1,21:22='lf',<0>,4:13]
2023-09-06 20:55:15:128 action-translator LogManager.java:25 attr [@-1,56:57='lf',<0>,5:13]
2023-09-06 20:55:15:128 action-translator LogManager.java:25 attr [@-1,69:70='lf',<0>,5:26]
2023-09-06 20:55:15:128 action-translator LogManager.java:25 qattr [@-1,74:90='parameterfuncstmt',<0>,5:31].[@-1,92:104='parameterfunc',<0>,5:49]
2023-09-06 20:55:15:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 20:55:15:129 action-translator LogManager.java:25 translate 
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      
2023-09-06 20:55:15:129 action-translator LogManager.java:25 qattr [@-1,157:161='listf',<0>,12:57].[@-1,163:164='lf',<0>,12:63]
2023-09-06 20:55:15:129 action-translator LogManager.java:25 qattr [@-1,168:184='parameterfuncstmt',<0>,12:68].[@-1,186:198='parameterfunc',<0>,12:86]
2023-09-06 20:55:15:129 action-translator LogManager.java:25 attr [@-1,245:246='lf',<0>,13:43]
2023-09-06 20:55:15:130 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 20:55:15:131 action-translator LogManager.java:25 translate $parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text, 1)
2023-09-06 20:55:15:131 action-translator LogManager.java:25 attr [@-1,1:13='parameterfunc',<0>,229:42]
2023-09-06 20:55:15:131 action-translator LogManager.java:25 qattr [@-1,44:47='exte',<0>,229:85].[@-1,49:52='line',<0>,229:90]
2023-09-06 20:55:15:131 action-translator LogManager.java:25 qattr [@-1,56:59='exte',<0>,229:97].[@-1,61:63='pos',<0>,229:102]
2023-09-06 20:55:15:131 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,229:108].[@-1,72:72='t',<0>,229:113]
2023-09-06 20:55:15:131 action-translator LogManager.java:25 qattr [@-1,76:79='exte',<0>,229:117].[@-1,81:84='text',<0>,229:122]
2023-09-06 20:55:15:131 action-translator LogManager.java:25 qattr [@-1,89:90='ID',<0>,229:130].[@-1,92:95='text',<0>,229:133]
2023-09-06 20:55:15:131 action-translator LogManager.java:25 translate 
   
    $parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2);
2023-09-06 20:55:15:131 action-translator LogManager.java:25 setAttr [@-1,12:24='parameterfunc',<0>,232:5] [@-1,27:109=' expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2)',<0>,232:20]
2023-09-06 20:55:15:132 action-translator LogManager.java:25 translate  expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text,2)
2023-09-06 20:55:15:132 action-translator LogManager.java:25 qattr [@-1,28:31='exte',<0>,230:100].[@-1,33:36='line',<0>,230:105]
2023-09-06 20:55:15:132 action-translator LogManager.java:25 qattr [@-1,40:43='exte',<0>,230:112].[@-1,45:47='pos',<0>,230:117]
2023-09-06 20:55:15:132 action-translator LogManager.java:25 qattr [@-1,51:54='type',<0>,230:123].[@-1,56:56='t',<0>,230:128]
2023-09-06 20:55:15:132 action-translator LogManager.java:25 qattr [@-1,60:63='exte',<0>,230:132].[@-1,65:68='text',<0>,230:137]
2023-09-06 20:55:15:132 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,230:145].[@-1,76:79='text',<0>,230:148]
2023-09-06 20:55:15:133 action-translator LogManager.java:25 translate  $decstruct = instructions.NewToDeclareStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStruct.l) 
2023-09-06 20:55:15:133 action-translator LogManager.java:25 attr [@-1,2:10='decstruct',<0>,236:43]
2023-09-06 20:55:15:133 action-translator LogManager.java:25 qattr [@-1,47:52='STRUCT',<0>,236:88].[@-1,54:57='line',<0>,236:95]
2023-09-06 20:55:15:133 action-translator LogManager.java:25 qattr [@-1,61:66='STRUCT',<0>,236:102].[@-1,68:70='pos',<0>,236:109]
2023-09-06 20:55:15:134 action-translator LogManager.java:25 qattr [@-1,74:75='ID',<0>,236:115].[@-1,77:80='text',<0>,236:118]
2023-09-06 20:55:15:134 action-translator LogManager.java:25 qattr [@-1,84:93='listStruct',<0>,236:125].[@-1,95:95='l',<0>,236:136]
2023-09-06 20:55:15:134 action-translator LogManager.java:25 translate 
2023-09-06 20:55:15:134 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $type.t)
                        arr = append(arr, newParams)
                        $l = arr

2023-09-06 20:55:15:134 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-09-06 20:55:15:134 action-translator LogManager.java:25 qattr [@-1,123:126='type',<0>,4:74].[@-1,128:128='t',<0>,4:79]
2023-09-06 20:55:15:134 action-translator LogManager.java:25 attr [@-1,211:211='l',<0>,6:25]
2023-09-06 20:55:15:134 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-09-06 20:55:15:134 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-09-06 20:55:15:134 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-06 20:55:15:135 action-translator LogManager.java:25 translate 
                                      var arr []interface{}
                                      newParams := environment.NewStructType($ID.text, $type.t)
                                      arr = append($list.l, newParams)
                                      $l = arr

          
2023-09-06 20:55:15:135 action-translator LogManager.java:25 qattr [@-1,141:142='ID',<0>,13:78].[@-1,144:147='text',<0>,13:81]
2023-09-06 20:55:15:135 action-translator LogManager.java:25 qattr [@-1,151:154='type',<0>,13:88].[@-1,156:156='t',<0>,13:93]
2023-09-06 20:55:15:135 action-translator LogManager.java:25 qattr [@-1,212:215='list',<0>,14:52].[@-1,217:217='l',<0>,14:57]
2023-09-06 20:55:15:135 action-translator LogManager.java:25 attr [@-1,271:271='l',<0>,15:39]
2023-09-06 20:55:15:135 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-06 20:55:15:135 action-translator LogManager.java:25 translate  $accessstruct = expressions.NewAccessStruct($list.line, $list.pos, $list.text, $ID.text)  
2023-09-06 20:55:15:136 action-translator LogManager.java:25 attr [@-1,2:13='accessstruct',<0>,258:21]
2023-09-06 20:55:15:136 action-translator LogManager.java:25 qattr [@-1,46:49='list',<0>,258:65].[@-1,51:54='line',<0>,258:70]
2023-09-06 20:55:15:136 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,258:77].[@-1,63:65='pos',<0>,258:82]
2023-09-06 20:55:15:136 action-translator LogManager.java:25 qattr [@-1,69:72='list',<0>,258:88].[@-1,74:77='text',<0>,258:93]
2023-09-06 20:55:15:136 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,258:100].[@-1,84:87='text',<0>,258:103]
2023-09-06 20:55:15:138 action-translator LogManager.java:25 translate 
2023-09-06 20:55:15:138 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-09-06 20:55:15:138 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:74]
2023-09-06 20:55:15:138 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:104].[@-1,37:41='start',<0>,2:109]
2023-09-06 20:55:15:138 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:127].[@-1,60:64='start',<0>,2:132]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:152].[@-1,85:85='e',<0>,2:157]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:161].[@-1,92:95='text',<0>,2:164]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:171].[@-1,104:104='e',<0>,2:176]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)
2023-09-06 20:55:15:139 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:71]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,3:101].[@-1,37:41='start',<0>,3:106]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,3:124].[@-1,60:64='start',<0>,3:129]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,3:149].[@-1,85:85='e',<0>,3:154]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 qattr [@-1,90:91='op',<0>,3:159].[@-1,93:96='text',<0>,3:162]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-06 20:55:15:139 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:82]
2023-09-06 20:55:15:139 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:87].[@-1,12:12='e',<0>,4:92]
2023-09-06 20:55:15:140 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-06 20:55:15:140 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-09-06 20:55:15:140 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-09-06 20:55:15:140 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-09-06 20:55:15:140 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-09-06 20:55:15:140 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-09-06 20:55:15:141 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-09-06 20:55:15:141 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-09-06 20:55:15:141 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-09-06 20:55:15:141 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-09-06 20:55:15:141 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-06 20:55:15:141 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-09-06 20:55:15:141 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-09-06 20:55:15:141 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-09-06 20:55:15:142 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-09-06 20:55:15:142 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-09-06 20:55:15:142 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:34]
2023-09-06 20:55:15:142 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,26:64].[@-1,37:40='line',<0>,26:69]
2023-09-06 20:55:15:142 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,26:76].[@-1,49:51='pos',<0>,26:81]
2023-09-06 20:55:15:142 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-09-06 20:55:15:143 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:35]
2023-09-06 20:55:15:143 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,27:65].[@-1,38:41='line',<0>,27:71]
2023-09-06 20:55:15:143 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,27:78].[@-1,51:53='pos',<0>,27:84]
2023-09-06 20:55:15:143 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-06 20:55:15:144 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:33]
2023-09-06 20:55:15:144 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,28:63].[@-1,36:39='line',<0>,28:67]
2023-09-06 20:55:15:144 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,28:74].[@-1,47:49='pos',<0>,28:78]
2023-09-06 20:55:15:145 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-09-06 20:55:15:145 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,29:39]
2023-09-06 20:55:15:145 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,29:44].[@-1,17:22='access',<0>,29:55]
2023-09-06 20:55:15:145 action-translator LogManager.java:25 translate $e = $emptvecstmt.emptyvec
2023-09-06 20:55:15:146 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,30:40]
2023-09-06 20:55:15:146 action-translator LogManager.java:25 qattr [@-1,6:16='emptvecstmt',<0>,30:45].[@-1,18:25='emptyvec',<0>,30:57]
2023-09-06 20:55:15:146 action-translator LogManager.java:25 translate $e = $countvecstmt.count
2023-09-06 20:55:15:147 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,31:41]
2023-09-06 20:55:15:147 action-translator LogManager.java:25 qattr [@-1,6:17='countvecstmt',<0>,31:46].[@-1,19:23='count',<0>,31:59]
2023-09-06 20:55:15:147 action-translator LogManager.java:25 translate $e = $accessvecstmt.accessvec
2023-09-06 20:55:15:147 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,32:42]
2023-09-06 20:55:15:148 action-translator LogManager.java:25 qattr [@-1,6:18='accessvecstmt',<0>,32:47].[@-1,20:28='accessvec',<0>,32:61]
2023-09-06 20:55:15:148 action-translator LogManager.java:25 translate $e = $intfunctionstmt.intfunc
2023-09-06 20:55:15:148 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,33:44]
2023-09-06 20:55:15:148 action-translator LogManager.java:25 qattr [@-1,6:20='intfunctionstmt',<0>,33:49].[@-1,22:28='intfunc',<0>,33:65]
2023-09-06 20:55:15:149 action-translator LogManager.java:25 translate $e = $floatfunctionstmt.floatfunc
2023-09-06 20:55:15:149 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,34:46]
2023-09-06 20:55:15:149 action-translator LogManager.java:25 qattr [@-1,6:22='floatfunctionstmt',<0>,34:51].[@-1,24:32='floatfunc',<0>,34:69]
2023-09-06 20:55:15:149 action-translator LogManager.java:25 translate $e = $stringfunctionstmt.stringfunc
2023-09-06 20:55:15:150 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,35:47]
2023-09-06 20:55:15:150 action-translator LogManager.java:25 qattr [@-1,6:23='stringfunctionstmt',<0>,35:52].[@-1,25:34='stringfunc',<0>,35:71]
2023-09-06 20:55:15:150 action-translator LogManager.java:25 translate $e = $accessfuncstmt.funcexp
2023-09-06 20:55:15:150 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,36:47]
2023-09-06 20:55:15:151 action-translator LogManager.java:25 qattr [@-1,6:19='accessfuncstmt',<0>,36:52].[@-1,21:27='funcexp',<0>,36:67]
2023-09-06 20:55:15:151 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-09-06 20:55:15:151 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:115]
2023-09-06 20:55:15:151 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,37:145].[@-1,35:38='line',<0>,37:148]
2023-09-06 20:55:15:151 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,37:155].[@-1,45:47='pos',<0>,37:158]
2023-09-06 20:55:15:151 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,37:164].[@-1,54:57='text',<0>,37:167]
2023-09-06 20:55:15:151 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,37:174].[@-1,75:75='l',<0>,37:188]
2023-09-06 20:55:15:152 action-translator LogManager.java:25 translate $e = accessstructstmt.accessstruct
2023-09-06 20:55:15:152 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,38:45]
2023-09-06 20:55:15:152 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-09-06 20:55:15:152 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-06 20:55:15:152 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:142]
2023-09-06 20:55:15:152 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:172].[@-1,37:41='start',<0>,41:177]
2023-09-06 20:55:15:152 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:195].[@-1,60:64='start',<0>,41:200]
2023-09-06 20:55:15:152 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:220].[@-1,85:85='e',<0>,41:225]
2023-09-06 20:55:15:152 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:229].[@-1,92:95='text',<0>,41:232]
2023-09-06 20:55:15:152 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:239].[@-1,105:105='e',<0>,41:245]
2023-09-06 20:55:15:152 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-09-06 20:55:15:153 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-06 20:55:15:153 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:177]
2023-09-06 20:55:15:153 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:207].[@-1,37:41='start',<0>,42:212]
2023-09-06 20:55:15:153 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:230].[@-1,60:64='start',<0>,42:235]
2023-09-06 20:55:15:153 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:255].[@-1,85:85='e',<0>,42:260]
2023-09-06 20:55:15:153 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:264].[@-1,92:95='text',<0>,42:267]
2023-09-06 20:55:15:153 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:274].[@-1,105:105='e',<0>,42:280]
2023-09-06 20:55:15:153 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-06 20:55:15:154 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-06 20:55:15:154 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:157]
2023-09-06 20:55:15:154 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:187].[@-1,37:41='start',<0>,43:192]
2023-09-06 20:55:15:154 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:210].[@-1,60:64='start',<0>,43:215]
2023-09-06 20:55:15:154 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:235].[@-1,85:85='e',<0>,43:240]
2023-09-06 20:55:15:154 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:244].[@-1,92:95='text',<0>,43:247]
2023-09-06 20:55:15:154 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:254].[@-1,105:105='e',<0>,43:260]
2023-09-06 20:55:15:155 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-06 20:55:15:155 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-06 20:55:15:155 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:157]
2023-09-06 20:55:15:155 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:187].[@-1,37:41='start',<0>,44:192]
2023-09-06 20:55:15:155 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:210].[@-1,60:64='start',<0>,44:215]
2023-09-06 20:55:15:155 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:235].[@-1,85:85='e',<0>,44:240]
2023-09-06 20:55:15:155 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:244].[@-1,92:95='text',<0>,44:247]
2023-09-06 20:55:15:155 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:254].[@-1,105:105='e',<0>,44:260]
2023-09-06 20:55:15:155 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-06 20:55:15:156 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-06 20:55:15:156 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,45:154]
2023-09-06 20:55:15:156 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,45:184].[@-1,37:41='start',<0>,45:189]
2023-09-06 20:55:15:156 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,45:207].[@-1,60:64='start',<0>,45:212]
2023-09-06 20:55:15:156 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,45:232].[@-1,85:85='e',<0>,45:237]
2023-09-06 20:55:15:156 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,45:241].[@-1,92:95='text',<0>,45:244]
2023-09-06 20:55:15:156 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,45:251].[@-1,105:105='e',<0>,45:257]
2023-09-06 20:55:15:156 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-06 20:55:15:156 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-06 20:55:15:156 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,46:129]
2023-09-06 20:55:15:156 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,46:159].[@-1,37:41='start',<0>,46:164]
2023-09-06 20:55:15:156 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,46:182].[@-1,60:64='start',<0>,46:187]
2023-09-06 20:55:15:157 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,46:207].[@-1,85:85='e',<0>,46:212]
2023-09-06 20:55:15:157 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,46:216].[@-1,92:95='text',<0>,46:219]
2023-09-06 20:55:15:157 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,46:226].[@-1,105:105='e',<0>,46:232]
2023-09-06 20:55:15:157 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-06 20:55:15:157 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-06 20:55:15:157 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,47:128]
2023-09-06 20:55:15:157 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,47:158].[@-1,37:41='start',<0>,47:163]
2023-09-06 20:55:15:158 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,47:181].[@-1,60:64='start',<0>,47:186]
2023-09-06 20:55:15:158 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,47:206].[@-1,85:85='e',<0>,47:211]
2023-09-06 20:55:15:158 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,47:215].[@-1,92:95='text',<0>,47:218]
2023-09-06 20:55:15:158 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,47:225].[@-1,105:105='e',<0>,47:231]
2023-09-06 20:55:15:158 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-09-06 20:55:15:158 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-09-06 20:55:15:158 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-06 20:55:15:158 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-06 20:55:15:158 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-06 20:55:15:158 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-06 20:55:15:158 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-06 20:55:15:159 action-translator LogManager.java:25 translate $funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)
2023-09-06 20:55:15:159 action-translator LogManager.java:25 attr [@-1,1:7='funcexp',<0>,310:31]
2023-09-06 20:55:15:159 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,310:72].[@-1,45:48='line',<0>,310:75]
2023-09-06 20:55:15:159 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,310:82].[@-1,55:57='pos',<0>,310:85]
2023-09-06 20:55:15:159 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,310:91].[@-1,64:67='text',<0>,310:94]
2023-09-06 20:55:15:159 action-translator LogManager.java:25 qattr [@-1,71:80='listParams',<0>,310:101].[@-1,82:82='l',<0>,310:112]
2023-09-06 20:55:15:159 action-translator LogManager.java:25 translate $intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)
2023-09-06 20:55:15:159 action-translator LogManager.java:25 attr [@-1,1:7='intfunc',<0>,315:27]
2023-09-06 20:55:15:159 action-translator LogManager.java:25 qattr [@-1,39:42='INTS',<0>,315:65].[@-1,44:47='line',<0>,315:70]
2023-09-06 20:55:15:159 action-translator LogManager.java:25 qattr [@-1,51:54='INTS',<0>,315:77].[@-1,56:58='pos',<0>,315:82]
2023-09-06 20:55:15:159 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,315:88].[@-1,67:67='e',<0>,315:93]
2023-09-06 20:55:15:160 action-translator LogManager.java:25 translate $floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)
2023-09-06 20:55:15:160 action-translator LogManager.java:25 attr [@-1,1:9='floatfunc',<0>,319:29]
2023-09-06 20:55:15:160 action-translator LogManager.java:25 qattr [@-1,43:48='FLOATS',<0>,319:71].[@-1,50:53='line',<0>,319:78]
2023-09-06 20:55:15:160 action-translator LogManager.java:25 qattr [@-1,57:62='FLOATS',<0>,319:85].[@-1,64:66='pos',<0>,319:92]
2023-09-06 20:55:15:160 action-translator LogManager.java:25 qattr [@-1,70:73='expr',<0>,319:98].[@-1,75:75='e',<0>,319:103]
2023-09-06 20:55:15:160 action-translator LogManager.java:25 translate $stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)
2023-09-06 20:55:15:160 action-translator LogManager.java:25 attr [@-1,1:10='stringfunc',<0>,323:30]
2023-09-06 20:55:15:160 action-translator LogManager.java:25 qattr [@-1,45:51='STRINGS',<0>,323:74].[@-1,53:56='line',<0>,323:82]
2023-09-06 20:55:15:160 action-translator LogManager.java:25 qattr [@-1,60:66='STRINGS',<0>,323:89].[@-1,68:70='pos',<0>,323:97]
2023-09-06 20:55:15:160 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,323:103].[@-1,79:79='e',<0>,323:108]
2023-09-06 20:55:15:161 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-09-06 20:55:15:161 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,329:9]
2023-09-06 20:55:15:161 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,329:41].[@-1,36:39='line',<0>,329:44]
2023-09-06 20:55:15:161 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,329:51].[@-1,46:48='pos',<0>,329:54]
2023-09-06 20:55:15:161 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,329:60].[@-1,55:58='text',<0>,329:63]
2023-09-06 20:55:15:161 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)
2023-09-06 20:55:15:161 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,334:25]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,334:78].[@-1,57:60='line',<0>,334:81]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,334:88].[@-1,67:69='pos',<0>,334:91]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,334:97].[@-1,76:79='text',<0>,334:100]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,83:88='IG_ADD',<0>,334:107].[@-1,90:93='text',<0>,334:114]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,334:121].[@-1,102:102='e',<0>,334:126]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)
2023-09-06 20:55:15:162 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,335:26]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,335:79].[@-1,57:60='line',<0>,335:82]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,335:89].[@-1,67:69='pos',<0>,335:92]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,335:98].[@-1,76:79='text',<0>,335:101]
2023-09-06 20:55:15:162 action-translator LogManager.java:25 qattr [@-1,83:88='IG_SUB',<0>,335:108].[@-1,90:93='text',<0>,335:115]
2023-09-06 20:55:15:163 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,335:122].[@-1,102:102='e',<0>,335:127]
2023-09-06 20:55:15:163 action-translator LogManager.java:25 translate $t = environment.STRING
2023-09-06 20:55:15:163 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,340:13]
2023-09-06 20:55:15:163 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-09-06 20:55:15:163 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,341:10]
2023-09-06 20:55:15:163 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-09-06 20:55:15:163 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,342:12]
2023-09-06 20:55:15:163 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-09-06 20:55:15:163 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,343:17]
2023-09-06 20:55:15:165 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-09-06 20:55:15:165 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,344:19]
2023-09-06 20:55:15:165 action-translator LogManager.java:25 translate 
2023-09-06 20:55:15:165 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-06 20:55:15:166 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-06 20:55:15:166 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-06 20:55:15:166 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-06 20:55:15:166 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-06 20:55:15:166 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 20:55:15:166 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-06 20:55:15:166 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-06 20:55:15:166 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-06 20:55:15:166 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-06 20:55:15:167 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 20:55:15:167 action-translator LogManager.java:25 translate 
2023-09-06 20:55:15:167 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-09-06 20:55:15:167 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-09-06 20:55:15:167 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-09-06 20:55:15:167 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-09-06 20:55:15:167 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-06 20:55:15:167 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-09-06 20:55:15:167 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-06 20:55:15:167 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-09-06 20:55:15:167 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-09-06 20:55:15:167 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-09-06 20:55:15:168 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-09-06 20:55:15:168 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-09-06 20:55:15:168 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-06 20:55:15:521 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-09-06 20:55:15:521 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-09-06 20:55:15:661 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-09-06 20:55:15:661 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

