2023-09-05 17:56:28:763 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE GUION_BAJO (BLOCK (ALT '_'))) (RULE AND_SIMPLE (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-05 17:56:28:892 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE CORCHETEIZQ (BLOCK (ALT '['))) (RULE CORCHETEDER (BLOCK (ALT ']'))) (RULE GUION_BAJO (BLOCK (ALT '_'))) (RULE AND_SIMPLE (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-05 17:56:31:431 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (BLOCK (ALT CONTINUE) (ALT RETURN) (ALT BREAK))) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ PARDER {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParams PARDER LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParams.l, environment.NULL, $block.blk, 2)}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT ID DOUBLEPTS (? (BLOCK (ALT INOUT))) type) (ALT (= exte (BLOCK (ALT ID) (ALT GUION_BAJO))) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text)}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ AND_SIMPLE PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })))))
2023-09-05 17:56:31:485 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ PARDER {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParams PARDER LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParams.l, environment.NULL, $block.blk, 2)}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT ID DOUBLEPTS (? (BLOCK (ALT INOUT))) type) (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text)}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ AND_SIMPLE PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })))))
2023-09-05 17:56:31:493 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}) (ALT guardstmt {$inst = $guardstmt.gua}) (ALT transferstmt {$inst = $transferstmt.tran}) (ALT declarevectorstmt {$inst = $declarevectorstmt.decvec}) (ALT appendstmt {$inst = $appendstmt.app}) (ALT removelaststmt {$inst = $removelaststmt.removl}) (ALT removestmt {$inst = $removestmt.remov}) (ALT assignationvecstmt {$inst = $assignationvecstmt.assignvec}) (ALT declarefuncstmt {$inst = $declarefuncstmt.decfunc}) (ALT accessfuncinstruction {$inst = $accessfuncinstruction.accessfuncin}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listParams PARDER (? (BLOCK (ALT PTCOMA))) { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION (? (BLOCK (ALT PTCOMA))) {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr (? (BLOCK (ALT PTCOMA))) {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {   
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH expr LLAVEIZQ DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH expr LLAVEIZQ casestmt LLAVEDER {$switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);}))) (RULE casestmt (returns interfaces.Instruction cas) (BLOCK (ALT CASE expr DOUBLEPTS block blockcases { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")}) (ALT CASE expr DOUBLEPTS (= sen block) DEFAULT DOUBLEPTS (= def block) { $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= casedef casestmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    }))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr (? (BLOCK (ALT PTCOMA))) {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE guardstmt (returns interfaces.Instruction gua) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block (= r (SET CONTINUE RETURN BREAK)) LLAVEDER {$gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)}))) (RULE transferstmt (returns interfaces.Instruction tran) (BLOCK (ALT RETURN (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)}) (ALT RETURN expr (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT CONTINUE (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT BREAK (? (BLOCK (ALT PTCOMA))) {$tran = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE declarevectorstmt (returns interfaces.Instruction decvec) (BLOCK (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ listParams CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")}) (ALT VAR ID DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG CORCHETEIZQ CORCHETEDER (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")}) (ALT VAR ID IG CORCHETEIZQ type CORCHETEDER PARIZQ PARDER (? (BLOCK (ALT PTCOMA)))) (ALT VAR (= F ID) DOUBLEPTS CORCHETEIZQ type CORCHETEDER IG (= S ID) (? (BLOCK (ALT PTCOMA))) {$decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)}))) (RULE accessfuncinstruction (returns interfaces.Instruction accessfuncin) (BLOCK (ALT ID PARIZQ PARDER {$accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text)}))) (RULE appendstmt (returns interfaces.Instruction app) (BLOCK (ALT ID POINT APPEND PARIZQ expr PARDER (? (BLOCK (ALT PTCOMA))) {$app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE removelaststmt (returns interfaces.Instruction removl) (BLOCK (ALT ID POINT REMOVELAST PARIZQ PARDER (? (BLOCK (ALT PTCOMA))) {$removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE removestmt (returns interfaces.Instruction remov) (BLOCK (ALT ID POINT REMOVE PARIZQ AT DOUBLEPTS expr PARDER (? (BLOCK (ALT PTCOMA))) {$remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE emptvecstmt (returns interfaces.Expression emptyvec) (BLOCK (ALT ID POINT ISEMPTY {$emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)}))) (RULE countvecstmt (returns interfaces.Expression count) (BLOCK (ALT ID POINT COUNT {$count = expressions.NewCount($ID.line, $ID.pos, $ID.text)}))) (RULE accessvecstmt (returns interfaces.Expression accessvec) (BLOCK (ALT ID CORCHETEIZQ expr CORCHETEDER {$accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE assignationvecstmt (returns interfaces.Instruction assignvec) (BLOCK (ALT ID CORCHETEIZQ (= expprim expr) CORCHETEDER IG (= expsegundo expr) (? (BLOCK (ALT PTCOMA))) {$assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)}))) (RULE declarematrixstmt (returns interfaces.Instruction decmatrix) (BLOCK (ALT VAR ID PARIZQ DOUBLEPTS type PARDER IG (? (BLOCK (ALT PTCOMA)))))) (RULE declarefuncstmt (returns interfaces.Instruction decfunc) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)}) (ALT FUNC ID PARIZQ listParams PARDER LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParams.l, environment.NULL, $block.blk, 2)}) (ALT FUNC ID PARIZQ PARDER SUB MAYOR type LLAVEIZQ block LLAVEDER {$decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)}) (ALT FUNC ID PARIZQ PARDER LLAVEIZQ block LLAVEDER {
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }
}))) (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (= listf listParamsFunc) COMA parameterfuncstmt {
                    
                                var arrf []interface{}
                                arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                $lf = arrf
                            }) (ALT parameterfuncstmt {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        }))) (RULE parameterfuncstmt (returns interfaces.Expression parameterfunc) (BLOCK (ALT ID DOUBLEPTS (? (BLOCK (ALT INOUT))) type) (ALT (= exte (SET ID GUION_BAJO)) ID DOUBLEPTS type {$parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text)}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}) (ALT emptvecstmt {$e = $emptvecstmt.emptyvec}) (ALT countvecstmt {$e = $countvecstmt.count}) (ALT accessvecstmt {$e = $accessvecstmt.accessvec}) (ALT intfunctionstmt {$e = $intfunctionstmt.intfunc}) (ALT floatfunctionstmt {$e = $floatfunctionstmt.floatfunc}) (ALT stringfunctionstmt {$e = $stringfunctionstmt.stringfunc}) (ALT accessfuncstmt {$e = $accessfuncstmt.funcexp}))) (RULE accessfuncstmt (returns interfaces.Expression funcexp) (BLOCK (ALT ID PARIZQ listParams PARDER {$funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)}) (ALT ID PARIZQ AND_SIMPLE PARDER))) (RULE intfunctionstmt (returns interfaces.Expression intfunc) (BLOCK (ALT INTS PARIZQ expr PARDER {$intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)}))) (RULE floatfunctionstmt (returns interfaces.Expression floatfunc) (BLOCK (ALT FLOATS PARIZQ expr PARDER {$floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)}))) (RULE stringfunctionstmt (returns interfaces.Expression stringfunc) (BLOCK (ALT STRINGS PARIZQ expr PARDER {$stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr (? (BLOCK (ALT PTCOMA))) {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })))))
2023-09-05 17:56:31:493 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-09-05 17:56:31:605 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lf]
    :   ( {} parameterfuncstmt<tokenIndex=1138> {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1130> parameterfuncstmt<tokenIndex=1132>  {
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      }
        )*
    ;
2023-09-05 17:56:31:629 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lf) (BLOCK (ALT (BLOCK (ALT {} (parameterfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1138))) {
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1130))) (parameterfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1132))) {
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      }))))))
2023-09-05 17:56:31:713 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=1327>   left=expr<tokenIndex=1331,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | op = SUB<tokenIndex=1341>  left=expr<tokenIndex=1345,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)} 
        | PARIZQ<tokenIndex=1351> expr<tokenIndex=1353> PARDER<tokenIndex=1355> { $e = $expr.e } 
        | NUMBER<tokenIndex=1361>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1367>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=1373> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=1379> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=1385> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        | accessstmt<tokenIndex=1391> {$e = $accessstmt.access} 
        | emptvecstmt<tokenIndex=1397> {$e = $emptvecstmt.emptyvec} 
        | countvecstmt<tokenIndex=1403> {$e = $countvecstmt.count} 
        | accessvecstmt<tokenIndex=1409> {$e = $accessvecstmt.accessvec} 
        | intfunctionstmt<tokenIndex=1415> {$e = $intfunctionstmt.intfunc} 
        | floatfunctionstmt<tokenIndex=1421> {$e = $floatfunctionstmt.floatfunc} 
        | stringfunctionstmt<tokenIndex=1427> {$e = $stringfunctionstmt.stringfunc} 
        | accessfuncstmt<tokenIndex=1433>     {$e = $accessfuncstmt.funcexp} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=(MUL<tokenIndex=1197>|DIV<tokenIndex=1199>) right=expr<tokenIndex=1204,p=24> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(ADD<tokenIndex=1217>|SUB<tokenIndex=1219>|PERCENT<tokenIndex=1221>) right=expr<tokenIndex=1226,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(MAY_IG<tokenIndex=1239>|MAYOR<tokenIndex=1241>) right=expr<tokenIndex=1246,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(MEN_IG<tokenIndex=1259>|MENOR<tokenIndex=1261>) right=expr<tokenIndex=1266,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(IG_IG<tokenIndex=1279>|DIF<tokenIndex=1281>) right=expr<tokenIndex=1286,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=AND<tokenIndex=1298> right=expr<tokenIndex=1302,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=OR<tokenIndex=1314> right=expr<tokenIndex=1318,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-05 17:56:31:770 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 1327)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1331) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 1341)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1345) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1351))) (expr (ELEMENT_OPTIONS (= tokenIndex 1353))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1355))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1361))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1367))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 1373))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 1379))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1385))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 1391))) {$e = $accessstmt.access}) (ALT (emptvecstmt (ELEMENT_OPTIONS (= tokenIndex 1397))) {$e = $emptvecstmt.emptyvec}) (ALT (countvecstmt (ELEMENT_OPTIONS (= tokenIndex 1403))) {$e = $countvecstmt.count}) (ALT (accessvecstmt (ELEMENT_OPTIONS (= tokenIndex 1409))) {$e = $accessvecstmt.accessvec}) (ALT (intfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1415))) {$e = $intfunctionstmt.intfunc}) (ALT (floatfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1421))) {$e = $floatfunctionstmt.floatfunc}) (ALT (stringfunctionstmt (ELEMENT_OPTIONS (= tokenIndex 1427))) {$e = $stringfunctionstmt.stringfunc}) (ALT (accessfuncstmt (ELEMENT_OPTIONS (= tokenIndex 1433))) {$e = $accessfuncstmt.funcexp})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 1197))) (DIV (ELEMENT_OPTIONS (= tokenIndex 1199))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1204) (= p 24)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1217))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1219))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 1221))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1226) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1239))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1241))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1246) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1259))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1261))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1266) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1279))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1281))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1286) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1298)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1302) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1314)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1318) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-05 17:56:31:773 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1635> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1627> expr<tokenIndex=1629> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-05 17:56:31:779 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1635))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1627))) (expr (ELEMENT_OPTIONS (= tokenIndex 1629))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-05 17:56:31:890 grammar LogManager.java:25 import STRINGS=1
2023-09-05 17:56:31:891 grammar LogManager.java:25 import INTS=2
2023-09-05 17:56:31:891 grammar LogManager.java:25 import FLOATS=3
2023-09-05 17:56:31:891 grammar LogManager.java:25 import BOOLS=4
2023-09-05 17:56:31:891 grammar LogManager.java:25 import CHARACTERS=5
2023-09-05 17:56:31:892 grammar LogManager.java:25 import VAR=6
2023-09-05 17:56:31:892 grammar LogManager.java:25 import NIL=7
2023-09-05 17:56:31:892 grammar LogManager.java:25 import TRUE=8
2023-09-05 17:56:31:892 grammar LogManager.java:25 import FALSE=9
2023-09-05 17:56:31:893 grammar LogManager.java:25 import PRINT=10
2023-09-05 17:56:31:893 grammar LogManager.java:25 import IF=11
2023-09-05 17:56:31:893 grammar LogManager.java:25 import ELSE=12
2023-09-05 17:56:31:893 grammar LogManager.java:25 import WHILE=13
2023-09-05 17:56:31:894 grammar LogManager.java:25 import LET=14
2023-09-05 17:56:31:894 grammar LogManager.java:25 import FOR=15
2023-09-05 17:56:31:894 grammar LogManager.java:25 import IN=16
2023-09-05 17:56:31:894 grammar LogManager.java:25 import SWITCH=17
2023-09-05 17:56:31:894 grammar LogManager.java:25 import CASE=18
2023-09-05 17:56:31:894 grammar LogManager.java:25 import DEFAULT=19
2023-09-05 17:56:31:894 grammar LogManager.java:25 import GUARD=20
2023-09-05 17:56:31:894 grammar LogManager.java:25 import CONTINUE=21
2023-09-05 17:56:31:894 grammar LogManager.java:25 import RETURN=22
2023-09-05 17:56:31:894 grammar LogManager.java:25 import BREAK=23
2023-09-05 17:56:31:894 grammar LogManager.java:25 import APPEND=24
2023-09-05 17:56:31:894 grammar LogManager.java:25 import REMOVELAST=25
2023-09-05 17:56:31:895 grammar LogManager.java:25 import REMOVE=26
2023-09-05 17:56:31:895 grammar LogManager.java:25 import AT=27
2023-09-05 17:56:31:895 grammar LogManager.java:25 import ISEMPTY=28
2023-09-05 17:56:31:895 grammar LogManager.java:25 import COUNT=29
2023-09-05 17:56:31:895 grammar LogManager.java:25 import FUNC=30
2023-09-05 17:56:31:895 grammar LogManager.java:25 import INOUT=31
2023-09-05 17:56:31:895 grammar LogManager.java:25 import NUMBER=32
2023-09-05 17:56:31:895 grammar LogManager.java:25 import STRING=33
2023-09-05 17:56:31:895 grammar LogManager.java:25 import ID=34
2023-09-05 17:56:31:895 grammar LogManager.java:25 import DIF=35
2023-09-05 17:56:31:895 grammar LogManager.java:25 import IG_IG=36
2023-09-05 17:56:31:895 grammar LogManager.java:25 import NOT=37
2023-09-05 17:56:31:895 grammar LogManager.java:25 import OR=38
2023-09-05 17:56:31:895 grammar LogManager.java:25 import AND=39
2023-09-05 17:56:31:896 grammar LogManager.java:25 import IG=40
2023-09-05 17:56:31:896 grammar LogManager.java:25 import IG_ADD=41
2023-09-05 17:56:31:896 grammar LogManager.java:25 import IG_SUB=42
2023-09-05 17:56:31:896 grammar LogManager.java:25 import MAY_IG=43
2023-09-05 17:56:31:896 grammar LogManager.java:25 import MEN_IG=44
2023-09-05 17:56:31:896 grammar LogManager.java:25 import MAYOR=45
2023-09-05 17:56:31:896 grammar LogManager.java:25 import MENOR=46
2023-09-05 17:56:31:896 grammar LogManager.java:25 import MUL=47
2023-09-05 17:56:31:896 grammar LogManager.java:25 import DIV=48
2023-09-05 17:56:31:896 grammar LogManager.java:25 import ADD=49
2023-09-05 17:56:31:897 grammar LogManager.java:25 import SUB=50
2023-09-05 17:56:31:897 grammar LogManager.java:25 import PERCENT=51
2023-09-05 17:56:31:897 grammar LogManager.java:25 import PARIZQ=52
2023-09-05 17:56:31:897 grammar LogManager.java:25 import PARDER=53
2023-09-05 17:56:31:897 grammar LogManager.java:25 import LLAVEIZQ=54
2023-09-05 17:56:31:897 grammar LogManager.java:25 import LLAVEDER=55
2023-09-05 17:56:31:897 grammar LogManager.java:25 import DOUBLEPTS=56
2023-09-05 17:56:31:897 grammar LogManager.java:25 import QUESTION=57
2023-09-05 17:56:31:897 grammar LogManager.java:25 import POINT=58
2023-09-05 17:56:31:897 grammar LogManager.java:25 import COMA=59
2023-09-05 17:56:31:897 grammar LogManager.java:25 import PTCOMA=60
2023-09-05 17:56:31:897 grammar LogManager.java:25 import CORCHETEIZQ=61
2023-09-05 17:56:31:897 grammar LogManager.java:25 import CORCHETEDER=62
2023-09-05 17:56:31:897 grammar LogManager.java:25 import GUION_BAJO=63
2023-09-05 17:56:31:897 grammar LogManager.java:25 import AND_SIMPLE=64
2023-09-05 17:56:31:897 grammar LogManager.java:25 import WHITESPACE=65
2023-09-05 17:56:31:898 grammar LogManager.java:25 import COMMENT=66
2023-09-05 17:56:31:898 grammar LogManager.java:25 import LINE_COMMENT=67
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'String'=1
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'Int'=2
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'Float'=3
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'Bool'=4
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'Character'=5
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'var'=6
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'nil'=7
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'true'=8
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'false'=9
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'print'=10
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'if'=11
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'else'=12
2023-09-05 17:56:31:898 grammar LogManager.java:25 import 'while'=13
2023-09-05 17:56:31:899 grammar LogManager.java:25 import 'let'=14
2023-09-05 17:56:31:899 grammar LogManager.java:25 import 'for'=15
2023-09-05 17:56:31:899 grammar LogManager.java:25 import 'in'=16
2023-09-05 17:56:31:899 grammar LogManager.java:25 import 'switch'=17
2023-09-05 17:56:31:899 grammar LogManager.java:25 import 'case'=18
2023-09-05 17:56:31:900 grammar LogManager.java:25 import 'default'=19
2023-09-05 17:56:31:900 grammar LogManager.java:25 import 'guard'=20
2023-09-05 17:56:31:900 grammar LogManager.java:25 import 'continue'=21
2023-09-05 17:56:31:900 grammar LogManager.java:25 import 'return'=22
2023-09-05 17:56:31:900 grammar LogManager.java:25 import 'break'=23
2023-09-05 17:56:31:900 grammar LogManager.java:25 import 'append'=24
2023-09-05 17:56:31:901 grammar LogManager.java:25 import 'removeLast'=25
2023-09-05 17:56:31:901 grammar LogManager.java:25 import 'remove'=26
2023-09-05 17:56:31:901 grammar LogManager.java:25 import 'at'=27
2023-09-05 17:56:31:901 grammar LogManager.java:25 import 'IsEmpty'=28
2023-09-05 17:56:31:901 grammar LogManager.java:25 import 'count'=29
2023-09-05 17:56:31:901 grammar LogManager.java:25 import 'func'=30
2023-09-05 17:56:31:901 grammar LogManager.java:25 import 'inout'=31
2023-09-05 17:56:31:901 grammar LogManager.java:25 import '!='=35
2023-09-05 17:56:31:901 grammar LogManager.java:25 import '=='=36
2023-09-05 17:56:31:901 grammar LogManager.java:25 import '!'=37
2023-09-05 17:56:31:901 grammar LogManager.java:25 import '||'=38
2023-09-05 17:56:31:902 grammar LogManager.java:25 import '&&'=39
2023-09-05 17:56:31:902 grammar LogManager.java:25 import '='=40
2023-09-05 17:56:31:902 grammar LogManager.java:25 import '+='=41
2023-09-05 17:56:31:902 grammar LogManager.java:25 import '-='=42
2023-09-05 17:56:31:902 grammar LogManager.java:25 import '>='=43
2023-09-05 17:56:31:902 grammar LogManager.java:25 import '<='=44
2023-09-05 17:56:31:903 grammar LogManager.java:25 import '>'=45
2023-09-05 17:56:31:903 grammar LogManager.java:25 import '<'=46
2023-09-05 17:56:31:903 grammar LogManager.java:25 import '*'=47
2023-09-05 17:56:31:903 grammar LogManager.java:25 import '/'=48
2023-09-05 17:56:31:903 grammar LogManager.java:25 import '+'=49
2023-09-05 17:56:31:903 grammar LogManager.java:25 import '-'=50
2023-09-05 17:56:31:903 grammar LogManager.java:25 import '%'=51
2023-09-05 17:56:31:904 grammar LogManager.java:25 import '('=52
2023-09-05 17:56:31:904 grammar LogManager.java:25 import ')'=53
2023-09-05 17:56:31:904 grammar LogManager.java:25 import '{'=54
2023-09-05 17:56:31:904 grammar LogManager.java:25 import '}'=55
2023-09-05 17:56:31:904 grammar LogManager.java:25 import ':'=56
2023-09-05 17:56:31:905 grammar LogManager.java:25 import '?'=57
2023-09-05 17:56:31:905 grammar LogManager.java:25 import '.'=58
2023-09-05 17:56:31:905 grammar LogManager.java:25 import ','=59
2023-09-05 17:56:31:905 grammar LogManager.java:25 import ';'=60
2023-09-05 17:56:31:905 grammar LogManager.java:25 import '['=61
2023-09-05 17:56:31:905 grammar LogManager.java:25 import ']'=62
2023-09-05 17:56:31:905 grammar LogManager.java:25 import '_'=63
2023-09-05 17:56:31:905 grammar LogManager.java:25 import '&'=64
2023-09-05 17:56:31:906 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, APPEND=24, REMOVELAST=25, REMOVE=26, AT=27, ISEMPTY=28, COUNT=29, FUNC=30, INOUT=31, NUMBER=32, STRING=33, ID=34, DIF=35, IG_IG=36, NOT=37, OR=38, AND=39, IG=40, IG_ADD=41, IG_SUB=42, MAY_IG=43, MEN_IG=44, MAYOR=45, MENOR=46, MUL=47, DIV=48, ADD=49, SUB=50, PERCENT=51, PARIZQ=52, PARDER=53, LLAVEIZQ=54, LLAVEDER=55, DOUBLEPTS=56, QUESTION=57, POINT=58, COMA=59, PTCOMA=60, CORCHETEIZQ=61, CORCHETEDER=62, GUION_BAJO=63, AND_SIMPLE=64, WHITESPACE=65, COMMENT=66, LINE_COMMENT=67, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, 'IsEmpty'=28, 'count'=29, 'func'=30, 'inout'=31, '!='=35, '=='=36, '!'=37, '||'=38, '&&'=39, '='=40, '+='=41, '-='=42, '>='=43, '<='=44, '>'=45, '<'=46, '*'=47, '/'=48, '+'=49, '-'=50, '%'=51, '('=52, ')'=53, '{'=54, '}'=55, ':'=56, '?'=57, '.'=58, ','=59, ';'=60, '['=61, ']'=62, '_'=63, '&'=64}
2023-09-05 17:56:31:913 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, GUARD=20, CONTINUE=21, RETURN=22, BREAK=23, APPEND=24, REMOVELAST=25, REMOVE=26, AT=27, ISEMPTY=28, COUNT=29, FUNC=30, INOUT=31, NUMBER=32, STRING=33, ID=34, DIF=35, IG_IG=36, NOT=37, OR=38, AND=39, IG=40, IG_ADD=41, IG_SUB=42, MAY_IG=43, MEN_IG=44, MAYOR=45, MENOR=46, MUL=47, DIV=48, ADD=49, SUB=50, PERCENT=51, PARIZQ=52, PARDER=53, LLAVEIZQ=54, LLAVEDER=55, DOUBLEPTS=56, QUESTION=57, POINT=58, COMA=59, PTCOMA=60, CORCHETEIZQ=61, CORCHETEDER=62, GUION_BAJO=63, AND_SIMPLE=64, WHITESPACE=65, COMMENT=66, LINE_COMMENT=67}
2023-09-05 17:56:31:916 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'guard'=20, 'continue'=21, 'return'=22, 'break'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, 'IsEmpty'=28, 'count'=29, 'func'=30, 'inout'=31, '!='=35, '=='=36, '!'=37, '||'=38, '&&'=39, '='=40, '+='=41, '-='=42, '>='=43, '<='=44, '>'=45, '<'=46, '*'=47, '/'=48, '+'=49, '-'=50, '%'=51, '('=52, ')'=53, '{'=54, '}'=55, ':'=56, '?'=57, '.'=58, ','=59, ';'=60, '['=61, ']'=62, '_'=63, '&'=64}
2023-09-05 17:56:32:092 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-05 17:56:32:094 LL1 LogManager.java:25 look=[{6, 10..11, 13..15, 17, 20..23, 30, 34}, {<EOF>, 18..19, 21..23, 55}]
2023-09-05 17:56:32:095 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:095 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-05 17:56:32:096 LL1 LogManager.java:25 look=[10, 6, 14, 34, 34, 11, 13, 15, 17, 20, {21..23}, 6, 34, 34, 34, 34, 30, 34]
2023-09-05 17:56:32:096 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:096 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-09-05 17:56:32:097 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:097 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:097 LL1 LogManager.java:25 
DECISION 3 in rule declarestmt
2023-09-05 17:56:32:098 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:098 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:099 LL1 LogManager.java:25 
DECISION 4 in rule declarestmt
2023-09-05 17:56:32:100 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:100 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:100 LL1 LogManager.java:25 
DECISION 5 in rule declarestmt
2023-09-05 17:56:32:101 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:101 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:101 LL1 LogManager.java:25 
DECISION 6 in rule declarestmt
2023-09-05 17:56:32:101 LL1 LogManager.java:25 look=[6, 6, 6]
2023-09-05 17:56:32:101 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:101 LL1 LogManager.java:25 
DECISION 7 in rule constantstmt
2023-09-05 17:56:32:102 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:102 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:102 LL1 LogManager.java:25 
DECISION 8 in rule constantstmt
2023-09-05 17:56:32:103 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:103 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:103 LL1 LogManager.java:25 
DECISION 9 in rule constantstmt
2023-09-05 17:56:32:103 LL1 LogManager.java:25 look=[14, 14]
2023-09-05 17:56:32:103 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:103 LL1 LogManager.java:25 
DECISION 10 in rule blockelifs
2023-09-05 17:56:32:107 LL1 LogManager.java:25 look=[11, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:107 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:107 LL1 LogManager.java:25 
DECISION 11 in rule ifstmt
2023-09-05 17:56:32:107 LL1 LogManager.java:25 look=[11, 11, 11]
2023-09-05 17:56:32:107 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:107 LL1 LogManager.java:25 
DECISION 12 in rule switchstmt
2023-09-05 17:56:32:107 LL1 LogManager.java:25 look=[17, 17]
2023-09-05 17:56:32:107 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:107 LL1 LogManager.java:25 
DECISION 13 in rule casestmt
2023-09-05 17:56:32:107 LL1 LogManager.java:25 look=[18, 18]
2023-09-05 17:56:32:107 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:107 LL1 LogManager.java:25 
DECISION 14 in rule blockcases
2023-09-05 17:56:32:107 LL1 LogManager.java:25 look=[18, {18, 55}]
2023-09-05 17:56:32:107 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:107 LL1 LogManager.java:25 
DECISION 15 in rule assignationstmt
2023-09-05 17:56:32:108 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:108 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:108 LL1 LogManager.java:25 
DECISION 16 in rule forstmt
2023-09-05 17:56:32:108 LL1 LogManager.java:25 look=[15, 15]
2023-09-05 17:56:32:108 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:108 LL1 LogManager.java:25 
DECISION 17 in rule transferstmt
2023-09-05 17:56:32:109 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:109 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:109 LL1 LogManager.java:25 
DECISION 18 in rule transferstmt
2023-09-05 17:56:32:110 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:110 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:110 LL1 LogManager.java:25 
DECISION 19 in rule transferstmt
2023-09-05 17:56:32:111 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:112 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:112 LL1 LogManager.java:25 
DECISION 20 in rule transferstmt
2023-09-05 17:56:32:113 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:113 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:113 LL1 LogManager.java:25 
DECISION 21 in rule transferstmt
2023-09-05 17:56:32:113 LL1 LogManager.java:25 look=[22, 22, 21, 23]
2023-09-05 17:56:32:113 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:113 LL1 LogManager.java:25 
DECISION 22 in rule declarevectorstmt
2023-09-05 17:56:32:114 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:114 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:114 LL1 LogManager.java:25 
DECISION 23 in rule declarevectorstmt
2023-09-05 17:56:32:115 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:116 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:116 LL1 LogManager.java:25 
DECISION 24 in rule declarevectorstmt
2023-09-05 17:56:32:116 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:117 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:117 LL1 LogManager.java:25 
DECISION 25 in rule declarevectorstmt
2023-09-05 17:56:32:117 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:117 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:117 LL1 LogManager.java:25 
DECISION 26 in rule declarevectorstmt
2023-09-05 17:56:32:118 LL1 LogManager.java:25 look=[6, 6, 6, 6]
2023-09-05 17:56:32:118 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:118 LL1 LogManager.java:25 
DECISION 27 in rule appendstmt
2023-09-05 17:56:32:118 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:118 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:118 LL1 LogManager.java:25 
DECISION 28 in rule removelaststmt
2023-09-05 17:56:32:119 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:119 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:119 LL1 LogManager.java:25 
DECISION 29 in rule removestmt
2023-09-05 17:56:32:120 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:120 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:120 LL1 LogManager.java:25 
DECISION 30 in rule assignationvecstmt
2023-09-05 17:56:32:120 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:120 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:120 LL1 LogManager.java:25 
DECISION 31 in rule declarematrixstmt
2023-09-05 17:56:32:120 LL1 LogManager.java:25 look=[60, <EOF>]
2023-09-05 17:56:32:120 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:120 LL1 LogManager.java:25 
DECISION 32 in rule declarefuncstmt
2023-09-05 17:56:32:120 LL1 LogManager.java:25 look=[30, 30, 30, 30]
2023-09-05 17:56:32:120 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:120 LL1 LogManager.java:25 
DECISION 33 in rule listParamsFunc
2023-09-05 17:56:32:121 LL1 LogManager.java:25 look=[null, 53]
2023-09-05 17:56:32:121 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:121 LL1 LogManager.java:25 
DECISION 34 in rule parameterfuncstmt
2023-09-05 17:56:32:121 LL1 LogManager.java:25 look=[31, {1..5}]
2023-09-05 17:56:32:121 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:121 LL1 LogManager.java:25 
DECISION 35 in rule parameterfuncstmt
2023-09-05 17:56:32:121 LL1 LogManager.java:25 look=[34, {34, 63}]
2023-09-05 17:56:32:121 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:122 LL1 LogManager.java:25 
DECISION 36 in rule expr
2023-09-05 17:56:32:123 LL1 LogManager.java:25 look=[37, 50, 52, 32, 33, 8, 9, 7, 34, 34, 34, 34, 2, 3, 1, 34]
2023-09-05 17:56:32:123 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:123 LL1 LogManager.java:25 
DECISION 37 in rule expr
2023-09-05 17:56:32:123 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-05 17:56:32:123 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:123 LL1 LogManager.java:25 
DECISION 38 in rule expr
2023-09-05 17:56:32:124 LL1 LogManager.java:25 look=[null, null]
2023-09-05 17:56:32:124 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:124 LL1 LogManager.java:25 
DECISION 39 in rule accessfuncstmt
2023-09-05 17:56:32:124 LL1 LogManager.java:25 look=[34, 34]
2023-09-05 17:56:32:125 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:125 LL1 LogManager.java:25 
DECISION 40 in rule increaseanddecreasestmt
2023-09-05 17:56:32:125 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:125 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:125 LL1 LogManager.java:25 
DECISION 41 in rule increaseanddecreasestmt
2023-09-05 17:56:32:127 LL1 LogManager.java:25 look=[60, {<EOF>, 6, 10..11, 13..15, 17..23, 30, 34, 55}]
2023-09-05 17:56:32:127 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:129 LL1 LogManager.java:25 
DECISION 42 in rule increaseanddecreasestmt
2023-09-05 17:56:32:129 LL1 LogManager.java:25 look=[34, 34]
2023-09-05 17:56:32:130 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:130 LL1 LogManager.java:25 
DECISION 43 in rule type
2023-09-05 17:56:32:131 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-09-05 17:56:32:132 LL1 LogManager.java:25 LL(1)? true
2023-09-05 17:56:32:132 LL1 LogManager.java:25 
DECISION 44 in rule listParams
2023-09-05 17:56:32:133 LL1 LogManager.java:25 look=[null, {53, 62}]
2023-09-05 17:56:32:134 LL1 LogManager.java:25 LL(1)? false
2023-09-05 17:56:32:185 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-09-05 17:56:32:223 action-translator LogManager.java:25 translate $code = $block.blk
2023-09-05 17:56:32:224 action-translator LogManager.java:25 attr [@-1,1:4='code',<0>,18:13]
2023-09-05 17:56:32:227 action-translator LogManager.java:25 qattr [@-1,9:13='block',<0>,18:21].[@-1,15:17='blk',<0>,18:27]
2023-09-05 17:56:32:229 action-translator LogManager.java:25 translate 
$blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-05 17:56:32:229 action-translator LogManager.java:25 attr [@-1,3:5='blk',<0>,23:1]
2023-09-05 17:56:32:232 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
        }
    
2023-09-05 17:56:32:232 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,30:13]
2023-09-05 17:56:32:232 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,30:27]
2023-09-05 17:56:32:238 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-05 17:56:32:240 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,37:14]
2023-09-05 17:56:32:242 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,37:22].[@-1,20:23='prnt',<0>,37:32]
2023-09-05 17:56:32:244 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-09-05 17:56:32:245 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,38:15]
2023-09-05 17:56:32:245 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,38:23].[@-1,21:23='dec',<0>,38:35]
2023-09-05 17:56:32:247 action-translator LogManager.java:25 translate $inst = $constantstmt.const
2023-09-05 17:56:32:247 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,39:16]
2023-09-05 17:56:32:248 action-translator LogManager.java:25 qattr [@-1,9:20='constantstmt',<0>,39:24].[@-1,22:26='const',<0>,39:37]
2023-09-05 17:56:32:249 action-translator LogManager.java:25 translate $inst = $assignationstmt.assign
2023-09-05 17:56:32:250 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:19]
2023-09-05 17:56:32:251 action-translator LogManager.java:25 qattr [@-1,9:23='assignationstmt',<0>,40:27].[@-1,25:30='assign',<0>,40:43]
2023-09-05 17:56:32:252 action-translator LogManager.java:25 translate $inst = $increaseanddecreasestmt.increasedecrease
2023-09-05 17:56:32:252 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,41:27]
2023-09-05 17:56:32:253 action-translator LogManager.java:25 qattr [@-1,9:31='increaseanddecreasestmt',<0>,41:35].[@-1,33:48='increasedecrease',<0>,41:59]
2023-09-05 17:56:32:254 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-09-05 17:56:32:255 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:11]
2023-09-05 17:56:32:257 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,42:19].[@-1,17:19='ift',<0>,42:26]
2023-09-05 17:56:32:259 action-translator LogManager.java:25 translate $inst = $whilestmt.while
2023-09-05 17:56:32:260 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,43:13]
2023-09-05 17:56:32:260 action-translator LogManager.java:25 qattr [@-1,9:17='whilestmt',<0>,43:21].[@-1,19:23='while',<0>,43:31]
2023-09-05 17:56:32:262 action-translator LogManager.java:25 translate $inst = $forstmt.for
2023-09-05 17:56:32:263 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,44:11]
2023-09-05 17:56:32:263 action-translator LogManager.java:25 qattr [@-1,9:15='forstmt',<0>,44:19].[@-1,17:19='for',<0>,44:27]
2023-09-05 17:56:32:267 action-translator LogManager.java:25 translate $inst = $switchstmt.switch
2023-09-05 17:56:32:269 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:14]
2023-09-05 17:56:32:269 action-translator LogManager.java:25 qattr [@-1,9:18='switchstmt',<0>,45:22].[@-1,20:25='switch',<0>,45:33]
2023-09-05 17:56:32:271 action-translator LogManager.java:25 translate $inst = $guardstmt.gua
2023-09-05 17:56:32:271 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:13]
2023-09-05 17:56:32:273 action-translator LogManager.java:25 qattr [@-1,9:17='guardstmt',<0>,46:21].[@-1,19:21='gua',<0>,46:31]
2023-09-05 17:56:32:276 action-translator LogManager.java:25 translate $inst = $transferstmt.tran
2023-09-05 17:56:32:276 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:16]
2023-09-05 17:56:32:276 action-translator LogManager.java:25 qattr [@-1,9:20='transferstmt',<0>,47:24].[@-1,22:25='tran',<0>,47:37]
2023-09-05 17:56:32:279 action-translator LogManager.java:25 translate $inst = $declarevectorstmt.decvec
2023-09-05 17:56:32:279 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:21]
2023-09-05 17:56:32:280 action-translator LogManager.java:25 qattr [@-1,9:25='declarevectorstmt',<0>,48:29].[@-1,27:32='decvec',<0>,48:47]
2023-09-05 17:56:32:282 action-translator LogManager.java:25 translate $inst = $appendstmt.app
2023-09-05 17:56:32:282 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,49:17]
2023-09-05 17:56:32:282 action-translator LogManager.java:25 qattr [@-1,9:18='appendstmt',<0>,49:25].[@-1,20:22='app',<0>,49:36]
2023-09-05 17:56:32:284 action-translator LogManager.java:25 translate $inst = $removelaststmt.removl
2023-09-05 17:56:32:286 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,50:18]
2023-09-05 17:56:32:286 action-translator LogManager.java:25 qattr [@-1,9:22='removelaststmt',<0>,50:26].[@-1,24:29='removl',<0>,50:41]
2023-09-05 17:56:32:291 action-translator LogManager.java:25 translate $inst = $removestmt.remov
2023-09-05 17:56:32:292 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,51:14]
2023-09-05 17:56:32:292 action-translator LogManager.java:25 qattr [@-1,9:18='removestmt',<0>,51:22].[@-1,20:24='remov',<0>,51:33]
2023-09-05 17:56:32:295 action-translator LogManager.java:25 translate $inst = $assignationvecstmt.assignvec
2023-09-05 17:56:32:296 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,52:22]
2023-09-05 17:56:32:296 action-translator LogManager.java:25 qattr [@-1,9:26='assignationvecstmt',<0>,52:30].[@-1,28:36='assignvec',<0>,52:49]
2023-09-05 17:56:32:298 action-translator LogManager.java:25 translate $inst = $declarefuncstmt.decfunc
2023-09-05 17:56:32:299 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,53:19]
2023-09-05 17:56:32:300 action-translator LogManager.java:25 qattr [@-1,9:23='declarefuncstmt',<0>,53:27].[@-1,25:31='decfunc',<0>,53:43]
2023-09-05 17:56:32:304 action-translator LogManager.java:25 translate $inst = $accessfuncinstruction.accessfuncin
2023-09-05 17:56:32:306 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,54:25]
2023-09-05 17:56:32:308 action-translator LogManager.java:25 qattr [@-1,9:29='accessfuncinstruction',<0>,54:33].[@-1,31:42='accessfuncin',<0>,54:55]
2023-09-05 17:56:32:313 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $listParams.l)
2023-09-05 17:56:32:315 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,58:43]
2023-09-05 17:56:32:315 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,58:73].[@-1,38:41='line',<0>,58:79]
2023-09-05 17:56:32:315 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,58:86].[@-1,51:53='pos',<0>,58:92]
2023-09-05 17:56:32:315 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,58:98].[@-1,68:68='l',<0>,58:109]
2023-09-05 17:56:32:318 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-09-05 17:56:32:318 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,63:41]
2023-09-05 17:56:32:318 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,63:74].[@-1,38:41='line',<0>,63:78]
2023-09-05 17:56:32:318 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,63:85].[@-1,49:51='pos',<0>,63:89]
2023-09-05 17:56:32:318 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,63:95].[@-1,58:61='text',<0>,63:98]
2023-09-05 17:56:32:318 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,63:105].[@-1,70:70='t',<0>,63:110]
2023-09-05 17:56:32:319 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,63:114].[@-1,79:79='e',<0>,63:119]
2023-09-05 17:56:32:319 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-09-05 17:56:32:319 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,64:26]
2023-09-05 17:56:32:320 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,64:59].[@-1,38:41='line',<0>,64:63]
2023-09-05 17:56:32:320 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,64:70].[@-1,49:51='pos',<0>,64:74]
2023-09-05 17:56:32:320 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,64:80].[@-1,58:61='text',<0>,64:83]
2023-09-05 17:56:32:321 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,64:108].[@-1,88:88='e',<0>,64:113]
2023-09-05 17:56:32:321 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)
2023-09-05 17:56:32:321 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,65:42]
2023-09-05 17:56:32:322 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,65:75].[@-1,38:41='line',<0>,65:79]
2023-09-05 17:56:32:323 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,65:86].[@-1,49:51='pos',<0>,65:90]
2023-09-05 17:56:32:324 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,65:96].[@-1,58:61='text',<0>,65:99]
2023-09-05 17:56:32:324 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,65:106].[@-1,70:70='t',<0>,65:111]
2023-09-05 17:56:32:326 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)
2023-09-05 17:56:32:327 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,69:41]
2023-09-05 17:56:32:327 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,69:76].[@-1,40:43='line',<0>,69:80]
2023-09-05 17:56:32:327 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,69:87].[@-1,51:53='pos',<0>,69:91]
2023-09-05 17:56:32:327 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,69:97].[@-1,60:63='text',<0>,69:100]
2023-09-05 17:56:32:327 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,69:107].[@-1,72:72='t',<0>,69:112]
2023-09-05 17:56:32:328 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,69:116].[@-1,81:81='e',<0>,69:121]
2023-09-05 17:56:32:329 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-09-05 17:56:32:329 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,70:26]
2023-09-05 17:56:32:329 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,70:61].[@-1,40:43='line',<0>,70:65]
2023-09-05 17:56:32:329 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,70:72].[@-1,51:53='pos',<0>,70:76]
2023-09-05 17:56:32:330 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,70:82].[@-1,60:63='text',<0>,70:85]
2023-09-05 17:56:32:330 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,70:110].[@-1,90:90='e',<0>,70:115]
2023-09-05 17:56:32:331 action-translator LogManager.java:25 translate 
$blkef = []interface{}{}
    var listifs []IIfstmtContext
    
  
2023-09-05 17:56:32:331 action-translator LogManager.java:25 attr [@-1,3:7='blkef',<0>,77:1]
2023-09-05 17:56:32:332 action-translator LogManager.java:25 translate    
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
            
        }
    
2023-09-05 17:56:32:332 action-translator LogManager.java:25 attr [@-1,114:118='blkef',<0>,86:13]
2023-09-05 17:56:32:332 action-translator LogManager.java:25 attr [@-1,130:134='blkef',<0>,86:29]
2023-09-05 17:56:32:337 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk
2023-09-05 17:56:32:337 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,93:41] [@-1,7:68=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)',<0>,93:46]
2023-09-05 17:56:32:337 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)
2023-09-05 17:56:32:338 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,93:60].[@-1,24:27='line',<0>,93:63]
2023-09-05 17:56:32:339 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,93:70].[@-1,34:36='pos',<0>,93:73]
2023-09-05 17:56:32:340 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,93:79].[@-1,45:45='e',<0>,93:84]
2023-09-05 17:56:32:340 action-translator LogManager.java:25 qattr [@-1,49:51='ifb',<0>,93:88].[@-1,53:55='blk',<0>,93:92]
2023-09-05 17:56:32:341 action-translator LogManager.java:25 attr [@-1,114:115='el',<0>,94:41]
2023-09-05 17:56:32:341 action-translator LogManager.java:25 qattr [@-1,120:122='ifb',<0>,94:47].[@-1,124:126='blk',<0>,94:51]
2023-09-05 17:56:32:342 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
                                                                                        
2023-09-05 17:56:32:342 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,95:88] [@-1,7:87=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)',<0>,95:93]
2023-09-05 17:56:32:343 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)
2023-09-05 17:56:32:343 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,95:107].[@-1,24:27='line',<0>,95:110]
2023-09-05 17:56:32:343 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,95:117].[@-1,34:36='pos',<0>,95:120]
2023-09-05 17:56:32:343 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,95:126].[@-1,45:45='e',<0>,95:131]
2023-09-05 17:56:32:344 action-translator LogManager.java:25 qattr [@-1,49:58='ifelseblck',<0>,95:135].[@-1,60:62='blk',<0>,95:146]
2023-09-05 17:56:32:345 action-translator LogManager.java:25 qattr [@-1,66:75='elseifblck',<0>,95:152].[@-1,77:79='blk',<0>,95:163]
2023-09-05 17:56:32:345 action-translator LogManager.java:25 setAttr [@-1,181:182='el',<0>,96:89] [@-1,185:200=' $ifelseblck.blk',<0>,96:93]
2023-09-05 17:56:32:345 action-translator LogManager.java:25 translate  $ifelseblck.blk
2023-09-05 17:56:32:346 action-translator LogManager.java:25 qattr [@-1,2:11='ifelseblck',<0>,95:88].[@-1,13:15='blk',<0>,95:99]
2023-09-05 17:56:32:349 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef); 
2023-09-05 17:56:32:350 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,99:59] [@-1,7:83=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)',<0>,99:64]
2023-09-05 17:56:32:352 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)
2023-09-05 17:56:32:354 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,99:78].[@-1,24:27='line',<0>,99:81]
2023-09-05 17:56:32:358 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,99:88].[@-1,34:36='pos',<0>,99:91]
2023-09-05 17:56:32:361 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,99:97].[@-1,45:45='e',<0>,99:102]
2023-09-05 17:56:32:361 action-translator LogManager.java:25 qattr [@-1,49:52='elif',<0>,99:106].[@-1,54:56='blk',<0>,99:111]
2023-09-05 17:56:32:362 action-translator LogManager.java:25 qattr [@-1,60:69='blockelifs',<0>,99:117].[@-1,71:75='blkef',<0>,99:128]
2023-09-05 17:56:32:373 action-translator LogManager.java:25 translate  $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);
2023-09-05 17:56:32:375 action-translator LogManager.java:25 setAttr [@-1,2:7='switch',<0>,103:58] [@-1,10:91=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)',<0>,103:66]
2023-09-05 17:56:32:375 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)
2023-09-05 17:56:32:376 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,103:81].[@-1,32:35='line',<0>,103:88]
2023-09-05 17:56:32:377 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,103:95].[@-1,46:48='pos',<0>,103:102]
2023-09-05 17:56:32:378 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,103:108].[@-1,57:57='e',<0>,103:113]
2023-09-05 17:56:32:379 action-translator LogManager.java:25 qattr [@-1,72:76='block',<0>,103:128].[@-1,78:80='blk',<0>,103:134]
2023-09-05 17:56:32:382 action-translator LogManager.java:25 translate $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil);
2023-09-05 17:56:32:383 action-translator LogManager.java:25 setAttr [@-1,1:6='switch',<0>,104:44] [@-1,9:92=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)',<0>,104:52]
2023-09-05 17:56:32:383 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil, $casestmt.cas, nil)
2023-09-05 17:56:32:384 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,104:68].[@-1,32:35='line',<0>,104:75]
2023-09-05 17:56:32:385 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,104:82].[@-1,46:48='pos',<0>,104:89]
2023-09-05 17:56:32:386 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,104:95].[@-1,57:57='e',<0>,104:100]
2023-09-05 17:56:32:386 action-translator LogManager.java:25 qattr [@-1,66:73='casestmt',<0>,104:109].[@-1,75:77='cas',<0>,104:118]
2023-09-05 17:56:32:397 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$block.blk, $blockcases.blkcase)
                                fmt.Println("entro")
2023-09-05 17:56:32:400 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,107:41]
2023-09-05 17:56:32:400 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,107:69].[@-1,35:38='line',<0>,107:74]
2023-09-05 17:56:32:401 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,107:80].[@-1,46:48='pos',<0>,107:85]
2023-09-05 17:56:32:401 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,107:91].[@-1,57:57='e',<0>,107:96]
2023-09-05 17:56:32:402 action-translator LogManager.java:25 qattr [@-1,60:64='block',<0>,107:99].[@-1,66:68='blk',<0>,107:105]
2023-09-05 17:56:32:403 action-translator LogManager.java:25 qattr [@-1,72:81='blockcases',<0>,107:111].[@-1,83:89='blkcase',<0>,107:122]
2023-09-05 17:56:32:407 action-translator LogManager.java:25 translate  $cas = instructions.NewCase($CASE.line,$CASE.pos, $expr.e,$sen.blk, $def.blk)
2023-09-05 17:56:32:408 action-translator LogManager.java:25 attr [@-1,2:4='cas',<0>,109:63]
2023-09-05 17:56:32:408 action-translator LogManager.java:25 qattr [@-1,30:33='CASE',<0>,109:91].[@-1,35:38='line',<0>,109:96]
2023-09-05 17:56:32:410 action-translator LogManager.java:25 qattr [@-1,41:44='CASE',<0>,109:102].[@-1,46:48='pos',<0>,109:107]
2023-09-05 17:56:32:413 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,109:113].[@-1,57:57='e',<0>,109:118]
2023-09-05 17:56:32:417 action-translator LogManager.java:25 qattr [@-1,60:62='sen',<0>,109:121].[@-1,64:66='blk',<0>,109:125]
2023-09-05 17:56:32:418 action-translator LogManager.java:25 qattr [@-1,70:72='def',<0>,109:131].[@-1,74:76='blk',<0>,109:135]
2023-09-05 17:56:32:421 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listcases []ICasestmtContext
  
2023-09-05 17:56:32:423 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,113:5]
2023-09-05 17:56:32:426 action-translator LogManager.java:25 translate 
        listcases = localctx.(*BlockcasesContext).GetCasedef()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetCas())
      
        }
    
2023-09-05 17:56:32:430 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,120:13]
2023-09-05 17:56:32:431 action-translator LogManager.java:25 attr [@-1,136:142='blkcase',<0>,120:31]
2023-09-05 17:56:32:436 action-translator LogManager.java:25 translate $assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)
2023-09-05 17:56:32:437 action-translator LogManager.java:25 attr [@-1,1:6='assign',<0>,128:22]
2023-09-05 17:56:32:437 action-translator LogManager.java:25 qattr [@-1,39:40='IG',<0>,128:60].[@-1,42:45='line',<0>,128:63]
2023-09-05 17:56:32:442 action-translator LogManager.java:25 qattr [@-1,49:50='IG',<0>,128:70].[@-1,52:54='pos',<0>,128:73]
2023-09-05 17:56:32:444 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,128:80].[@-1,62:65='text',<0>,128:83]
2023-09-05 17:56:32:445 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,128:90].[@-1,74:74='e',<0>,128:95]
2023-09-05 17:56:32:450 action-translator LogManager.java:25 translate $while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)
2023-09-05 17:56:32:451 action-translator LogManager.java:25 attr [@-1,1:5='while',<0>,132:38]
2023-09-05 17:56:32:451 action-translator LogManager.java:25 qattr [@-1,32:36='WHILE',<0>,132:69].[@-1,38:41='line',<0>,132:75]
2023-09-05 17:56:32:452 action-translator LogManager.java:25 qattr [@-1,45:49='WHILE',<0>,132:82].[@-1,51:53='pos',<0>,132:88]
2023-09-05 17:56:32:453 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,132:95].[@-1,63:63='e',<0>,132:100]
2023-09-05 17:56:32:454 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,132:104].[@-1,73:75='blk',<0>,132:110]
2023-09-05 17:56:32:460 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)
2023-09-05 17:56:32:460 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,136:43]
2023-09-05 17:56:32:461 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,136:70].[@-1,32:35='line',<0>,136:74]
2023-09-05 17:56:32:462 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,136:81].[@-1,43:45='pos',<0>,136:85]
2023-09-05 17:56:32:463 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,136:91].[@-1,52:55='text',<0>,136:94]
2023-09-05 17:56:32:465 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,136:101].[@-1,64:64='e',<0>,136:106]
2023-09-05 17:56:32:465 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,136:115].[@-1,79:81='blk',<0>,136:121]
2023-09-05 17:56:32:467 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)
2023-09-05 17:56:32:467 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,137:72]
2023-09-05 17:56:32:467 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,137:99].[@-1,32:35='line',<0>,137:103]
2023-09-05 17:56:32:467 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,137:110].[@-1,43:45='pos',<0>,137:114]
2023-09-05 17:56:32:468 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,137:120].[@-1,52:55='text',<0>,137:123]
2023-09-05 17:56:32:468 action-translator LogManager.java:25 qattr [@-1,59:63='first',<0>,137:130].[@-1,65:65='e',<0>,137:136]
2023-09-05 17:56:32:468 action-translator LogManager.java:25 qattr [@-1,69:74='second',<0>,137:140].[@-1,76:76='e',<0>,137:147]
2023-09-05 17:56:32:468 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,137:151].[@-1,86:88='blk',<0>,137:157]
2023-09-05 17:56:32:471 action-translator LogManager.java:25 translate $gua = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk, $r.text)
2023-09-05 17:56:32:471 action-translator LogManager.java:25 attr [@-1,1:3='gua',<0>,143:69]
2023-09-05 17:56:32:471 action-translator LogManager.java:25 qattr [@-1,30:34='GUARD',<0>,143:98].[@-1,36:39='line',<0>,143:104]
2023-09-05 17:56:32:473 action-translator LogManager.java:25 qattr [@-1,43:47='GUARD',<0>,143:111].[@-1,49:51='pos',<0>,143:117]
2023-09-05 17:56:32:473 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,143:123].[@-1,60:60='e',<0>,143:128]
2023-09-05 17:56:32:473 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,143:132].[@-1,70:72='blk',<0>,143:138]
2023-09-05 17:56:32:474 action-translator LogManager.java:25 qattr [@-1,76:76='r',<0>,143:144].[@-1,78:81='text',<0>,143:146]
2023-09-05 17:56:32:477 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, nil)
2023-09-05 17:56:32:477 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,147:18]
2023-09-05 17:56:32:478 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,147:51].[@-1,41:44='line',<0>,147:58]
2023-09-05 17:56:32:479 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,147:65].[@-1,55:57='pos',<0>,147:72]
2023-09-05 17:56:32:480 action-translator LogManager.java:25 translate $tran = instructions.NewReturnIn($RETURN.line, $RETURN.pos, $expr.e)
2023-09-05 17:56:32:480 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,148:23]
2023-09-05 17:56:32:480 action-translator LogManager.java:25 qattr [@-1,34:39='RETURN',<0>,148:56].[@-1,41:44='line',<0>,148:63]
2023-09-05 17:56:32:480 action-translator LogManager.java:25 qattr [@-1,48:53='RETURN',<0>,148:70].[@-1,55:57='pos',<0>,148:77]
2023-09-05 17:56:32:480 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,148:83].[@-1,66:66='e',<0>,148:88]
2023-09-05 17:56:32:481 action-translator LogManager.java:25 translate $tran = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-05 17:56:32:481 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,149:20]
2023-09-05 17:56:32:482 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,149:53].[@-1,43:46='line',<0>,149:62]
2023-09-05 17:56:32:482 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,149:69].[@-1,59:61='pos',<0>,149:78]
2023-09-05 17:56:32:483 action-translator LogManager.java:25 translate $tran = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-05 17:56:32:483 action-translator LogManager.java:25 attr [@-1,1:4='tran',<0>,150:17]
2023-09-05 17:56:32:484 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,150:47].[@-1,37:40='line',<0>,150:53]
2023-09-05 17:56:32:484 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,150:60].[@-1,50:52='pos',<0>,150:66]
2023-09-05 17:56:32:488 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, $listParams.l, "")
2023-09-05 17:56:32:488 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,154:95]
2023-09-05 17:56:32:488 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,154:137].[@-1,47:50='line',<0>,154:141]
2023-09-05 17:56:32:489 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,154:148].[@-1,58:60='pos',<0>,154:152]
2023-09-05 17:56:32:490 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,154:158].[@-1,67:70='text',<0>,154:161]
2023-09-05 17:56:32:490 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,154:168].[@-1,79:79='t',<0>,154:173]
2023-09-05 17:56:32:490 action-translator LogManager.java:25 qattr [@-1,83:92='listParams',<0>,154:177].[@-1,94:94='l',<0>,154:188]
2023-09-05 17:56:32:491 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $ID.text, $type.t, nil, "")
2023-09-05 17:56:32:492 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,155:84]
2023-09-05 17:56:32:492 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,155:126].[@-1,47:50='line',<0>,155:130]
2023-09-05 17:56:32:492 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,155:137].[@-1,58:60='pos',<0>,155:141]
2023-09-05 17:56:32:493 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,155:147].[@-1,67:70='text',<0>,155:150]
2023-09-05 17:56:32:493 action-translator LogManager.java:25 qattr [@-1,74:77='type',<0>,155:157].[@-1,79:79='t',<0>,155:162]
2023-09-05 17:56:32:494 action-translator LogManager.java:25 translate $decvec = instructions.NewToDeclareVector($VAR.line, $VAR.pos, $F.text, $type.t, nil, $S.text)
2023-09-05 17:56:32:495 action-translator LogManager.java:25 attr [@-1,1:6='decvec',<0>,157:67]
2023-09-05 17:56:32:495 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,157:109].[@-1,47:50='line',<0>,157:113]
2023-09-05 17:56:32:495 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,157:120].[@-1,58:60='pos',<0>,157:124]
2023-09-05 17:56:32:496 action-translator LogManager.java:25 qattr [@-1,64:64='F',<0>,157:130].[@-1,66:69='text',<0>,157:132]
2023-09-05 17:56:32:498 action-translator LogManager.java:25 qattr [@-1,73:76='type',<0>,157:139].[@-1,78:78='t',<0>,157:144]
2023-09-05 17:56:32:498 action-translator LogManager.java:25 qattr [@-1,87:87='S',<0>,157:153].[@-1,89:92='text',<0>,157:155]
2023-09-05 17:56:32:500 action-translator LogManager.java:25 translate $accessfuncin = instructions.NewCallFunction($ID.line, $ID.pos, $ID.text)
2023-09-05 17:56:32:501 action-translator LogManager.java:25 attr [@-1,1:12='accessfuncin',<0>,161:20]
2023-09-05 17:56:32:501 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,161:65].[@-1,49:52='line',<0>,161:68]
2023-09-05 17:56:32:503 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,161:75].[@-1,59:61='pos',<0>,161:78]
2023-09-05 17:56:32:507 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,161:84].[@-1,68:71='text',<0>,161:87]
2023-09-05 17:56:32:515 action-translator LogManager.java:25 translate $app = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-05 17:56:32:515 action-translator LogManager.java:25 attr [@-1,1:3='app',<0>,166:46]
2023-09-05 17:56:32:516 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,166:76].[@-1,34:37='line',<0>,166:79]
2023-09-05 17:56:32:518 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,166:86].[@-1,44:46='pos',<0>,166:89]
2023-09-05 17:56:32:519 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,166:95].[@-1,53:56='text',<0>,166:98]
2023-09-05 17:56:32:521 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,166:105].[@-1,65:65='e',<0>,166:110]
2023-09-05 17:56:32:531 action-translator LogManager.java:25 translate $removl = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-09-05 17:56:32:532 action-translator LogManager.java:25 attr [@-1,1:6='removl',<0>,170:45]
2023-09-05 17:56:32:534 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,170:82].[@-1,41:44='line',<0>,170:85]
2023-09-05 17:56:32:535 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,170:92].[@-1,51:53='pos',<0>,170:95]
2023-09-05 17:56:32:535 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,170:101].[@-1,60:63='text',<0>,170:104]
2023-09-05 17:56:32:552 action-translator LogManager.java:25 translate $remov = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-05 17:56:32:552 action-translator LogManager.java:25 attr [@-1,1:5='remov',<0>,175:59]
2023-09-05 17:56:32:553 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,175:91].[@-1,36:39='line',<0>,175:94]
2023-09-05 17:56:32:561 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,175:101].[@-1,46:48='pos',<0>,175:104]
2023-09-05 17:56:32:563 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,175:110].[@-1,55:58='text',<0>,175:113]
2023-09-05 17:56:32:565 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,175:120].[@-1,67:67='e',<0>,175:125]
2023-09-05 17:56:32:570 action-translator LogManager.java:25 translate $emptyvec = expressions.NewEmptyVector($ID.line, $ID.pos, $ID.text)
2023-09-05 17:56:32:571 action-translator LogManager.java:25 attr [@-1,1:8='emptyvec',<0>,179:21]
2023-09-05 17:56:32:571 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,179:60].[@-1,43:46='line',<0>,179:63]
2023-09-05 17:56:32:573 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,179:70].[@-1,53:55='pos',<0>,179:73]
2023-09-05 17:56:32:574 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,179:79].[@-1,62:65='text',<0>,179:82]
2023-09-05 17:56:32:582 action-translator LogManager.java:25 translate $count = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-09-05 17:56:32:583 action-translator LogManager.java:25 attr [@-1,1:5='count',<0>,183:18]
2023-09-05 17:56:32:584 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,183:48].[@-1,34:37='line',<0>,183:51]
2023-09-05 17:56:32:586 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,183:58].[@-1,44:46='pos',<0>,183:61]
2023-09-05 17:56:32:586 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,183:67].[@-1,53:56='text',<0>,183:70]
2023-09-05 17:56:32:593 action-translator LogManager.java:25 translate $accessvec = expressions.NewAccessVector($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-05 17:56:32:595 action-translator LogManager.java:25 attr [@-1,1:9='accessvec',<0>,187:35]
2023-09-05 17:56:32:595 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,187:76].[@-1,45:48='line',<0>,187:79]
2023-09-05 17:56:32:596 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,187:86].[@-1,55:57='pos',<0>,187:89]
2023-09-05 17:56:32:596 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,187:95].[@-1,64:67='text',<0>,187:98]
2023-09-05 17:56:32:597 action-translator LogManager.java:25 qattr [@-1,71:74='expr',<0>,187:105].[@-1,76:76='e',<0>,187:110]
2023-09-05 17:56:32:606 action-translator LogManager.java:25 translate $assignvec = instructions.NewAssignationVector($ID.line, $ID.pos, $ID.text, $expprim.e, $expsegundo.e)
2023-09-05 17:56:32:606 action-translator LogManager.java:25 attr [@-1,1:9='assignvec',<0>,191:70]
2023-09-05 17:56:32:607 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,191:117].[@-1,51:54='line',<0>,191:120]
2023-09-05 17:56:32:609 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,191:127].[@-1,61:63='pos',<0>,191:130]
2023-09-05 17:56:32:609 action-translator LogManager.java:25 qattr [@-1,67:68='ID',<0>,191:136].[@-1,70:73='text',<0>,191:139]
2023-09-05 17:56:32:610 action-translator LogManager.java:25 qattr [@-1,77:83='expprim',<0>,191:146].[@-1,85:85='e',<0>,191:154]
2023-09-05 17:56:32:610 action-translator LogManager.java:25 qattr [@-1,89:98='expsegundo',<0>,191:158].[@-1,100:100='e',<0>,191:169]
2023-09-05 17:56:32:642 action-translator LogManager.java:25 translate $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParamsFunc.lf, $type.t, $block.blk, 1)
2023-09-05 17:56:32:643 action-translator LogManager.java:25 attr [@-1,1:7='decfunc',<0>,201:79]
2023-09-05 17:56:32:643 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,201:124].[@-1,49:52='line',<0>,201:127]
2023-09-05 17:56:32:644 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,201:134].[@-1,59:61='pos',<0>,201:137]
2023-09-05 17:56:32:645 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,201:143].[@-1,68:71='text',<0>,201:146]
2023-09-05 17:56:32:645 action-translator LogManager.java:25 qattr [@-1,75:88='listParamsFunc',<0>,201:153].[@-1,90:91='lf',<0>,201:168]
2023-09-05 17:56:32:645 action-translator LogManager.java:25 qattr [@-1,95:98='type',<0>,201:173].[@-1,100:100='t',<0>,201:178]
2023-09-05 17:56:32:647 action-translator LogManager.java:25 qattr [@-1,104:108='block',<0>,201:182].[@-1,110:112='blk',<0>,201:188]
2023-09-05 17:56:32:650 action-translator LogManager.java:25 translate $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, $listParams.l, environment.NULL, $block.blk, 2)
2023-09-05 17:56:32:650 action-translator LogManager.java:25 attr [@-1,1:7='decfunc',<0>,202:60]
2023-09-05 17:56:32:651 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,202:105].[@-1,49:52='line',<0>,202:108]
2023-09-05 17:56:32:651 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,202:115].[@-1,59:61='pos',<0>,202:118]
2023-09-05 17:56:32:651 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,202:124].[@-1,68:71='text',<0>,202:127]
2023-09-05 17:56:32:652 action-translator LogManager.java:25 qattr [@-1,75:84='listParams',<0>,202:134].[@-1,86:86='l',<0>,202:145]
2023-09-05 17:56:32:652 action-translator LogManager.java:25 qattr [@-1,108:112='block',<0>,202:167].[@-1,114:116='blk',<0>,202:173]
2023-09-05 17:56:32:653 action-translator LogManager.java:25 translate $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, $type.t, $block.blk, 3)
2023-09-05 17:56:32:653 action-translator LogManager.java:25 attr [@-1,1:7='decfunc',<0>,203:64]
2023-09-05 17:56:32:653 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,203:109].[@-1,49:52='line',<0>,203:112]
2023-09-05 17:56:32:654 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,203:119].[@-1,59:61='pos',<0>,203:122]
2023-09-05 17:56:32:654 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,203:128].[@-1,68:71='text',<0>,203:131]
2023-09-05 17:56:32:654 action-translator LogManager.java:25 qattr [@-1,80:83='type',<0>,203:143].[@-1,85:85='t',<0>,203:148]
2023-09-05 17:56:32:654 action-translator LogManager.java:25 qattr [@-1,89:93='block',<0>,203:152].[@-1,95:97='blk',<0>,203:158]
2023-09-05 17:56:32:656 action-translator LogManager.java:25 translate 
    if($block.blk!=nil){ 
         $decfunc = instructions.NewToDeclareFunction($ID.line, $ID.pos, $ID.text, nil, environment.NULL, $block.blk, 4)
    }

2023-09-05 17:56:32:657 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,205:8].[@-1,16:18='blk',<0>,205:14]
2023-09-05 17:56:32:657 action-translator LogManager.java:25 attr [@-1,39:45='decfunc',<0>,206:10]
2023-09-05 17:56:32:657 action-translator LogManager.java:25 qattr [@-1,84:85='ID',<0>,206:55].[@-1,87:90='line',<0>,206:58]
2023-09-05 17:56:32:658 action-translator LogManager.java:25 qattr [@-1,94:95='ID',<0>,206:65].[@-1,97:99='pos',<0>,206:68]
2023-09-05 17:56:32:658 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,206:74].[@-1,106:109='text',<0>,206:77]
2023-09-05 17:56:32:658 action-translator LogManager.java:25 qattr [@-1,136:140='block',<0>,206:107].[@-1,142:144='blk',<0>,206:113]
2023-09-05 17:56:32:660 action-translator LogManager.java:25 translate 
2023-09-05 17:56:32:661 action-translator LogManager.java:25 translate 
    
            $lf = []interface{}{}
            $lf = append($lf, $parameterfuncstmt.parameterfunc)
        
2023-09-05 17:56:32:661 action-translator LogManager.java:25 attr [@-1,21:22='lf',<0>,4:13]
2023-09-05 17:56:32:661 action-translator LogManager.java:25 attr [@-1,56:57='lf',<0>,5:13]
2023-09-05 17:56:32:661 action-translator LogManager.java:25 attr [@-1,69:70='lf',<0>,5:26]
2023-09-05 17:56:32:661 action-translator LogManager.java:25 qattr [@-1,74:90='parameterfuncstmt',<0>,5:31].[@-1,92:104='parameterfunc',<0>,5:49]
2023-09-05 17:56:32:663 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 17:56:32:663 action-translator LogManager.java:25 translate 
                              
                                          var arrf []interface{}
                                          arrf = append($listf.lf, $parameterfuncstmt.parameterfunc)
                                          $lf = arrf
                                      
2023-09-05 17:56:32:663 action-translator LogManager.java:25 qattr [@-1,157:161='listf',<0>,12:57].[@-1,163:164='lf',<0>,12:63]
2023-09-05 17:56:32:663 action-translator LogManager.java:25 qattr [@-1,168:184='parameterfuncstmt',<0>,12:68].[@-1,186:198='parameterfunc',<0>,12:86]
2023-09-05 17:56:32:664 action-translator LogManager.java:25 attr [@-1,245:246='lf',<0>,13:43]
2023-09-05 17:56:32:667 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 17:56:32:669 action-translator LogManager.java:25 translate $parameterfunc = expressions.NewParameters($exte.line, $exte.pos, $type.t, $exte.text,  $ID.text)
2023-09-05 17:56:32:669 action-translator LogManager.java:25 attr [@-1,1:13='parameterfunc',<0>,226:43]
2023-09-05 17:56:32:670 action-translator LogManager.java:25 qattr [@-1,44:47='exte',<0>,226:86].[@-1,49:52='line',<0>,226:91]
2023-09-05 17:56:32:671 action-translator LogManager.java:25 qattr [@-1,56:59='exte',<0>,226:98].[@-1,61:63='pos',<0>,226:103]
2023-09-05 17:56:32:671 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,226:109].[@-1,72:72='t',<0>,226:114]
2023-09-05 17:56:32:671 action-translator LogManager.java:25 qattr [@-1,76:79='exte',<0>,226:118].[@-1,81:84='text',<0>,226:123]
2023-09-05 17:56:32:672 action-translator LogManager.java:25 qattr [@-1,89:90='ID',<0>,226:131].[@-1,92:95='text',<0>,226:134]
2023-09-05 17:56:32:678 action-translator LogManager.java:25 translate 
2023-09-05 17:56:32:678 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-09-05 17:56:32:678 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:74]
2023-09-05 17:56:32:678 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:104].[@-1,37:41='start',<0>,2:109]
2023-09-05 17:56:32:680 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:127].[@-1,60:64='start',<0>,2:132]
2023-09-05 17:56:32:681 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:152].[@-1,85:85='e',<0>,2:157]
2023-09-05 17:56:32:681 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:161].[@-1,92:95='text',<0>,2:164]
2023-09-05 17:56:32:682 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:171].[@-1,104:104='e',<0>,2:176]
2023-09-05 17:56:32:683 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)
2023-09-05 17:56:32:683 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:71]
2023-09-05 17:56:32:684 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,3:101].[@-1,37:41='start',<0>,3:106]
2023-09-05 17:56:32:684 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,3:124].[@-1,60:64='start',<0>,3:129]
2023-09-05 17:56:32:686 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,3:149].[@-1,85:85='e',<0>,3:154]
2023-09-05 17:56:32:687 action-translator LogManager.java:25 qattr [@-1,90:91='op',<0>,3:159].[@-1,93:96='text',<0>,3:162]
2023-09-05 17:56:32:689 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-05 17:56:32:690 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:82]
2023-09-05 17:56:32:690 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:87].[@-1,12:12='e',<0>,4:92]
2023-09-05 17:56:32:691 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-05 17:56:32:692 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-09-05 17:56:32:693 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-09-05 17:56:32:694 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-09-05 17:56:32:695 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-09-05 17:56:32:696 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-09-05 17:56:32:697 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-09-05 17:56:32:698 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-09-05 17:56:32:700 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-09-05 17:56:32:701 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-09-05 17:56:32:704 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-05 17:56:32:709 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-09-05 17:56:32:710 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-09-05 17:56:32:710 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-09-05 17:56:32:711 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-09-05 17:56:32:712 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-09-05 17:56:32:712 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:34]
2023-09-05 17:56:32:713 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,26:64].[@-1,37:40='line',<0>,26:69]
2023-09-05 17:56:32:714 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,26:76].[@-1,49:51='pos',<0>,26:81]
2023-09-05 17:56:32:715 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-09-05 17:56:32:716 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:35]
2023-09-05 17:56:32:716 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,27:65].[@-1,38:41='line',<0>,27:71]
2023-09-05 17:56:32:716 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,27:78].[@-1,51:53='pos',<0>,27:84]
2023-09-05 17:56:32:717 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-05 17:56:32:718 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:33]
2023-09-05 17:56:32:718 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,28:63].[@-1,36:39='line',<0>,28:67]
2023-09-05 17:56:32:718 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,28:74].[@-1,47:49='pos',<0>,28:78]
2023-09-05 17:56:32:719 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-09-05 17:56:32:719 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,29:39]
2023-09-05 17:56:32:719 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,29:44].[@-1,17:22='access',<0>,29:55]
2023-09-05 17:56:32:719 action-translator LogManager.java:25 translate $e = $emptvecstmt.emptyvec
2023-09-05 17:56:32:720 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,30:40]
2023-09-05 17:56:32:720 action-translator LogManager.java:25 qattr [@-1,6:16='emptvecstmt',<0>,30:45].[@-1,18:25='emptyvec',<0>,30:57]
2023-09-05 17:56:32:720 action-translator LogManager.java:25 translate $e = $countvecstmt.count
2023-09-05 17:56:32:720 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,31:41]
2023-09-05 17:56:32:722 action-translator LogManager.java:25 qattr [@-1,6:17='countvecstmt',<0>,31:46].[@-1,19:23='count',<0>,31:59]
2023-09-05 17:56:32:723 action-translator LogManager.java:25 translate $e = $accessvecstmt.accessvec
2023-09-05 17:56:32:723 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,32:42]
2023-09-05 17:56:32:724 action-translator LogManager.java:25 qattr [@-1,6:18='accessvecstmt',<0>,32:47].[@-1,20:28='accessvec',<0>,32:61]
2023-09-05 17:56:32:724 action-translator LogManager.java:25 translate $e = $intfunctionstmt.intfunc
2023-09-05 17:56:32:724 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,33:44]
2023-09-05 17:56:32:724 action-translator LogManager.java:25 qattr [@-1,6:20='intfunctionstmt',<0>,33:49].[@-1,22:28='intfunc',<0>,33:65]
2023-09-05 17:56:32:726 action-translator LogManager.java:25 translate $e = $floatfunctionstmt.floatfunc
2023-09-05 17:56:32:726 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,34:46]
2023-09-05 17:56:32:726 action-translator LogManager.java:25 qattr [@-1,6:22='floatfunctionstmt',<0>,34:51].[@-1,24:32='floatfunc',<0>,34:69]
2023-09-05 17:56:32:726 action-translator LogManager.java:25 translate $e = $stringfunctionstmt.stringfunc
2023-09-05 17:56:32:726 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,35:47]
2023-09-05 17:56:32:726 action-translator LogManager.java:25 qattr [@-1,6:23='stringfunctionstmt',<0>,35:52].[@-1,25:34='stringfunc',<0>,35:71]
2023-09-05 17:56:32:727 action-translator LogManager.java:25 translate $e = $accessfuncstmt.funcexp
2023-09-05 17:56:32:727 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,36:47]
2023-09-05 17:56:32:727 action-translator LogManager.java:25 qattr [@-1,6:19='accessfuncstmt',<0>,36:52].[@-1,21:27='funcexp',<0>,36:67]
2023-09-05 17:56:32:727 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-05 17:56:32:727 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 17:56:32:728 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:142]
2023-09-05 17:56:32:728 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:172].[@-1,37:41='start',<0>,39:177]
2023-09-05 17:56:32:728 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:195].[@-1,60:64='start',<0>,39:200]
2023-09-05 17:56:32:728 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:220].[@-1,85:85='e',<0>,39:225]
2023-09-05 17:56:32:728 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:229].[@-1,92:95='text',<0>,39:232]
2023-09-05 17:56:32:728 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:239].[@-1,105:105='e',<0>,39:245]
2023-09-05 17:56:32:728 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-05 17:56:32:728 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 17:56:32:729 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:177]
2023-09-05 17:56:32:729 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:207].[@-1,37:41='start',<0>,40:212]
2023-09-05 17:56:32:729 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:230].[@-1,60:64='start',<0>,40:235]
2023-09-05 17:56:32:729 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:255].[@-1,85:85='e',<0>,40:260]
2023-09-05 17:56:32:729 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:264].[@-1,92:95='text',<0>,40:267]
2023-09-05 17:56:32:729 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:274].[@-1,105:105='e',<0>,40:280]
2023-09-05 17:56:32:729 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-05 17:56:32:730 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 17:56:32:730 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:157]
2023-09-05 17:56:32:730 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:187].[@-1,37:41='start',<0>,41:192]
2023-09-05 17:56:32:731 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:210].[@-1,60:64='start',<0>,41:215]
2023-09-05 17:56:32:731 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:235].[@-1,85:85='e',<0>,41:240]
2023-09-05 17:56:32:731 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:244].[@-1,92:95='text',<0>,41:247]
2023-09-05 17:56:32:732 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:254].[@-1,105:105='e',<0>,41:260]
2023-09-05 17:56:32:732 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-05 17:56:32:733 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 17:56:32:733 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:157]
2023-09-05 17:56:32:733 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:187].[@-1,37:41='start',<0>,42:192]
2023-09-05 17:56:32:734 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:210].[@-1,60:64='start',<0>,42:215]
2023-09-05 17:56:32:734 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:235].[@-1,85:85='e',<0>,42:240]
2023-09-05 17:56:32:734 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:244].[@-1,92:95='text',<0>,42:247]
2023-09-05 17:56:32:734 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:254].[@-1,105:105='e',<0>,42:260]
2023-09-05 17:56:32:735 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-05 17:56:32:735 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 17:56:32:735 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:154]
2023-09-05 17:56:32:736 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:184].[@-1,37:41='start',<0>,43:189]
2023-09-05 17:56:32:736 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:207].[@-1,60:64='start',<0>,43:212]
2023-09-05 17:56:32:737 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:232].[@-1,85:85='e',<0>,43:237]
2023-09-05 17:56:32:738 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:241].[@-1,92:95='text',<0>,43:244]
2023-09-05 17:56:32:738 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:251].[@-1,105:105='e',<0>,43:257]
2023-09-05 17:56:32:739 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-05 17:56:32:739 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 17:56:32:739 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:129]
2023-09-05 17:56:32:739 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:159].[@-1,37:41='start',<0>,44:164]
2023-09-05 17:56:32:739 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:182].[@-1,60:64='start',<0>,44:187]
2023-09-05 17:56:32:740 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:207].[@-1,85:85='e',<0>,44:212]
2023-09-05 17:56:32:740 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:216].[@-1,92:95='text',<0>,44:219]
2023-09-05 17:56:32:740 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:226].[@-1,105:105='e',<0>,44:232]
2023-09-05 17:56:32:741 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-05 17:56:32:741 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 17:56:32:741 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,45:128]
2023-09-05 17:56:32:741 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,45:158].[@-1,37:41='start',<0>,45:163]
2023-09-05 17:56:32:742 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,45:181].[@-1,60:64='start',<0>,45:186]
2023-09-05 17:56:32:742 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,45:206].[@-1,85:85='e',<0>,45:211]
2023-09-05 17:56:32:742 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,45:215].[@-1,92:95='text',<0>,45:218]
2023-09-05 17:56:32:742 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,45:225].[@-1,105:105='e',<0>,45:231]
2023-09-05 17:56:32:742 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-05 17:56:32:742 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-05 17:56:32:743 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-05 17:56:32:743 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-05 17:56:32:743 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-05 17:56:32:743 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-05 17:56:32:743 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-05 17:56:32:747 action-translator LogManager.java:25 translate $funcexp = expressions.NewAccessFunction($ID.line, $ID.pos, $ID.text, $listParams.l, 1)
2023-09-05 17:56:32:747 action-translator LogManager.java:25 attr [@-1,1:7='funcexp',<0>,276:31]
2023-09-05 17:56:32:748 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,276:72].[@-1,45:48='line',<0>,276:75]
2023-09-05 17:56:32:748 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,276:82].[@-1,55:57='pos',<0>,276:85]
2023-09-05 17:56:32:748 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,276:91].[@-1,64:67='text',<0>,276:94]
2023-09-05 17:56:32:749 action-translator LogManager.java:25 qattr [@-1,71:80='listParams',<0>,276:101].[@-1,82:82='l',<0>,276:112]
2023-09-05 17:56:32:751 action-translator LogManager.java:25 translate $intfunc = expressions.NewFunctionInt($INTS.line, $INTS.pos, $expr.e)
2023-09-05 17:56:32:752 action-translator LogManager.java:25 attr [@-1,1:7='intfunc',<0>,281:27]
2023-09-05 17:56:32:752 action-translator LogManager.java:25 qattr [@-1,39:42='INTS',<0>,281:65].[@-1,44:47='line',<0>,281:70]
2023-09-05 17:56:32:752 action-translator LogManager.java:25 qattr [@-1,51:54='INTS',<0>,281:77].[@-1,56:58='pos',<0>,281:82]
2023-09-05 17:56:32:752 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,281:88].[@-1,67:67='e',<0>,281:93]
2023-09-05 17:56:32:756 action-translator LogManager.java:25 translate $floatfunc = expressions.NewFunctionFloat($FLOATS.line, $FLOATS.pos, $expr.e)
2023-09-05 17:56:32:757 action-translator LogManager.java:25 attr [@-1,1:9='floatfunc',<0>,285:29]
2023-09-05 17:56:32:757 action-translator LogManager.java:25 qattr [@-1,43:48='FLOATS',<0>,285:71].[@-1,50:53='line',<0>,285:78]
2023-09-05 17:56:32:758 action-translator LogManager.java:25 qattr [@-1,57:62='FLOATS',<0>,285:85].[@-1,64:66='pos',<0>,285:92]
2023-09-05 17:56:32:760 action-translator LogManager.java:25 qattr [@-1,70:73='expr',<0>,285:98].[@-1,75:75='e',<0>,285:103]
2023-09-05 17:56:32:763 action-translator LogManager.java:25 translate $stringfunc = expressions.NewFunctionString($STRINGS.line, $STRINGS.pos, $expr.e)
2023-09-05 17:56:32:763 action-translator LogManager.java:25 attr [@-1,1:10='stringfunc',<0>,289:30]
2023-09-05 17:56:32:765 action-translator LogManager.java:25 qattr [@-1,45:51='STRINGS',<0>,289:74].[@-1,53:56='line',<0>,289:82]
2023-09-05 17:56:32:765 action-translator LogManager.java:25 qattr [@-1,60:66='STRINGS',<0>,289:89].[@-1,68:70='pos',<0>,289:97]
2023-09-05 17:56:32:765 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,289:103].[@-1,79:79='e',<0>,289:108]
2023-09-05 17:56:32:768 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-09-05 17:56:32:769 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,295:9]
2023-09-05 17:56:32:770 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,295:41].[@-1,36:39='line',<0>,295:44]
2023-09-05 17:56:32:771 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,295:51].[@-1,46:48='pos',<0>,295:54]
2023-09-05 17:56:32:771 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,295:60].[@-1,55:58='text',<0>,295:63]
2023-09-05 17:56:32:777 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)
2023-09-05 17:56:32:777 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,299:25]
2023-09-05 17:56:32:779 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,299:78].[@-1,57:60='line',<0>,299:81]
2023-09-05 17:56:32:779 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,299:88].[@-1,67:69='pos',<0>,299:91]
2023-09-05 17:56:32:780 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,299:97].[@-1,76:79='text',<0>,299:100]
2023-09-05 17:56:32:780 action-translator LogManager.java:25 qattr [@-1,83:88='IG_ADD',<0>,299:107].[@-1,90:93='text',<0>,299:114]
2023-09-05 17:56:32:781 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,299:121].[@-1,102:102='e',<0>,299:126]
2023-09-05 17:56:32:783 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)
2023-09-05 17:56:32:785 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,300:26]
2023-09-05 17:56:32:786 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,300:79].[@-1,57:60='line',<0>,300:82]
2023-09-05 17:56:32:786 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,300:89].[@-1,67:69='pos',<0>,300:92]
2023-09-05 17:56:32:787 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,300:98].[@-1,76:79='text',<0>,300:101]
2023-09-05 17:56:32:787 action-translator LogManager.java:25 qattr [@-1,83:88='IG_SUB',<0>,300:108].[@-1,90:93='text',<0>,300:115]
2023-09-05 17:56:32:788 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,300:122].[@-1,102:102='e',<0>,300:127]
2023-09-05 17:56:32:791 action-translator LogManager.java:25 translate $t = environment.STRING
2023-09-05 17:56:32:792 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,305:13]
2023-09-05 17:56:32:793 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-09-05 17:56:32:794 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,306:10]
2023-09-05 17:56:32:795 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-09-05 17:56:32:796 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,307:12]
2023-09-05 17:56:32:797 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-09-05 17:56:32:798 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,308:17]
2023-09-05 17:56:32:799 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-09-05 17:56:32:800 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,309:19]
2023-09-05 17:56:32:804 action-translator LogManager.java:25 translate 
2023-09-05 17:56:32:805 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-05 17:56:32:806 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-05 17:56:32:806 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-05 17:56:32:808 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-05 17:56:32:809 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-05 17:56:32:810 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 17:56:32:812 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-05 17:56:32:812 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-05 17:56:32:813 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-05 17:56:32:813 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-05 17:56:32:815 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 17:56:34:344 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-09-05 17:56:34:344 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-09-05 17:56:34:927 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-09-05 17:56:34:927 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

