2023-08-16 20:58:00:998 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-16 20:58:01:014 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-16 20:58:01:365 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT ifstmt { $inst = $ifstmt.ift }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ (= left expr) PARDER LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    })))))
2023-08-16 20:58:01:367 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT ifstmt { $inst = $ifstmt.ift }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ (= left expr) PARDER LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    })))))
2023-08-16 20:58:01:367 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT ifstmt { $inst = $ifstmt.ift }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr) (ALT VAR ID DOUBLEPTS type QUESTION))) (RULE constantstmt (BLOCK (ALT LET ID DOUBLEPTS type IG expr) (ALT LET ID IG expr))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ (= left expr) PARDER LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER}))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    })))))
2023-08-16 20:58:01:367 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-16 20:58:01:391 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=436>   left=expr<tokenIndex=440,p=7> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | PARIZQ<tokenIndex=446> expr<tokenIndex=448> PARDER<tokenIndex=450> { $e = $expr.e } 
        | NUMBER<tokenIndex=456>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=462>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=468> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=474> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | accessstmt<tokenIndex=480> {$e = $accessstmt.access} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MUL<tokenIndex=306>|DIV<tokenIndex=308>) right=expr<tokenIndex=313,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(ADD<tokenIndex=326>|SUB<tokenIndex=328>|PERCENT<tokenIndex=330>) right=expr<tokenIndex=335,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAY_IG<tokenIndex=348>|MAYOR<tokenIndex=350>) right=expr<tokenIndex=355,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MEN_IG<tokenIndex=368>|MENOR<tokenIndex=370>) right=expr<tokenIndex=375,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=388>|DIF<tokenIndex=390>) right=expr<tokenIndex=395,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=AND<tokenIndex=407> right=expr<tokenIndex=411,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=OR<tokenIndex=423> right=expr<tokenIndex=427,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-16 20:58:01:409 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 436)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 440) (= p 7)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 446))) (expr (ELEMENT_OPTIONS (= tokenIndex 448))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 450))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 456))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 462))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 468))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 474))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 480))) {$e = $accessstmt.access})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 306))) (DIV (ELEMENT_OPTIONS (= tokenIndex 308))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 313) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 326))) (SUB (ELEMENT_OPTIONS (= tokenIndex 328))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 330))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 335) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 348))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 350))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 355) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 368))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 370))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 375) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 388))) (DIF (ELEMENT_OPTIONS (= tokenIndex 390))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 395) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 407)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 411) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 423)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 427) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-16 20:58:01:417 grammar LogManager.java:25 import STRINGS=1
2023-08-16 20:58:01:417 grammar LogManager.java:25 import INTS=2
2023-08-16 20:58:01:417 grammar LogManager.java:25 import FLOATS=3
2023-08-16 20:58:01:417 grammar LogManager.java:25 import BOOLS=4
2023-08-16 20:58:01:417 grammar LogManager.java:25 import CHARACTERS=5
2023-08-16 20:58:01:417 grammar LogManager.java:25 import VAR=6
2023-08-16 20:58:01:417 grammar LogManager.java:25 import NIL=7
2023-08-16 20:58:01:417 grammar LogManager.java:25 import TRUE=8
2023-08-16 20:58:01:417 grammar LogManager.java:25 import FALSE=9
2023-08-16 20:58:01:417 grammar LogManager.java:25 import PRINT=10
2023-08-16 20:58:01:417 grammar LogManager.java:25 import IF=11
2023-08-16 20:58:01:417 grammar LogManager.java:25 import ELSE=12
2023-08-16 20:58:01:417 grammar LogManager.java:25 import WHILE=13
2023-08-16 20:58:01:417 grammar LogManager.java:25 import LET=14
2023-08-16 20:58:01:417 grammar LogManager.java:25 import FOR=15
2023-08-16 20:58:01:417 grammar LogManager.java:25 import IN=16
2023-08-16 20:58:01:417 grammar LogManager.java:25 import NUMBER=17
2023-08-16 20:58:01:417 grammar LogManager.java:25 import STRING=18
2023-08-16 20:58:01:417 grammar LogManager.java:25 import ID=19
2023-08-16 20:58:01:417 grammar LogManager.java:25 import DIF=20
2023-08-16 20:58:01:417 grammar LogManager.java:25 import IG_IG=21
2023-08-16 20:58:01:417 grammar LogManager.java:25 import NOT=22
2023-08-16 20:58:01:417 grammar LogManager.java:25 import OR=23
2023-08-16 20:58:01:417 grammar LogManager.java:25 import AND=24
2023-08-16 20:58:01:417 grammar LogManager.java:25 import IG=25
2023-08-16 20:58:01:417 grammar LogManager.java:25 import MAY_IG=26
2023-08-16 20:58:01:417 grammar LogManager.java:25 import MEN_IG=27
2023-08-16 20:58:01:417 grammar LogManager.java:25 import MAYOR=28
2023-08-16 20:58:01:417 grammar LogManager.java:25 import MENOR=29
2023-08-16 20:58:01:417 grammar LogManager.java:25 import MUL=30
2023-08-16 20:58:01:417 grammar LogManager.java:25 import DIV=31
2023-08-16 20:58:01:417 grammar LogManager.java:25 import ADD=32
2023-08-16 20:58:01:417 grammar LogManager.java:25 import SUB=33
2023-08-16 20:58:01:417 grammar LogManager.java:25 import PERCENT=34
2023-08-16 20:58:01:417 grammar LogManager.java:25 import PARIZQ=35
2023-08-16 20:58:01:417 grammar LogManager.java:25 import PARDER=36
2023-08-16 20:58:01:417 grammar LogManager.java:25 import LLAVEIZQ=37
2023-08-16 20:58:01:417 grammar LogManager.java:25 import LLAVEDER=38
2023-08-16 20:58:01:417 grammar LogManager.java:25 import DOUBLEPTS=39
2023-08-16 20:58:01:417 grammar LogManager.java:25 import QUESTION=40
2023-08-16 20:58:01:417 grammar LogManager.java:25 import WHITESPACE=41
2023-08-16 20:58:01:417 grammar LogManager.java:25 import COMMENT=42
2023-08-16 20:58:01:417 grammar LogManager.java:25 import LINE_COMMENT=43
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'String'=1
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'Int'=2
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'Float'=3
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'Bool'=4
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'Character'=5
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'var'=6
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'nil'=7
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'true'=8
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'false'=9
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'print'=10
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'if'=11
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'else'=12
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'while'=13
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'let'=14
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'for'=15
2023-08-16 20:58:01:417 grammar LogManager.java:25 import 'in'=16
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '!='=20
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '=='=21
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '!'=22
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '||'=23
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '&&'=24
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '='=25
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '>='=26
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '<='=27
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '>'=28
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '<'=29
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '*'=30
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '/'=31
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '+'=32
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '-'=33
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '%'=34
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '('=35
2023-08-16 20:58:01:417 grammar LogManager.java:25 import ')'=36
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '{'=37
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '}'=38
2023-08-16 20:58:01:417 grammar LogManager.java:25 import ':'=39
2023-08-16 20:58:01:417 grammar LogManager.java:25 import '?'=40
2023-08-16 20:58:01:417 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, NUMBER=17, STRING=18, ID=19, DIF=20, IG_IG=21, NOT=22, OR=23, AND=24, IG=25, MAY_IG=26, MEN_IG=27, MAYOR=28, MENOR=29, MUL=30, DIV=31, ADD=32, SUB=33, PERCENT=34, PARIZQ=35, PARDER=36, LLAVEIZQ=37, LLAVEDER=38, DOUBLEPTS=39, QUESTION=40, WHITESPACE=41, COMMENT=42, LINE_COMMENT=43, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, '!='=20, '=='=21, '!'=22, '||'=23, '&&'=24, '='=25, '>='=26, '<='=27, '>'=28, '<'=29, '*'=30, '/'=31, '+'=32, '-'=33, '%'=34, '('=35, ')'=36, '{'=37, '}'=38, ':'=39, '?'=40}
2023-08-16 20:58:01:417 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, NUMBER=17, STRING=18, ID=19, DIF=20, IG_IG=21, NOT=22, OR=23, AND=24, IG=25, MAY_IG=26, MEN_IG=27, MAYOR=28, MENOR=29, MUL=30, DIV=31, ADD=32, SUB=33, PERCENT=34, PARIZQ=35, PARDER=36, LLAVEIZQ=37, LLAVEDER=38, DOUBLEPTS=39, QUESTION=40, WHITESPACE=41, COMMENT=42, LINE_COMMENT=43}
2023-08-16 20:58:01:417 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, '!='=20, '=='=21, '!'=22, '||'=23, '&&'=24, '='=25, '>='=26, '<='=27, '>'=28, '<'=29, '*'=30, '/'=31, '+'=32, '-'=33, '%'=34, '('=35, ')'=36, '{'=37, '}'=38, ':'=39, '?'=40}
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 0 in rule instruction
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[10, 6, 11]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? true
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 1 in rule declarestmt
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[6, 6, 6]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? false
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 2 in rule constantstmt
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[14, 14]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? false
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? false
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[22, 35, 17, 18, 8, 9, 19]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? true
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? false
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[null, null]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? false
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 7 in rule type
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? true
2023-08-16 20:58:01:442 LL1 LogManager.java:25 
DECISION 8 in rule block
2023-08-16 20:58:01:442 LL1 LogManager.java:25 look=[{6, 10..11}, {<EOF>, 38}]
2023-08-16 20:58:01:442 LL1 LogManager.java:25 LL(1)? true
2023-08-16 20:58:01:450 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-16 20:58:01:483 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-16 20:58:01:483 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-16 20:58:01:483 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,26:14]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,26:22].[@-1,20:23='prnt',<0>,26:32]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-08-16 20:58:01:483 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,27:15]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,27:23].[@-1,21:23='dec',<0>,27:35]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-08-16 20:58:01:483 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,28:11]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,28:19].[@-1,17:19='ift',<0>,28:26]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)
2023-08-16 20:58:01:483 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,32:29]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,32:59].[@-1,38:41='line',<0>,32:65]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,32:72].[@-1,51:53='pos',<0>,32:78]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,57:60='expr',<0>,32:84].[@-1,62:62='e',<0>,32:89]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-08-16 20:58:01:483 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,37:33]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,37:66].[@-1,38:41='line',<0>,37:70]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,37:77].[@-1,49:51='pos',<0>,37:81]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,37:87].[@-1,58:61='text',<0>,37:90]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,37:97].[@-1,70:70='t',<0>,37:102]
2023-08-16 20:58:01:483 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,37:106].[@-1,79:79='e',<0>,37:111]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-08-16 20:58:01:491 action-translator LogManager.java:25 attr [@-1,2:4='ift',<0>,49:55]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,28:29='IF',<0>,49:81].[@-1,31:34='line',<0>,49:84]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,38:39='IF',<0>,49:91].[@-1,41:43='pos',<0>,49:94]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,49:100].[@-1,52:52='e',<0>,49:105]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,56:60='block',<0>,49:109].[@-1,62:64='blk',<0>,49:115]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 translate 
2023-08-16 20:58:01:491 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-08-16 20:58:01:491 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:71]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:101].[@-1,37:41='start',<0>,2:106]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:124].[@-1,60:64='start',<0>,2:129]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:149].[@-1,85:85='e',<0>,2:154]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:158].[@-1,92:95='text',<0>,2:161]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:168].[@-1,104:104='e',<0>,2:173]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-16 20:58:01:491 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-08-16 20:58:01:491 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-16 20:58:01:491 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-08-16 20:58:01:499 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-08-16 20:58:01:499 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,11:13]
2023-08-16 20:58:01:499 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,11:43].[@-1,240:243='line',<0>,11:50]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,11:56].[@-1,253:255='pos',<0>,11:63]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,13:37].[@-1,341:344='text',<0>,13:44]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,17:13]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,17:43].[@-1,474:477='line',<0>,17:50]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,17:56].[@-1,487:489='pos',<0>,17:63]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,22:16].[@-1,25:28='text',<0>,22:23]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,23:9]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,23:39].[@-1,77:80='line',<0>,23:46]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,23:53].[@-1,91:93='pos',<0>,23:60]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-16 20:58:01:500 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:33]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,25:63].[@-1,37:40='line',<0>,25:68]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,25:75].[@-1,49:51='pos',<0>,25:80]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-16 20:58:01:500 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:34]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,26:64].[@-1,38:41='line',<0>,26:70]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,26:77].[@-1,51:53='pos',<0>,26:83]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-08-16 20:58:01:500 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,27:38]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,27:43].[@-1,17:22='access',<0>,27:54]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-16 20:58:01:500 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-16 20:58:01:500 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:139]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:169].[@-1,37:41='start',<0>,30:174]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:192].[@-1,60:64='start',<0>,30:197]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:217].[@-1,85:85='e',<0>,30:222]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:226].[@-1,92:95='text',<0>,30:229]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:236].[@-1,105:105='e',<0>,30:242]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-16 20:58:01:500 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-16 20:58:01:500 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:173]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:203].[@-1,37:41='start',<0>,31:208]
2023-08-16 20:58:01:500 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:226].[@-1,60:64='start',<0>,31:231]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:251].[@-1,85:85='e',<0>,31:256]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:260].[@-1,92:95='text',<0>,31:263]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:270].[@-1,105:105='e',<0>,31:276]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-16 20:58:01:508 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-16 20:58:01:508 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-16 20:58:01:508 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:151]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:181].[@-1,37:41='start',<0>,34:186]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:204].[@-1,60:64='start',<0>,34:209]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:229].[@-1,85:85='e',<0>,34:234]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:238].[@-1,92:95='text',<0>,34:241]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:248].[@-1,105:105='e',<0>,34:254]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-16 20:58:01:508 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:125]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:155].[@-1,37:41='start',<0>,35:160]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:178].[@-1,60:64='start',<0>,35:183]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:203].[@-1,85:85='e',<0>,35:208]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:212].[@-1,92:95='text',<0>,35:215]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:222].[@-1,105:105='e',<0>,35:228]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-16 20:58:01:508 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-16 20:58:01:508 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:123]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:153].[@-1,37:41='start',<0>,36:158]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:176].[@-1,60:64='start',<0>,36:181]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:201].[@-1,85:85='e',<0>,36:206]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:210].[@-1,92:95='text',<0>,36:213]
2023-08-16 20:58:01:508 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:220].[@-1,105:105='e',<0>,36:226]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,99:9]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,99:41].[@-1,36:39='line',<0>,99:44]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,99:51].[@-1,46:48='pos',<0>,99:54]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,99:60].[@-1,55:58='text',<0>,99:63]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate $t = environment.STRING
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,103:13]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,104:10]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,105:12]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,106:17]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,107:19]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,111:5]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,118:13]
2023-08-16 20:58:01:516 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,118:27]
2023-08-16 20:58:01:713 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-16 20:58:01:713 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-16 20:58:01:794 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-16 20:58:01:794 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

