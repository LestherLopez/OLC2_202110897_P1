2023-08-26 05:29:12:502 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-26 05:29:12:523 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE POINT (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-26 05:29:13:320 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk;}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef);}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
$blkcase = []interface{}{}
    var listcases []ISwitchstmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= case switchstmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCase_()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetSwitch_())
        }
    }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH (= expc expr) LLAVEIZQ CASE (= expv expr) DOUBLEPTS (= case block) LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expc.e, $expv.e, $block.blk, nil);}) (ALT SWITCH expr LLAVEIZQ blockcases DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH (= expc expr) LLAVEIZQ CASE (= exp expr) DOUBLEPTS block blockcases LLAVEDER))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-26 05:29:13:327 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk;}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef);}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
$blkcase = []interface{}{}
    var listcases []ISwitchstmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= case switchstmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCase_()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetSwitch_())
        }
    }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH (= expc expr) LLAVEIZQ CASE (= expv expr) DOUBLEPTS (= case block) LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expc.e, $expv.e, $block.blk, nil);}) (ALT SWITCH expr LLAVEIZQ blockcases DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH (= expc expr) LLAVEIZQ CASE (= exp expr) DOUBLEPTS block blockcases LLAVEDER))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-26 05:29:13:329 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT whilestmt {$inst = $whilestmt.while}) (ALT forstmt {$inst = $forstmt.for}) (ALT switchstmt {$inst = $switchstmt.switch}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE blockelifs (returns []interface{} blkef) (@ init {
$blkef = []interface{}{}
    var listifs []IIfstmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= elif ifstmt)))) {
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ift, []interface{} el, interfaces.Instruction else) (BLOCK (ALT IF expr LLAVEIZQ (= ifb block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk;}) (ALT IF expr LLAVEIZQ (= ifelseblck block) LLAVEDER ELSE LLAVEIZQ (= elseifblck block) LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        }) (ALT IF expr LLAVEIZQ (= elif block) LLAVEDER ELSE blockelifs { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef);}))) (RULE blockcases (returns []interface{} blkcase) (@ init {
$blkcase = []interface{}{}
    var listcases []ISwitchstmtContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= case switchstmt)))) {
        listcases = localctx.(*BlockcasesContext).GetCase_()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetSwitch_())
        }
    }))) (RULE switchstmt (returns interfaces.Instruction switch) (BLOCK (ALT SWITCH (= expc expr) LLAVEIZQ CASE (= expv expr) DOUBLEPTS (= case block) LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expc.e, $expv.e, $block.blk, nil);}) (ALT SWITCH expr LLAVEIZQ blockcases DEFAULT DOUBLEPTS block LLAVEDER { $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);}) (ALT SWITCH (= expc expr) LLAVEIZQ CASE (= exp expr) DOUBLEPTS block blockcases LLAVEDER))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)}) (ALT FOR ID IN (= first expr) POINT POINT (= second expr) LLAVEIZQ block LLAVEDER {$for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-26 05:29:13:329 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-26 05:29:13:356 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=673>   left=expr<tokenIndex=677,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | op = SUB<tokenIndex=687>  left=expr<tokenIndex=691,p=8> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)} 
        | PARIZQ<tokenIndex=697> expr<tokenIndex=699> PARDER<tokenIndex=701> { $e = $expr.e } 
        | NUMBER<tokenIndex=707>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=713>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=719> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=725> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=731> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        | accessstmt<tokenIndex=737> {$e = $accessstmt.access} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MUL<tokenIndex=543>|DIV<tokenIndex=545>) right=expr<tokenIndex=550,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(ADD<tokenIndex=563>|SUB<tokenIndex=565>|PERCENT<tokenIndex=567>) right=expr<tokenIndex=572,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MAY_IG<tokenIndex=585>|MAYOR<tokenIndex=587>) right=expr<tokenIndex=592,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MEN_IG<tokenIndex=605>|MENOR<tokenIndex=607>) right=expr<tokenIndex=612,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(IG_IG<tokenIndex=625>|DIF<tokenIndex=627>) right=expr<tokenIndex=632,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=AND<tokenIndex=644> right=expr<tokenIndex=648,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=OR<tokenIndex=660> right=expr<tokenIndex=664,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-26 05:29:13:378 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 673)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 677) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 687)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 691) (= p 8)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 697))) (expr (ELEMENT_OPTIONS (= tokenIndex 699))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 701))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 707))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 713))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 719))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 725))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 731))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 737))) {$e = $accessstmt.access})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 543))) (DIV (ELEMENT_OPTIONS (= tokenIndex 545))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 550) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 563))) (SUB (ELEMENT_OPTIONS (= tokenIndex 565))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 567))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 572) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 585))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 587))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 592) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 605))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 607))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 612) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 625))) (DIF (ELEMENT_OPTIONS (= tokenIndex 627))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 632) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 644)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 648) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 660)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 664) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-26 05:29:13:390 grammar LogManager.java:25 import STRINGS=1
2023-08-26 05:29:13:390 grammar LogManager.java:25 import INTS=2
2023-08-26 05:29:13:390 grammar LogManager.java:25 import FLOATS=3
2023-08-26 05:29:13:390 grammar LogManager.java:25 import BOOLS=4
2023-08-26 05:29:13:390 grammar LogManager.java:25 import CHARACTERS=5
2023-08-26 05:29:13:390 grammar LogManager.java:25 import VAR=6
2023-08-26 05:29:13:390 grammar LogManager.java:25 import NIL=7
2023-08-26 05:29:13:390 grammar LogManager.java:25 import TRUE=8
2023-08-26 05:29:13:390 grammar LogManager.java:25 import FALSE=9
2023-08-26 05:29:13:390 grammar LogManager.java:25 import PRINT=10
2023-08-26 05:29:13:390 grammar LogManager.java:25 import IF=11
2023-08-26 05:29:13:390 grammar LogManager.java:25 import ELSE=12
2023-08-26 05:29:13:390 grammar LogManager.java:25 import WHILE=13
2023-08-26 05:29:13:390 grammar LogManager.java:25 import LET=14
2023-08-26 05:29:13:390 grammar LogManager.java:25 import FOR=15
2023-08-26 05:29:13:390 grammar LogManager.java:25 import IN=16
2023-08-26 05:29:13:390 grammar LogManager.java:25 import SWITCH=17
2023-08-26 05:29:13:390 grammar LogManager.java:25 import CASE=18
2023-08-26 05:29:13:390 grammar LogManager.java:25 import DEFAULT=19
2023-08-26 05:29:13:390 grammar LogManager.java:25 import NUMBER=20
2023-08-26 05:29:13:390 grammar LogManager.java:25 import STRING=21
2023-08-26 05:29:13:390 grammar LogManager.java:25 import ID=22
2023-08-26 05:29:13:390 grammar LogManager.java:25 import DIF=23
2023-08-26 05:29:13:390 grammar LogManager.java:25 import IG_IG=24
2023-08-26 05:29:13:390 grammar LogManager.java:25 import NOT=25
2023-08-26 05:29:13:390 grammar LogManager.java:25 import OR=26
2023-08-26 05:29:13:390 grammar LogManager.java:25 import AND=27
2023-08-26 05:29:13:390 grammar LogManager.java:25 import IG=28
2023-08-26 05:29:13:391 grammar LogManager.java:25 import IG_ADD=29
2023-08-26 05:29:13:391 grammar LogManager.java:25 import IG_SUB=30
2023-08-26 05:29:13:391 grammar LogManager.java:25 import MAY_IG=31
2023-08-26 05:29:13:391 grammar LogManager.java:25 import MEN_IG=32
2023-08-26 05:29:13:392 grammar LogManager.java:25 import MAYOR=33
2023-08-26 05:29:13:392 grammar LogManager.java:25 import MENOR=34
2023-08-26 05:29:13:393 grammar LogManager.java:25 import MUL=35
2023-08-26 05:29:13:393 grammar LogManager.java:25 import DIV=36
2023-08-26 05:29:13:394 grammar LogManager.java:25 import ADD=37
2023-08-26 05:29:13:394 grammar LogManager.java:25 import SUB=38
2023-08-26 05:29:13:394 grammar LogManager.java:25 import PERCENT=39
2023-08-26 05:29:13:395 grammar LogManager.java:25 import PARIZQ=40
2023-08-26 05:29:13:395 grammar LogManager.java:25 import PARDER=41
2023-08-26 05:29:13:395 grammar LogManager.java:25 import LLAVEIZQ=42
2023-08-26 05:29:13:395 grammar LogManager.java:25 import LLAVEDER=43
2023-08-26 05:29:13:395 grammar LogManager.java:25 import DOUBLEPTS=44
2023-08-26 05:29:13:395 grammar LogManager.java:25 import QUESTION=45
2023-08-26 05:29:13:395 grammar LogManager.java:25 import POINT=46
2023-08-26 05:29:13:395 grammar LogManager.java:25 import WHITESPACE=47
2023-08-26 05:29:13:395 grammar LogManager.java:25 import COMMENT=48
2023-08-26 05:29:13:395 grammar LogManager.java:25 import LINE_COMMENT=49
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'String'=1
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'Int'=2
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'Float'=3
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'Bool'=4
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'Character'=5
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'var'=6
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'nil'=7
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'true'=8
2023-08-26 05:29:13:396 grammar LogManager.java:25 import 'false'=9
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'print'=10
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'if'=11
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'else'=12
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'while'=13
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'let'=14
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'for'=15
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'in'=16
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'switch'=17
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'case'=18
2023-08-26 05:29:13:397 grammar LogManager.java:25 import 'default'=19
2023-08-26 05:29:13:397 grammar LogManager.java:25 import '!='=23
2023-08-26 05:29:13:397 grammar LogManager.java:25 import '=='=24
2023-08-26 05:29:13:397 grammar LogManager.java:25 import '!'=25
2023-08-26 05:29:13:397 grammar LogManager.java:25 import '||'=26
2023-08-26 05:29:13:397 grammar LogManager.java:25 import '&&'=27
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '='=28
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '+='=29
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '-='=30
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '>='=31
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '<='=32
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '>'=33
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '<'=34
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '*'=35
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '/'=36
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '+'=37
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '-'=38
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '%'=39
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '('=40
2023-08-26 05:29:13:398 grammar LogManager.java:25 import ')'=41
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '{'=42
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '}'=43
2023-08-26 05:29:13:398 grammar LogManager.java:25 import ':'=44
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '?'=45
2023-08-26 05:29:13:398 grammar LogManager.java:25 import '.'=46
2023-08-26 05:29:13:399 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, NUMBER=20, STRING=21, ID=22, DIF=23, IG_IG=24, NOT=25, OR=26, AND=27, IG=28, IG_ADD=29, IG_SUB=30, MAY_IG=31, MEN_IG=32, MAYOR=33, MENOR=34, MUL=35, DIV=36, ADD=37, SUB=38, PERCENT=39, PARIZQ=40, PARDER=41, LLAVEIZQ=42, LLAVEDER=43, DOUBLEPTS=44, QUESTION=45, POINT=46, WHITESPACE=47, COMMENT=48, LINE_COMMENT=49, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, '!='=23, '=='=24, '!'=25, '||'=26, '&&'=27, '='=28, '+='=29, '-='=30, '>='=31, '<='=32, '>'=33, '<'=34, '*'=35, '/'=36, '+'=37, '-'=38, '%'=39, '('=40, ')'=41, '{'=42, '}'=43, ':'=44, '?'=45, '.'=46}
2023-08-26 05:29:13:399 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, NUMBER=20, STRING=21, ID=22, DIF=23, IG_IG=24, NOT=25, OR=26, AND=27, IG=28, IG_ADD=29, IG_SUB=30, MAY_IG=31, MEN_IG=32, MAYOR=33, MENOR=34, MUL=35, DIV=36, ADD=37, SUB=38, PERCENT=39, PARIZQ=40, PARDER=41, LLAVEIZQ=42, LLAVEDER=43, DOUBLEPTS=44, QUESTION=45, POINT=46, WHITESPACE=47, COMMENT=48, LINE_COMMENT=49}
2023-08-26 05:29:13:399 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, '!='=23, '=='=24, '!'=25, '||'=26, '&&'=27, '='=28, '+='=29, '-='=30, '>='=31, '<='=32, '>'=33, '<'=34, '*'=35, '/'=36, '+'=37, '-'=38, '%'=39, '('=40, ')'=41, '{'=42, '}'=43, ':'=44, '?'=45, '.'=46}
2023-08-26 05:29:13:429 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-26 05:29:13:429 LL1 LogManager.java:25 look=[{6, 10..11, 13..15, 17, 22}, {<EOF>, 17, 43}]
2023-08-26 05:29:13:430 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:430 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-26 05:29:13:430 LL1 LogManager.java:25 look=[10, 6, 14, 22, 22, 11, 13, 15, 17]
2023-08-26 05:29:13:430 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:430 LL1 LogManager.java:25 
DECISION 2 in rule declarestmt
2023-08-26 05:29:13:430 LL1 LogManager.java:25 look=[6, 6, 6]
2023-08-26 05:29:13:430 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:430 LL1 LogManager.java:25 
DECISION 3 in rule constantstmt
2023-08-26 05:29:13:430 LL1 LogManager.java:25 look=[14, 14]
2023-08-26 05:29:13:431 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:431 LL1 LogManager.java:25 
DECISION 4 in rule blockelifs
2023-08-26 05:29:13:431 LL1 LogManager.java:25 look=[11, {<EOF>, 6, 10..11, 13..15, 17, 22, 43}]
2023-08-26 05:29:13:431 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:431 LL1 LogManager.java:25 
DECISION 5 in rule ifstmt
2023-08-26 05:29:13:431 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-26 05:29:13:431 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:431 LL1 LogManager.java:25 
DECISION 6 in rule blockcases
2023-08-26 05:29:13:431 LL1 LogManager.java:25 look=[17, {19, 43}]
2023-08-26 05:29:13:432 LL1 LogManager.java:25 LL(1)? true
2023-08-26 05:29:13:432 LL1 LogManager.java:25 
DECISION 7 in rule switchstmt
2023-08-26 05:29:13:432 LL1 LogManager.java:25 look=[17, 17, 17]
2023-08-26 05:29:13:432 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:432 LL1 LogManager.java:25 
DECISION 8 in rule forstmt
2023-08-26 05:29:13:432 LL1 LogManager.java:25 look=[15, 15]
2023-08-26 05:29:13:432 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:432 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-08-26 05:29:13:432 LL1 LogManager.java:25 look=[25, 38, 40, 20, 21, 8, 9, 7, 22]
2023-08-26 05:29:13:432 LL1 LogManager.java:25 LL(1)? true
2023-08-26 05:29:13:432 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-08-26 05:29:13:432 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-26 05:29:13:432 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:432 LL1 LogManager.java:25 
DECISION 11 in rule expr
2023-08-26 05:29:13:433 LL1 LogManager.java:25 look=[null, null]
2023-08-26 05:29:13:433 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:433 LL1 LogManager.java:25 
DECISION 12 in rule increaseanddecreasestmt
2023-08-26 05:29:13:433 LL1 LogManager.java:25 look=[22, 22]
2023-08-26 05:29:13:433 LL1 LogManager.java:25 LL(1)? false
2023-08-26 05:29:13:433 LL1 LogManager.java:25 
DECISION 13 in rule type
2023-08-26 05:29:13:433 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-08-26 05:29:13:433 LL1 LogManager.java:25 LL(1)? true
2023-08-26 05:29:13:437 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-26 05:29:13:444 action-translator LogManager.java:25 translate $code = $block.blk
2023-08-26 05:29:13:445 action-translator LogManager.java:25 attr [@-1,1:4='code',<0>,18:13]
2023-08-26 05:29:13:445 action-translator LogManager.java:25 qattr [@-1,9:13='block',<0>,18:21].[@-1,15:17='blk',<0>,18:27]
2023-08-26 05:29:13:447 action-translator LogManager.java:25 translate 
$blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-26 05:29:13:447 action-translator LogManager.java:25 attr [@-1,3:5='blk',<0>,23:1]
2023-08-26 05:29:13:448 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-26 05:29:13:448 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,30:13]
2023-08-26 05:29:13:448 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,30:27]
2023-08-26 05:29:13:449 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-26 05:29:13:449 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,36:14]
2023-08-26 05:29:13:449 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,36:22].[@-1,20:23='prnt',<0>,36:32]
2023-08-26 05:29:13:449 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-08-26 05:29:13:449 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,37:15]
2023-08-26 05:29:13:449 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,37:23].[@-1,21:23='dec',<0>,37:35]
2023-08-26 05:29:13:449 action-translator LogManager.java:25 translate $inst = $constantstmt.const
2023-08-26 05:29:13:449 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,38:16]
2023-08-26 05:29:13:449 action-translator LogManager.java:25 qattr [@-1,9:20='constantstmt',<0>,38:24].[@-1,22:26='const',<0>,38:37]
2023-08-26 05:29:13:449 action-translator LogManager.java:25 translate $inst = $assignationstmt.assign
2023-08-26 05:29:13:449 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,39:19]
2023-08-26 05:29:13:450 action-translator LogManager.java:25 qattr [@-1,9:23='assignationstmt',<0>,39:27].[@-1,25:30='assign',<0>,39:43]
2023-08-26 05:29:13:450 action-translator LogManager.java:25 translate $inst = $increaseanddecreasestmt.increasedecrease
2023-08-26 05:29:13:450 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:27]
2023-08-26 05:29:13:450 action-translator LogManager.java:25 qattr [@-1,9:31='increaseanddecreasestmt',<0>,40:35].[@-1,33:48='increasedecrease',<0>,40:59]
2023-08-26 05:29:13:450 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-08-26 05:29:13:450 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-08-26 05:29:13:450 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:19='ift',<0>,41:26]
2023-08-26 05:29:13:450 action-translator LogManager.java:25 translate $inst = $whilestmt.while
2023-08-26 05:29:13:451 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,42:13]
2023-08-26 05:29:13:451 action-translator LogManager.java:25 qattr [@-1,9:17='whilestmt',<0>,42:21].[@-1,19:23='while',<0>,42:31]
2023-08-26 05:29:13:451 action-translator LogManager.java:25 translate $inst = $forstmt.for
2023-08-26 05:29:13:451 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,43:11]
2023-08-26 05:29:13:451 action-translator LogManager.java:25 qattr [@-1,9:15='forstmt',<0>,43:19].[@-1,17:19='for',<0>,43:27]
2023-08-26 05:29:13:451 action-translator LogManager.java:25 translate $inst = $switchstmt.switch
2023-08-26 05:29:13:451 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,44:14]
2023-08-26 05:29:13:451 action-translator LogManager.java:25 qattr [@-1,9:18='switchstmt',<0>,44:22].[@-1,20:25='switch',<0>,44:33]
2023-08-26 05:29:13:452 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)
2023-08-26 05:29:13:452 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,48:29]
2023-08-26 05:29:13:452 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,48:59].[@-1,38:41='line',<0>,48:65]
2023-08-26 05:29:13:452 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,48:72].[@-1,51:53='pos',<0>,48:78]
2023-08-26 05:29:13:452 action-translator LogManager.java:25 qattr [@-1,57:60='expr',<0>,48:84].[@-1,62:62='e',<0>,48:89]
2023-08-26 05:29:13:454 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-08-26 05:29:13:454 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,53:33]
2023-08-26 05:29:13:454 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,53:66].[@-1,38:41='line',<0>,53:70]
2023-08-26 05:29:13:454 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,53:77].[@-1,49:51='pos',<0>,53:81]
2023-08-26 05:29:13:454 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,53:87].[@-1,58:61='text',<0>,53:90]
2023-08-26 05:29:13:454 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,53:97].[@-1,70:70='t',<0>,53:102]
2023-08-26 05:29:13:454 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,53:106].[@-1,79:79='e',<0>,53:111]
2023-08-26 05:29:13:455 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-08-26 05:29:13:455 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,54:18]
2023-08-26 05:29:13:455 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,54:51].[@-1,38:41='line',<0>,54:55]
2023-08-26 05:29:13:455 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,54:62].[@-1,49:51='pos',<0>,54:66]
2023-08-26 05:29:13:456 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,54:72].[@-1,58:61='text',<0>,54:75]
2023-08-26 05:29:13:456 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,54:100].[@-1,88:88='e',<0>,54:105]
2023-08-26 05:29:13:456 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)
2023-08-26 05:29:13:456 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,55:34]
2023-08-26 05:29:13:456 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,55:67].[@-1,38:41='line',<0>,55:71]
2023-08-26 05:29:13:458 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,55:78].[@-1,49:51='pos',<0>,55:82]
2023-08-26 05:29:13:458 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,55:88].[@-1,58:61='text',<0>,55:91]
2023-08-26 05:29:13:458 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,55:98].[@-1,70:70='t',<0>,55:103]
2023-08-26 05:29:13:459 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)
2023-08-26 05:29:13:459 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,59:33]
2023-08-26 05:29:13:459 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,59:68].[@-1,40:43='line',<0>,59:72]
2023-08-26 05:29:13:459 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,59:79].[@-1,51:53='pos',<0>,59:83]
2023-08-26 05:29:13:459 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,59:89].[@-1,60:63='text',<0>,59:92]
2023-08-26 05:29:13:460 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,59:99].[@-1,72:72='t',<0>,59:104]
2023-08-26 05:29:13:460 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,59:108].[@-1,81:81='e',<0>,59:113]
2023-08-26 05:29:13:460 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-08-26 05:29:13:460 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,60:18]
2023-08-26 05:29:13:460 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,60:53].[@-1,40:43='line',<0>,60:57]
2023-08-26 05:29:13:461 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,60:64].[@-1,51:53='pos',<0>,60:68]
2023-08-26 05:29:13:461 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,60:74].[@-1,60:63='text',<0>,60:77]
2023-08-26 05:29:13:461 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,60:102].[@-1,90:90='e',<0>,60:107]
2023-08-26 05:29:13:461 action-translator LogManager.java:25 translate 
$blkef = []interface{}{}
    var listifs []IIfstmtContext
  
2023-08-26 05:29:13:461 action-translator LogManager.java:25 attr [@-1,3:7='blkef',<0>,67:1]
2023-08-26 05:29:13:462 action-translator LogManager.java:25 translate 
        listifs = localctx.(*BlockelifsContext).GetElif()
        for _, a := range listifs {
            $blkef = append($blkef, a.GetIft())
        }
    
2023-08-26 05:29:13:462 action-translator LogManager.java:25 attr [@-1,111:115='blkef',<0>,74:13]
2023-08-26 05:29:13:462 action-translator LogManager.java:25 attr [@-1,127:131='blkef',<0>,74:29]
2023-08-26 05:29:13:465 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil); 
                                        $el = $ifb.blk;
2023-08-26 05:29:13:465 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,80:41] [@-1,7:68=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)',<0>,80:46]
2023-08-26 05:29:13:465 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifb.blk, nil)
2023-08-26 05:29:13:465 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,80:60].[@-1,24:27='line',<0>,80:63]
2023-08-26 05:29:13:465 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,80:70].[@-1,34:36='pos',<0>,80:73]
2023-08-26 05:29:13:465 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,80:79].[@-1,45:45='e',<0>,80:84]
2023-08-26 05:29:13:466 action-translator LogManager.java:25 qattr [@-1,49:51='ifb',<0>,80:88].[@-1,53:55='blk',<0>,80:92]
2023-08-26 05:29:13:466 action-translator LogManager.java:25 setAttr [@-1,114:115='el',<0>,81:41] [@-1,118:126=' $ifb.blk',<0>,81:45]
2023-08-26 05:29:13:466 action-translator LogManager.java:25 translate  $ifb.blk
2023-08-26 05:29:13:466 action-translator LogManager.java:25 qattr [@-1,2:4='ifb',<0>,80:41].[@-1,6:8='blk',<0>,80:45]
2023-08-26 05:29:13:467 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk); 
                                                                                        $el = $ifelseblck.blk;
                                                                                        
2023-08-26 05:29:13:467 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,82:88] [@-1,7:87=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)',<0>,82:93]
2023-08-26 05:29:13:467 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifelseblck.blk, $elseifblck.blk)
2023-08-26 05:29:13:467 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,82:107].[@-1,24:27='line',<0>,82:110]
2023-08-26 05:29:13:467 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,82:117].[@-1,34:36='pos',<0>,82:120]
2023-08-26 05:29:13:467 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,82:126].[@-1,45:45='e',<0>,82:131]
2023-08-26 05:29:13:468 action-translator LogManager.java:25 qattr [@-1,49:58='ifelseblck',<0>,82:135].[@-1,60:62='blk',<0>,82:146]
2023-08-26 05:29:13:468 action-translator LogManager.java:25 qattr [@-1,66:75='elseifblck',<0>,82:152].[@-1,77:79='blk',<0>,82:163]
2023-08-26 05:29:13:468 action-translator LogManager.java:25 setAttr [@-1,181:182='el',<0>,83:89] [@-1,185:200=' $ifelseblck.blk',<0>,83:93]
2023-08-26 05:29:13:468 action-translator LogManager.java:25 translate  $ifelseblck.blk
2023-08-26 05:29:13:468 action-translator LogManager.java:25 qattr [@-1,2:11='ifelseblck',<0>,82:88].[@-1,13:15='blk',<0>,82:99]
2023-08-26 05:29:13:468 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef);
2023-08-26 05:29:13:468 action-translator LogManager.java:25 setAttr [@-1,2:4='ift',<0>,85:59] [@-1,7:83=' instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)',<0>,85:64]
2023-08-26 05:29:13:468 action-translator LogManager.java:25 translate  instructions.NewIf($IF.line, $IF.pos, $expr.e, $elif.blk, $blockelifs.blkef)
2023-08-26 05:29:13:469 action-translator LogManager.java:25 qattr [@-1,21:22='IF',<0>,85:78].[@-1,24:27='line',<0>,85:81]
2023-08-26 05:29:13:469 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,85:88].[@-1,34:36='pos',<0>,85:91]
2023-08-26 05:29:13:469 action-translator LogManager.java:25 qattr [@-1,40:43='expr',<0>,85:97].[@-1,45:45='e',<0>,85:102]
2023-08-26 05:29:13:469 action-translator LogManager.java:25 qattr [@-1,49:52='elif',<0>,85:106].[@-1,54:56='blk',<0>,85:111]
2023-08-26 05:29:13:469 action-translator LogManager.java:25 qattr [@-1,60:69='blockelifs',<0>,85:117].[@-1,71:75='blkef',<0>,85:128]
2023-08-26 05:29:13:469 action-translator LogManager.java:25 translate 
$blkcase = []interface{}{}
    var listcases []ISwitchstmtContext
  
2023-08-26 05:29:13:469 action-translator LogManager.java:25 attr [@-1,3:9='blkcase',<0>,90:1]
2023-08-26 05:29:13:472 action-translator LogManager.java:25 translate 
        listcases = localctx.(*BlockcasesContext).GetCase_()
        for _, a := range listcases {
            $blkcase = append($blkcase, a.GetSwitch_())
        }
    
2023-08-26 05:29:13:472 action-translator LogManager.java:25 attr [@-1,116:122='blkcase',<0>,97:13]
2023-08-26 05:29:13:473 action-translator LogManager.java:25 attr [@-1,134:140='blkcase',<0>,97:31]
2023-08-26 05:29:13:474 action-translator LogManager.java:25 translate  $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expc.e, $expv.e, $block.blk, nil);
2023-08-26 05:29:13:474 action-translator LogManager.java:25 setAttr [@-1,2:7='switch',<0>,103:76] [@-1,10:94=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expc.e, $expv.e, $block.blk, nil)',<0>,103:84]
2023-08-26 05:29:13:474 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expc.e, $expv.e, $block.blk, nil)
2023-08-26 05:29:13:474 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,103:99].[@-1,32:35='line',<0>,103:106]
2023-08-26 05:29:13:474 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,103:113].[@-1,46:48='pos',<0>,103:120]
2023-08-26 05:29:13:474 action-translator LogManager.java:25 qattr [@-1,52:55='expc',<0>,103:126].[@-1,57:57='e',<0>,103:131]
2023-08-26 05:29:13:474 action-translator LogManager.java:25 qattr [@-1,61:64='expv',<0>,103:135].[@-1,66:66='e',<0>,103:140]
2023-08-26 05:29:13:474 action-translator LogManager.java:25 qattr [@-1,70:74='block',<0>,103:144].[@-1,76:78='blk',<0>,103:150]
2023-08-26 05:29:13:475 action-translator LogManager.java:25 translate  $switch = instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk);
2023-08-26 05:29:13:475 action-translator LogManager.java:25 setAttr [@-1,2:7='switch',<0>,104:69] [@-1,10:91=' instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)',<0>,104:77]
2023-08-26 05:29:13:475 action-translator LogManager.java:25 translate  instructions.NewSwitch($SWITCH.line, $SWITCH.pos, $expr.e, nil,  nil, $block.blk)
2023-08-26 05:29:13:476 action-translator LogManager.java:25 qattr [@-1,25:30='SWITCH',<0>,104:92].[@-1,32:35='line',<0>,104:99]
2023-08-26 05:29:13:476 action-translator LogManager.java:25 qattr [@-1,39:44='SWITCH',<0>,104:106].[@-1,46:48='pos',<0>,104:113]
2023-08-26 05:29:13:476 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,104:119].[@-1,57:57='e',<0>,104:124]
2023-08-26 05:29:13:476 action-translator LogManager.java:25 qattr [@-1,72:76='block',<0>,104:139].[@-1,78:80='blk',<0>,104:145]
2023-08-26 05:29:13:477 action-translator LogManager.java:25 translate $assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)
2023-08-26 05:29:13:477 action-translator LogManager.java:25 attr [@-1,1:6='assign',<0>,112:14]
2023-08-26 05:29:13:477 action-translator LogManager.java:25 qattr [@-1,39:40='IG',<0>,112:52].[@-1,42:45='line',<0>,112:55]
2023-08-26 05:29:13:477 action-translator LogManager.java:25 qattr [@-1,49:50='IG',<0>,112:62].[@-1,52:54='pos',<0>,112:65]
2023-08-26 05:29:13:477 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,112:72].[@-1,62:65='text',<0>,112:75]
2023-08-26 05:29:13:477 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,112:82].[@-1,74:74='e',<0>,112:87]
2023-08-26 05:29:13:478 action-translator LogManager.java:25 translate $while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)
2023-08-26 05:29:13:478 action-translator LogManager.java:25 attr [@-1,1:5='while',<0>,116:38]
2023-08-26 05:29:13:478 action-translator LogManager.java:25 qattr [@-1,32:36='WHILE',<0>,116:69].[@-1,38:41='line',<0>,116:75]
2023-08-26 05:29:13:478 action-translator LogManager.java:25 qattr [@-1,45:49='WHILE',<0>,116:82].[@-1,51:53='pos',<0>,116:88]
2023-08-26 05:29:13:478 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,116:95].[@-1,63:63='e',<0>,116:100]
2023-08-26 05:29:13:478 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,116:104].[@-1,73:75='blk',<0>,116:110]
2023-08-26 05:29:13:478 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, nil, $block.blk)
2023-08-26 05:29:13:479 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,120:43]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,120:70].[@-1,32:35='line',<0>,120:74]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,120:81].[@-1,43:45='pos',<0>,120:85]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,120:91].[@-1,52:55='text',<0>,120:94]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,120:101].[@-1,64:64='e',<0>,120:106]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,120:115].[@-1,79:81='blk',<0>,120:121]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 translate $for = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $first.e, $second.e, $block.blk)
2023-08-26 05:29:13:479 action-translator LogManager.java:25 attr [@-1,1:3='for',<0>,121:72]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,28:30='FOR',<0>,121:99].[@-1,32:35='line',<0>,121:103]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,39:41='FOR',<0>,121:110].[@-1,43:45='pos',<0>,121:114]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,121:120].[@-1,52:55='text',<0>,121:123]
2023-08-26 05:29:13:479 action-translator LogManager.java:25 qattr [@-1,59:63='first',<0>,121:130].[@-1,65:65='e',<0>,121:136]
2023-08-26 05:29:13:480 action-translator LogManager.java:25 qattr [@-1,69:74='second',<0>,121:140].[@-1,76:76='e',<0>,121:147]
2023-08-26 05:29:13:480 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,121:151].[@-1,86:88='blk',<0>,121:157]
2023-08-26 05:29:13:481 action-translator LogManager.java:25 translate 
2023-08-26 05:29:13:481 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-08-26 05:29:13:481 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:71]
2023-08-26 05:29:13:481 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:101].[@-1,37:41='start',<0>,2:106]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:124].[@-1,60:64='start',<0>,2:129]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:149].[@-1,85:85='e',<0>,2:154]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:158].[@-1,92:95='text',<0>,2:161]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:168].[@-1,104:104='e',<0>,2:173]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)
2023-08-26 05:29:13:482 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:68]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,3:98].[@-1,37:41='start',<0>,3:103]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,3:121].[@-1,60:64='start',<0>,3:126]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,3:146].[@-1,85:85='e',<0>,3:151]
2023-08-26 05:29:13:482 action-translator LogManager.java:25 qattr [@-1,90:91='op',<0>,3:156].[@-1,93:96='text',<0>,3:159]
2023-08-26 05:29:13:483 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-26 05:29:13:483 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-08-26 05:29:13:483 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-08-26 05:29:13:484 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-26 05:29:13:484 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-26 05:29:13:484 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-26 05:29:13:484 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-26 05:29:13:484 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-26 05:29:13:485 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-26 05:29:13:486 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-26 05:29:13:486 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-26 05:29:13:486 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-26 05:29:13:486 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-26 05:29:13:487 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-26 05:29:13:487 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-26 05:29:13:487 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-26 05:29:13:487 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-26 05:29:13:487 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-26 05:29:13:487 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-26 05:29:13:487 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:33]
2023-08-26 05:29:13:487 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,26:63].[@-1,37:40='line',<0>,26:68]
2023-08-26 05:29:13:487 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,26:75].[@-1,49:51='pos',<0>,26:80]
2023-08-26 05:29:13:488 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-26 05:29:13:488 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:34]
2023-08-26 05:29:13:488 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,27:64].[@-1,38:41='line',<0>,27:70]
2023-08-26 05:29:13:488 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,27:77].[@-1,51:53='pos',<0>,27:83]
2023-08-26 05:29:13:488 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-08-26 05:29:13:488 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:32]
2023-08-26 05:29:13:488 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,28:62].[@-1,36:39='line',<0>,28:66]
2023-08-26 05:29:13:489 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,28:73].[@-1,47:49='pos',<0>,28:77]
2023-08-26 05:29:13:489 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-08-26 05:29:13:489 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,29:38]
2023-08-26 05:29:13:489 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,29:43].[@-1,17:22='access',<0>,29:54]
2023-08-26 05:29:13:490 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-26 05:29:13:490 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 05:29:13:490 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:139]
2023-08-26 05:29:13:491 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:169].[@-1,37:41='start',<0>,32:174]
2023-08-26 05:29:13:491 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:192].[@-1,60:64='start',<0>,32:197]
2023-08-26 05:29:13:491 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:217].[@-1,85:85='e',<0>,32:222]
2023-08-26 05:29:13:491 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:226].[@-1,92:95='text',<0>,32:229]
2023-08-26 05:29:13:491 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:236].[@-1,105:105='e',<0>,32:242]
2023-08-26 05:29:13:491 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-26 05:29:13:491 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 05:29:13:491 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:173]
2023-08-26 05:29:13:492 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:203].[@-1,37:41='start',<0>,33:208]
2023-08-26 05:29:13:492 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:226].[@-1,60:64='start',<0>,33:231]
2023-08-26 05:29:13:492 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:251].[@-1,85:85='e',<0>,33:256]
2023-08-26 05:29:13:492 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:260].[@-1,92:95='text',<0>,33:263]
2023-08-26 05:29:13:492 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:270].[@-1,105:105='e',<0>,33:276]
2023-08-26 05:29:13:492 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 05:29:13:493 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 05:29:13:493 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:154]
2023-08-26 05:29:13:493 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:184].[@-1,37:41='start',<0>,34:189]
2023-08-26 05:29:13:493 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:207].[@-1,60:64='start',<0>,34:212]
2023-08-26 05:29:13:493 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:232].[@-1,85:85='e',<0>,34:237]
2023-08-26 05:29:13:493 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:241].[@-1,92:95='text',<0>,34:244]
2023-08-26 05:29:13:493 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:251].[@-1,105:105='e',<0>,34:257]
2023-08-26 05:29:13:493 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 05:29:13:494 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 05:29:13:494 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:154]
2023-08-26 05:29:13:494 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:184].[@-1,37:41='start',<0>,35:189]
2023-08-26 05:29:13:494 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:207].[@-1,60:64='start',<0>,35:212]
2023-08-26 05:29:13:494 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:232].[@-1,85:85='e',<0>,35:237]
2023-08-26 05:29:13:494 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:241].[@-1,92:95='text',<0>,35:244]
2023-08-26 05:29:13:494 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:251].[@-1,105:105='e',<0>,35:257]
2023-08-26 05:29:13:495 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-26 05:29:13:495 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 05:29:13:495 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:151]
2023-08-26 05:29:13:495 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:181].[@-1,37:41='start',<0>,36:186]
2023-08-26 05:29:13:495 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:204].[@-1,60:64='start',<0>,36:209]
2023-08-26 05:29:13:495 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:229].[@-1,85:85='e',<0>,36:234]
2023-08-26 05:29:13:495 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:238].[@-1,92:95='text',<0>,36:241]
2023-08-26 05:29:13:496 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:248].[@-1,105:105='e',<0>,36:254]
2023-08-26 05:29:13:496 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-26 05:29:13:496 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 05:29:13:496 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:127]
2023-08-26 05:29:13:496 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:157].[@-1,37:41='start',<0>,37:162]
2023-08-26 05:29:13:496 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:180].[@-1,60:64='start',<0>,37:185]
2023-08-26 05:29:13:497 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:205].[@-1,85:85='e',<0>,37:210]
2023-08-26 05:29:13:497 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:214].[@-1,92:95='text',<0>,37:217]
2023-08-26 05:29:13:497 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:224].[@-1,105:105='e',<0>,37:230]
2023-08-26 05:29:13:497 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-26 05:29:13:497 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 05:29:13:497 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:126]
2023-08-26 05:29:13:497 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:156].[@-1,37:41='start',<0>,38:161]
2023-08-26 05:29:13:497 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:179].[@-1,60:64='start',<0>,38:184]
2023-08-26 05:29:13:497 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:204].[@-1,85:85='e',<0>,38:209]
2023-08-26 05:29:13:497 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:213].[@-1,92:95='text',<0>,38:216]
2023-08-26 05:29:13:498 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:223].[@-1,105:105='e',<0>,38:229]
2023-08-26 05:29:13:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-26 05:29:13:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-26 05:29:13:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 05:29:13:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 05:29:13:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-26 05:29:13:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-26 05:29:13:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-26 05:29:13:500 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-08-26 05:29:13:500 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,164:9]
2023-08-26 05:29:13:500 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,164:41].[@-1,36:39='line',<0>,164:44]
2023-08-26 05:29:13:500 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,164:51].[@-1,46:48='pos',<0>,164:54]
2023-08-26 05:29:13:500 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,164:60].[@-1,55:58='text',<0>,164:63]
2023-08-26 05:29:13:500 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)
2023-08-26 05:29:13:500 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,168:18]
2023-08-26 05:29:13:500 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,168:71].[@-1,57:60='line',<0>,168:74]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,168:81].[@-1,67:69='pos',<0>,168:84]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,168:90].[@-1,76:79='text',<0>,168:93]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,83:88='IG_ADD',<0>,168:100].[@-1,90:93='text',<0>,168:107]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,168:114].[@-1,102:102='e',<0>,168:119]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)
2023-08-26 05:29:13:501 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,169:18]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,169:71].[@-1,57:60='line',<0>,169:74]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,169:81].[@-1,67:69='pos',<0>,169:84]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,169:90].[@-1,76:79='text',<0>,169:93]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,83:88='IG_SUB',<0>,169:100].[@-1,90:93='text',<0>,169:107]
2023-08-26 05:29:13:501 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,169:114].[@-1,102:102='e',<0>,169:119]
2023-08-26 05:29:13:502 action-translator LogManager.java:25 translate $t = environment.STRING
2023-08-26 05:29:13:502 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,174:13]
2023-08-26 05:29:13:502 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-08-26 05:29:13:502 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,175:10]
2023-08-26 05:29:13:502 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-08-26 05:29:13:502 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,176:12]
2023-08-26 05:29:13:503 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-08-26 05:29:13:503 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,177:17]
2023-08-26 05:29:13:503 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-08-26 05:29:13:503 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,178:19]
2023-08-26 05:29:13:761 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-26 05:29:13:761 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-26 05:29:13:897 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-26 05:29:13:897 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

