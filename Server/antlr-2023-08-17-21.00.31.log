2023-08-17 21:00:30:932 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-17 21:00:30:951 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-17 21:00:31:304 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT assignationstmt {$inst = $assignationstmt.assign}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ instruction LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $instruction.inst, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-17 21:00:31:309 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT assignationstmt {$inst = $assignationstmt.assign}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ instruction LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $instruction.inst, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-17 21:00:31:311 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT assignationstmt {$inst = $assignationstmt.assign}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ instruction LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $instruction.inst, nil) }) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-17 21:00:31:311 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-17 21:00:31:332 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=495>   left=expr<tokenIndex=499,p=8> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | PARIZQ<tokenIndex=505> expr<tokenIndex=507> PARDER<tokenIndex=509> { $e = $expr.e } 
        | NUMBER<tokenIndex=515>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=521>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=527> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=533> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=539> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        | accessstmt<tokenIndex=545> {$e = $accessstmt.access} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MUL<tokenIndex=365>|DIV<tokenIndex=367>) right=expr<tokenIndex=372,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(ADD<tokenIndex=385>|SUB<tokenIndex=387>|PERCENT<tokenIndex=389>) right=expr<tokenIndex=394,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MAY_IG<tokenIndex=407>|MAYOR<tokenIndex=409>) right=expr<tokenIndex=414,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MEN_IG<tokenIndex=427>|MENOR<tokenIndex=429>) right=expr<tokenIndex=434,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(IG_IG<tokenIndex=447>|DIF<tokenIndex=449>) right=expr<tokenIndex=454,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=AND<tokenIndex=466> right=expr<tokenIndex=470,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=OR<tokenIndex=482> right=expr<tokenIndex=486,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-17 21:00:31:349 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 495)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 499) (= p 8)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 505))) (expr (ELEMENT_OPTIONS (= tokenIndex 507))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 509))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 515))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 521))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 527))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 533))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 539))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 545))) {$e = $accessstmt.access})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 365))) (DIV (ELEMENT_OPTIONS (= tokenIndex 367))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 372) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 385))) (SUB (ELEMENT_OPTIONS (= tokenIndex 387))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 389))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 394) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 407))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 409))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 414) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 427))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 429))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 434) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 447))) (DIF (ELEMENT_OPTIONS (= tokenIndex 449))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 454) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 466)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 470) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 482)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 486) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-17 21:00:31:359 grammar LogManager.java:25 import STRINGS=1
2023-08-17 21:00:31:359 grammar LogManager.java:25 import INTS=2
2023-08-17 21:00:31:359 grammar LogManager.java:25 import FLOATS=3
2023-08-17 21:00:31:359 grammar LogManager.java:25 import BOOLS=4
2023-08-17 21:00:31:359 grammar LogManager.java:25 import CHARACTERS=5
2023-08-17 21:00:31:359 grammar LogManager.java:25 import VAR=6
2023-08-17 21:00:31:360 grammar LogManager.java:25 import NIL=7
2023-08-17 21:00:31:360 grammar LogManager.java:25 import TRUE=8
2023-08-17 21:00:31:360 grammar LogManager.java:25 import FALSE=9
2023-08-17 21:00:31:360 grammar LogManager.java:25 import PRINT=10
2023-08-17 21:00:31:360 grammar LogManager.java:25 import IF=11
2023-08-17 21:00:31:360 grammar LogManager.java:25 import ELSE=12
2023-08-17 21:00:31:360 grammar LogManager.java:25 import WHILE=13
2023-08-17 21:00:31:360 grammar LogManager.java:25 import LET=14
2023-08-17 21:00:31:360 grammar LogManager.java:25 import FOR=15
2023-08-17 21:00:31:361 grammar LogManager.java:25 import IN=16
2023-08-17 21:00:31:361 grammar LogManager.java:25 import NUMBER=17
2023-08-17 21:00:31:361 grammar LogManager.java:25 import STRING=18
2023-08-17 21:00:31:361 grammar LogManager.java:25 import ID=19
2023-08-17 21:00:31:361 grammar LogManager.java:25 import DIF=20
2023-08-17 21:00:31:361 grammar LogManager.java:25 import IG_IG=21
2023-08-17 21:00:31:361 grammar LogManager.java:25 import NOT=22
2023-08-17 21:00:31:362 grammar LogManager.java:25 import OR=23
2023-08-17 21:00:31:362 grammar LogManager.java:25 import AND=24
2023-08-17 21:00:31:362 grammar LogManager.java:25 import IG=25
2023-08-17 21:00:31:362 grammar LogManager.java:25 import MAY_IG=26
2023-08-17 21:00:31:362 grammar LogManager.java:25 import MEN_IG=27
2023-08-17 21:00:31:362 grammar LogManager.java:25 import MAYOR=28
2023-08-17 21:00:31:362 grammar LogManager.java:25 import MENOR=29
2023-08-17 21:00:31:362 grammar LogManager.java:25 import MUL=30
2023-08-17 21:00:31:362 grammar LogManager.java:25 import DIV=31
2023-08-17 21:00:31:362 grammar LogManager.java:25 import ADD=32
2023-08-17 21:00:31:363 grammar LogManager.java:25 import SUB=33
2023-08-17 21:00:31:363 grammar LogManager.java:25 import PERCENT=34
2023-08-17 21:00:31:363 grammar LogManager.java:25 import PARIZQ=35
2023-08-17 21:00:31:363 grammar LogManager.java:25 import PARDER=36
2023-08-17 21:00:31:363 grammar LogManager.java:25 import LLAVEIZQ=37
2023-08-17 21:00:31:363 grammar LogManager.java:25 import LLAVEDER=38
2023-08-17 21:00:31:364 grammar LogManager.java:25 import DOUBLEPTS=39
2023-08-17 21:00:31:364 grammar LogManager.java:25 import QUESTION=40
2023-08-17 21:00:31:364 grammar LogManager.java:25 import WHITESPACE=41
2023-08-17 21:00:31:364 grammar LogManager.java:25 import COMMENT=42
2023-08-17 21:00:31:364 grammar LogManager.java:25 import LINE_COMMENT=43
2023-08-17 21:00:31:365 grammar LogManager.java:25 import 'String'=1
2023-08-17 21:00:31:365 grammar LogManager.java:25 import 'Int'=2
2023-08-17 21:00:31:365 grammar LogManager.java:25 import 'Float'=3
2023-08-17 21:00:31:365 grammar LogManager.java:25 import 'Bool'=4
2023-08-17 21:00:31:365 grammar LogManager.java:25 import 'Character'=5
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'var'=6
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'nil'=7
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'true'=8
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'false'=9
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'print'=10
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'if'=11
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'else'=12
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'while'=13
2023-08-17 21:00:31:366 grammar LogManager.java:25 import 'let'=14
2023-08-17 21:00:31:367 grammar LogManager.java:25 import 'for'=15
2023-08-17 21:00:31:367 grammar LogManager.java:25 import 'in'=16
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '!='=20
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '=='=21
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '!'=22
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '||'=23
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '&&'=24
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '='=25
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '>='=26
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '<='=27
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '>'=28
2023-08-17 21:00:31:367 grammar LogManager.java:25 import '<'=29
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '*'=30
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '/'=31
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '+'=32
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '-'=33
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '%'=34
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '('=35
2023-08-17 21:00:31:368 grammar LogManager.java:25 import ')'=36
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '{'=37
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '}'=38
2023-08-17 21:00:31:368 grammar LogManager.java:25 import ':'=39
2023-08-17 21:00:31:368 grammar LogManager.java:25 import '?'=40
2023-08-17 21:00:31:369 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, NUMBER=17, STRING=18, ID=19, DIF=20, IG_IG=21, NOT=22, OR=23, AND=24, IG=25, MAY_IG=26, MEN_IG=27, MAYOR=28, MENOR=29, MUL=30, DIV=31, ADD=32, SUB=33, PERCENT=34, PARIZQ=35, PARDER=36, LLAVEIZQ=37, LLAVEDER=38, DOUBLEPTS=39, QUESTION=40, WHITESPACE=41, COMMENT=42, LINE_COMMENT=43, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, '!='=20, '=='=21, '!'=22, '||'=23, '&&'=24, '='=25, '>='=26, '<='=27, '>'=28, '<'=29, '*'=30, '/'=31, '+'=32, '-'=33, '%'=34, '('=35, ')'=36, '{'=37, '}'=38, ':'=39, '?'=40}
2023-08-17 21:00:31:369 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, NUMBER=17, STRING=18, ID=19, DIF=20, IG_IG=21, NOT=22, OR=23, AND=24, IG=25, MAY_IG=26, MEN_IG=27, MAYOR=28, MENOR=29, MUL=30, DIV=31, ADD=32, SUB=33, PERCENT=34, PARIZQ=35, PARDER=36, LLAVEIZQ=37, LLAVEDER=38, DOUBLEPTS=39, QUESTION=40, WHITESPACE=41, COMMENT=42, LINE_COMMENT=43}
2023-08-17 21:00:31:369 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, '!='=20, '=='=21, '!'=22, '||'=23, '&&'=24, '='=25, '>='=26, '<='=27, '>'=28, '<'=29, '*'=30, '/'=31, '+'=32, '-'=33, '%'=34, '('=35, ')'=36, '{'=37, '}'=38, ':'=39, '?'=40}
2023-08-17 21:00:31:393 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-17 21:00:31:394 LL1 LogManager.java:25 look=[{6, 10..11, 14, 19}, {<EOF>, 38}]
2023-08-17 21:00:31:394 LL1 LogManager.java:25 LL(1)? true
2023-08-17 21:00:31:394 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-17 21:00:31:394 LL1 LogManager.java:25 look=[10, 6, 14, 11, 19]
2023-08-17 21:00:31:394 LL1 LogManager.java:25 LL(1)? true
2023-08-17 21:00:31:395 LL1 LogManager.java:25 
DECISION 2 in rule declarestmt
2023-08-17 21:00:31:395 LL1 LogManager.java:25 look=[6, 6, 6]
2023-08-17 21:00:31:395 LL1 LogManager.java:25 LL(1)? false
2023-08-17 21:00:31:395 LL1 LogManager.java:25 
DECISION 3 in rule constantstmt
2023-08-17 21:00:31:395 LL1 LogManager.java:25 look=[14, 14]
2023-08-17 21:00:31:395 LL1 LogManager.java:25 LL(1)? false
2023-08-17 21:00:31:395 LL1 LogManager.java:25 
DECISION 4 in rule ifstmt
2023-08-17 21:00:31:395 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-17 21:00:31:395 LL1 LogManager.java:25 LL(1)? false
2023-08-17 21:00:31:395 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-17 21:00:31:395 LL1 LogManager.java:25 look=[22, 35, 17, 18, 8, 9, 7, 19]
2023-08-17 21:00:31:395 LL1 LogManager.java:25 LL(1)? true
2023-08-17 21:00:31:395 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-17 21:00:31:395 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-17 21:00:31:395 LL1 LogManager.java:25 LL(1)? false
2023-08-17 21:00:31:395 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-17 21:00:31:396 LL1 LogManager.java:25 look=[null, null]
2023-08-17 21:00:31:396 LL1 LogManager.java:25 LL(1)? false
2023-08-17 21:00:31:396 LL1 LogManager.java:25 
DECISION 8 in rule type
2023-08-17 21:00:31:396 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-08-17 21:00:31:396 LL1 LogManager.java:25 LL(1)? true
2023-08-17 21:00:31:399 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-17 21:00:31:413 action-translator LogManager.java:25 translate $code = $block.blk
2023-08-17 21:00:31:413 action-translator LogManager.java:25 attr [@-1,1:4='code',<0>,18:13]
2023-08-17 21:00:31:414 action-translator LogManager.java:25 qattr [@-1,9:13='block',<0>,18:21].[@-1,15:17='blk',<0>,18:27]
2023-08-17 21:00:31:416 action-translator LogManager.java:25 translate 
$blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-17 21:00:31:416 action-translator LogManager.java:25 attr [@-1,3:5='blk',<0>,23:1]
2023-08-17 21:00:31:418 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-17 21:00:31:418 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,30:13]
2023-08-17 21:00:31:418 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,30:27]
2023-08-17 21:00:31:419 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-17 21:00:31:419 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,36:14]
2023-08-17 21:00:31:419 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,36:22].[@-1,20:23='prnt',<0>,36:32]
2023-08-17 21:00:31:420 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-08-17 21:00:31:420 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,37:15]
2023-08-17 21:00:31:421 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,37:23].[@-1,21:23='dec',<0>,37:35]
2023-08-17 21:00:31:421 action-translator LogManager.java:25 translate $inst = $constantstmt.const
2023-08-17 21:00:31:421 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,38:16]
2023-08-17 21:00:31:421 action-translator LogManager.java:25 qattr [@-1,9:20='constantstmt',<0>,38:24].[@-1,22:26='const',<0>,38:37]
2023-08-17 21:00:31:421 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-08-17 21:00:31:421 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:11]
2023-08-17 21:00:31:421 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,39:19].[@-1,17:19='ift',<0>,39:26]
2023-08-17 21:00:31:421 action-translator LogManager.java:25 translate $inst = $assignationstmt.assign
2023-08-17 21:00:31:421 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:19]
2023-08-17 21:00:31:421 action-translator LogManager.java:25 qattr [@-1,9:23='assignationstmt',<0>,40:27].[@-1,25:30='assign',<0>,40:43]
2023-08-17 21:00:31:423 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)
2023-08-17 21:00:31:423 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,44:29]
2023-08-17 21:00:31:423 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,44:59].[@-1,38:41='line',<0>,44:65]
2023-08-17 21:00:31:424 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,44:72].[@-1,51:53='pos',<0>,44:78]
2023-08-17 21:00:31:424 action-translator LogManager.java:25 qattr [@-1,57:60='expr',<0>,44:84].[@-1,62:62='e',<0>,44:89]
2023-08-17 21:00:31:425 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-08-17 21:00:31:425 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,49:33]
2023-08-17 21:00:31:426 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,49:66].[@-1,38:41='line',<0>,49:70]
2023-08-17 21:00:31:426 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,49:77].[@-1,49:51='pos',<0>,49:81]
2023-08-17 21:00:31:426 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,49:87].[@-1,58:61='text',<0>,49:90]
2023-08-17 21:00:31:427 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,49:97].[@-1,70:70='t',<0>,49:102]
2023-08-17 21:00:31:427 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,49:106].[@-1,79:79='e',<0>,49:111]
2023-08-17 21:00:31:427 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-08-17 21:00:31:428 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,50:18]
2023-08-17 21:00:31:428 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,50:51].[@-1,38:41='line',<0>,50:55]
2023-08-17 21:00:31:428 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,50:62].[@-1,49:51='pos',<0>,50:66]
2023-08-17 21:00:31:428 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,50:72].[@-1,58:61='text',<0>,50:75]
2023-08-17 21:00:31:428 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,50:100].[@-1,88:88='e',<0>,50:105]
2023-08-17 21:00:31:429 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)
2023-08-17 21:00:31:429 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,51:34]
2023-08-17 21:00:31:429 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,51:67].[@-1,38:41='line',<0>,51:71]
2023-08-17 21:00:31:430 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,51:78].[@-1,49:51='pos',<0>,51:82]
2023-08-17 21:00:31:430 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,51:88].[@-1,58:61='text',<0>,51:91]
2023-08-17 21:00:31:430 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,51:98].[@-1,70:70='t',<0>,51:103]
2023-08-17 21:00:31:431 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)
2023-08-17 21:00:31:432 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,55:33]
2023-08-17 21:00:31:432 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,55:68].[@-1,40:43='line',<0>,55:72]
2023-08-17 21:00:31:433 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,55:79].[@-1,51:53='pos',<0>,55:83]
2023-08-17 21:00:31:433 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,55:89].[@-1,60:63='text',<0>,55:92]
2023-08-17 21:00:31:433 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,55:99].[@-1,72:72='t',<0>,55:104]
2023-08-17 21:00:31:433 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,55:108].[@-1,81:81='e',<0>,55:113]
2023-08-17 21:00:31:433 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-08-17 21:00:31:434 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,56:18]
2023-08-17 21:00:31:434 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,56:53].[@-1,40:43='line',<0>,56:57]
2023-08-17 21:00:31:435 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,56:64].[@-1,51:53='pos',<0>,56:68]
2023-08-17 21:00:31:435 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,56:74].[@-1,60:63='text',<0>,56:77]
2023-08-17 21:00:31:435 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,56:102].[@-1,90:90='e',<0>,56:107]
2023-08-17 21:00:31:440 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $instruction.inst, nil) 
2023-08-17 21:00:31:440 action-translator LogManager.java:25 attr [@-1,2:4='ift',<0>,61:56]
2023-08-17 21:00:31:440 action-translator LogManager.java:25 qattr [@-1,28:29='IF',<0>,61:82].[@-1,31:34='line',<0>,61:85]
2023-08-17 21:00:31:440 action-translator LogManager.java:25 qattr [@-1,38:39='IF',<0>,61:92].[@-1,41:43='pos',<0>,61:95]
2023-08-17 21:00:31:441 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,61:101].[@-1,52:52='e',<0>,61:106]
2023-08-17 21:00:31:441 action-translator LogManager.java:25 qattr [@-1,56:66='instruction',<0>,61:110].[@-1,68:71='inst',<0>,61:122]
2023-08-17 21:00:31:442 action-translator LogManager.java:25 translate $assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)
2023-08-17 21:00:31:443 action-translator LogManager.java:25 attr [@-1,1:6='assign',<0>,67:14]
2023-08-17 21:00:31:443 action-translator LogManager.java:25 qattr [@-1,39:40='IG',<0>,67:52].[@-1,42:45='line',<0>,67:55]
2023-08-17 21:00:31:443 action-translator LogManager.java:25 qattr [@-1,49:50='IG',<0>,67:62].[@-1,52:54='pos',<0>,67:65]
2023-08-17 21:00:31:443 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,67:72].[@-1,62:65='text',<0>,67:75]
2023-08-17 21:00:31:444 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,67:82].[@-1,74:74='e',<0>,67:87]
2023-08-17 21:00:31:448 action-translator LogManager.java:25 translate 
2023-08-17 21:00:31:448 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-08-17 21:00:31:449 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:71]
2023-08-17 21:00:31:449 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:101].[@-1,37:41='start',<0>,2:106]
2023-08-17 21:00:31:449 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:124].[@-1,60:64='start',<0>,2:129]
2023-08-17 21:00:31:449 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:149].[@-1,85:85='e',<0>,2:154]
2023-08-17 21:00:31:450 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:158].[@-1,92:95='text',<0>,2:161]
2023-08-17 21:00:31:450 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:168].[@-1,104:104='e',<0>,2:173]
2023-08-17 21:00:31:450 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-17 21:00:31:450 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-08-17 21:00:31:451 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-08-17 21:00:31:451 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-17 21:00:31:451 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-08-17 21:00:31:452 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-08-17 21:00:31:452 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,11:13]
2023-08-17 21:00:31:452 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,11:43].[@-1,240:243='line',<0>,11:50]
2023-08-17 21:00:31:453 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,11:56].[@-1,253:255='pos',<0>,11:63]
2023-08-17 21:00:31:453 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,13:37].[@-1,341:344='text',<0>,13:44]
2023-08-17 21:00:31:454 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,17:13]
2023-08-17 21:00:31:454 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,17:43].[@-1,474:477='line',<0>,17:50]
2023-08-17 21:00:31:454 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,17:56].[@-1,487:489='pos',<0>,17:63]
2023-08-17 21:00:31:454 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-17 21:00:31:454 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,22:16].[@-1,25:28='text',<0>,22:23]
2023-08-17 21:00:31:455 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,23:9]
2023-08-17 21:00:31:455 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,23:39].[@-1,77:80='line',<0>,23:46]
2023-08-17 21:00:31:455 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,23:53].[@-1,91:93='pos',<0>,23:60]
2023-08-17 21:00:31:455 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-17 21:00:31:455 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:33]
2023-08-17 21:00:31:455 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,25:63].[@-1,37:40='line',<0>,25:68]
2023-08-17 21:00:31:456 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,25:75].[@-1,49:51='pos',<0>,25:80]
2023-08-17 21:00:31:456 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-17 21:00:31:456 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:34]
2023-08-17 21:00:31:456 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,26:64].[@-1,38:41='line',<0>,26:70]
2023-08-17 21:00:31:457 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,26:77].[@-1,51:53='pos',<0>,26:83]
2023-08-17 21:00:31:457 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-08-17 21:00:31:457 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-17 21:00:31:457 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-17 21:00:31:457 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-17 21:00:31:458 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-08-17 21:00:31:458 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,28:38]
2023-08-17 21:00:31:458 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,28:43].[@-1,17:22='access',<0>,28:54]
2023-08-17 21:00:31:458 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-17 21:00:31:459 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-17 21:00:31:459 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:139]
2023-08-17 21:00:31:459 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:169].[@-1,37:41='start',<0>,31:174]
2023-08-17 21:00:31:459 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:192].[@-1,60:64='start',<0>,31:197]
2023-08-17 21:00:31:459 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:217].[@-1,85:85='e',<0>,31:222]
2023-08-17 21:00:31:459 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:226].[@-1,92:95='text',<0>,31:229]
2023-08-17 21:00:31:459 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:236].[@-1,105:105='e',<0>,31:242]
2023-08-17 21:00:31:459 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-17 21:00:31:460 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-17 21:00:31:460 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:173]
2023-08-17 21:00:31:460 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:203].[@-1,37:41='start',<0>,32:208]
2023-08-17 21:00:31:460 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:226].[@-1,60:64='start',<0>,32:231]
2023-08-17 21:00:31:460 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:251].[@-1,85:85='e',<0>,32:256]
2023-08-17 21:00:31:460 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:260].[@-1,92:95='text',<0>,32:263]
2023-08-17 21:00:31:460 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:270].[@-1,105:105='e',<0>,32:276]
2023-08-17 21:00:31:461 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-17 21:00:31:461 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-17 21:00:31:461 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-17 21:00:31:461 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-17 21:00:31:461 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-17 21:00:31:461 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-17 21:00:31:462 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-17 21:00:31:462 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-17 21:00:31:462 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-17 21:00:31:462 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-17 21:00:31:462 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:154]
2023-08-17 21:00:31:462 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:184].[@-1,37:41='start',<0>,34:189]
2023-08-17 21:00:31:462 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:207].[@-1,60:64='start',<0>,34:212]
2023-08-17 21:00:31:462 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:232].[@-1,85:85='e',<0>,34:237]
2023-08-17 21:00:31:463 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:241].[@-1,92:95='text',<0>,34:244]
2023-08-17 21:00:31:463 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:251].[@-1,105:105='e',<0>,34:257]
2023-08-17 21:00:31:463 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-17 21:00:31:463 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-17 21:00:31:463 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:151]
2023-08-17 21:00:31:463 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:181].[@-1,37:41='start',<0>,35:186]
2023-08-17 21:00:31:464 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:204].[@-1,60:64='start',<0>,35:209]
2023-08-17 21:00:31:464 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:229].[@-1,85:85='e',<0>,35:234]
2023-08-17 21:00:31:464 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:238].[@-1,92:95='text',<0>,35:241]
2023-08-17 21:00:31:464 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:248].[@-1,105:105='e',<0>,35:254]
2023-08-17 21:00:31:465 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-17 21:00:31:465 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-17 21:00:31:465 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:127]
2023-08-17 21:00:31:465 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:157].[@-1,37:41='start',<0>,36:162]
2023-08-17 21:00:31:465 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:180].[@-1,60:64='start',<0>,36:185]
2023-08-17 21:00:31:465 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:205].[@-1,85:85='e',<0>,36:210]
2023-08-17 21:00:31:465 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:214].[@-1,92:95='text',<0>,36:217]
2023-08-17 21:00:31:466 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:224].[@-1,105:105='e',<0>,36:230]
2023-08-17 21:00:31:466 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-17 21:00:31:466 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-17 21:00:31:467 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:124]
2023-08-17 21:00:31:467 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:154].[@-1,37:41='start',<0>,37:159]
2023-08-17 21:00:31:467 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:177].[@-1,60:64='start',<0>,37:182]
2023-08-17 21:00:31:469 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:202].[@-1,85:85='e',<0>,37:207]
2023-08-17 21:00:31:469 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:211].[@-1,92:95='text',<0>,37:214]
2023-08-17 21:00:31:469 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:221].[@-1,105:105='e',<0>,37:227]
2023-08-17 21:00:31:470 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-17 21:00:31:470 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-17 21:00:31:471 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-17 21:00:31:471 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-17 21:00:31:471 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-17 21:00:31:471 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-17 21:00:31:471 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-17 21:00:31:471 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-08-17 21:00:31:471 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,116:9]
2023-08-17 21:00:31:471 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,116:41].[@-1,36:39='line',<0>,116:44]
2023-08-17 21:00:31:472 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,116:51].[@-1,46:48='pos',<0>,116:54]
2023-08-17 21:00:31:472 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,116:60].[@-1,55:58='text',<0>,116:63]
2023-08-17 21:00:31:472 action-translator LogManager.java:25 translate $t = environment.STRING
2023-08-17 21:00:31:473 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,120:13]
2023-08-17 21:00:31:473 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-08-17 21:00:31:473 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,121:10]
2023-08-17 21:00:31:473 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-08-17 21:00:31:473 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,122:12]
2023-08-17 21:00:31:473 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-08-17 21:00:31:473 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,123:17]
2023-08-17 21:00:31:474 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-08-17 21:00:31:474 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,124:19]
2023-08-17 21:00:31:656 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-17 21:00:31:656 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-17 21:00:31:756 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-17 21:00:31:756 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

