2023-08-23 02:34:43:830 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-23 02:34:44:166 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE STRINGS (BLOCK (ALT 'String'))) (RULE INTS (BLOCK (ALT 'Int'))) (RULE FLOATS (BLOCK (ALT 'Float'))) (RULE BOOLS (BLOCK (ALT 'Bool'))) (RULE CHARACTERS (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE LET (BLOCK (ALT 'let'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE IG_ADD (BLOCK (ALT '+='))) (RULE IG_SUB (BLOCK (ALT '-='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOUBLEPTS (BLOCK (ALT ':'))) (RULE QUESTION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-23 02:34:52:999 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB) (ALT PERCENT))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-23 02:34:53:026 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-23 02:34:53:038 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {$code = $block.blk}))) (RULE block (returns []interface{} blk) (@ init {
$blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declarestmt {$inst = $declarestmt.dec}) (ALT constantstmt {$inst = $constantstmt.const}) (ALT ifstmt { $inst = $ifstmt.ift }) (ALT assignationstmt {$inst = $assignationstmt.assign}) (ALT increaseanddecreasestmt {$inst = $increaseanddecreasestmt.increasedecrease}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)}))) (RULE declarestmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOUBLEPTS type IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)}) (ALT VAR ID IG expr {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)}) (ALT VAR ID DOUBLEPTS type QUESTION {$dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)}))) (RULE constantstmt (returns interfaces.Instruction const) (BLOCK (ALT LET ID DOUBLEPTS type IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)}) (ALT LET ID IG expr {$const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)}))) (RULE ifstmt (returns interfaces.Instruction ift) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt))) (RULE assignationstmt (returns interfaces.Instruction assign) (BLOCK (ALT ID IG expr {$assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)}))) (RULE whilestmt (returns interfaces.Instruction while) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER {$while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)}))) (RULE forstmt (returns interfaces.Instruction for) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB PERCENT)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op SUB) (= left expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT accessstmt {$e = $accessstmt.access}))) (RULE accessstmt (returns interfaces.Expression access) (BLOCK (ALT (= op ID) {$access = expressions.NewAccess($op.line, $op.pos, $op.text)}))) (RULE increaseanddecreasestmt (returns interfaces.Instruction increasedecrease) (BLOCK (ALT ID IG_ADD expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)}) (ALT ID IG_SUB expr {$increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)}))) (RULE type (returns environment.TipoExpresion t) (BLOCK (ALT STRINGS {$t = environment.STRING}) (ALT INTS {$t = environment.INTEGER}) (ALT FLOATS {$t = environment.FLOAT}) (ALT BOOLS {$t = environment.BOOLEAN }) (ALT CHARACTERS {$t = environment.CHARACTER})))))
2023-08-23 02:34:53:038 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-23 02:34:53:179 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op= NOT<tokenIndex=491>   left=expr<tokenIndex=495,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) } 
        | op = SUB<tokenIndex=505>  left=expr<tokenIndex=509,p=8> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)} 
        | PARIZQ<tokenIndex=515> expr<tokenIndex=517> PARDER<tokenIndex=519> { $e = $expr.e } 
        | NUMBER<tokenIndex=525>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=531>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=537> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=543> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=549> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        | accessstmt<tokenIndex=555> {$e = $accessstmt.access} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MUL<tokenIndex=361>|DIV<tokenIndex=363>) right=expr<tokenIndex=368,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(ADD<tokenIndex=381>|SUB<tokenIndex=383>|PERCENT<tokenIndex=385>) right=expr<tokenIndex=390,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MAY_IG<tokenIndex=403>|MAYOR<tokenIndex=405>) right=expr<tokenIndex=410,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MEN_IG<tokenIndex=423>|MENOR<tokenIndex=425>) right=expr<tokenIndex=430,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(IG_IG<tokenIndex=443>|DIF<tokenIndex=445>) right=expr<tokenIndex=450,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=AND<tokenIndex=462> right=expr<tokenIndex=466,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=OR<tokenIndex=478> right=expr<tokenIndex=482,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-23 02:34:53:335 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 491)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 495) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) }) (ALT (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 505)))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 509) (= p 8)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 515))) (expr (ELEMENT_OPTIONS (= tokenIndex 517))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 519))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 525))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 531))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 537))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 543))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 549))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }) (ALT (accessstmt (ELEMENT_OPTIONS (= tokenIndex 555))) {$e = $accessstmt.access})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 361))) (DIV (ELEMENT_OPTIONS (= tokenIndex 363))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 368) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 381))) (SUB (ELEMENT_OPTIONS (= tokenIndex 383))) (PERCENT (ELEMENT_OPTIONS (= tokenIndex 385))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 390) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 403))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 405))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 410) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 423))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 425))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 430) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 443))) (DIF (ELEMENT_OPTIONS (= tokenIndex 445))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 450) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 462)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 466) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 478)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 482) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-23 02:34:53:879 grammar LogManager.java:25 import STRINGS=1
2023-08-23 02:34:53:879 grammar LogManager.java:25 import INTS=2
2023-08-23 02:34:53:879 grammar LogManager.java:25 import FLOATS=3
2023-08-23 02:34:53:880 grammar LogManager.java:25 import BOOLS=4
2023-08-23 02:34:53:880 grammar LogManager.java:25 import CHARACTERS=5
2023-08-23 02:34:53:880 grammar LogManager.java:25 import VAR=6
2023-08-23 02:34:53:880 grammar LogManager.java:25 import NIL=7
2023-08-23 02:34:53:880 grammar LogManager.java:25 import TRUE=8
2023-08-23 02:34:53:882 grammar LogManager.java:25 import FALSE=9
2023-08-23 02:34:53:882 grammar LogManager.java:25 import PRINT=10
2023-08-23 02:34:53:883 grammar LogManager.java:25 import IF=11
2023-08-23 02:34:53:883 grammar LogManager.java:25 import ELSE=12
2023-08-23 02:34:53:883 grammar LogManager.java:25 import WHILE=13
2023-08-23 02:34:53:883 grammar LogManager.java:25 import LET=14
2023-08-23 02:34:53:883 grammar LogManager.java:25 import FOR=15
2023-08-23 02:34:53:883 grammar LogManager.java:25 import IN=16
2023-08-23 02:34:53:883 grammar LogManager.java:25 import NUMBER=17
2023-08-23 02:34:53:883 grammar LogManager.java:25 import STRING=18
2023-08-23 02:34:53:883 grammar LogManager.java:25 import ID=19
2023-08-23 02:34:53:884 grammar LogManager.java:25 import DIF=20
2023-08-23 02:34:53:884 grammar LogManager.java:25 import IG_IG=21
2023-08-23 02:34:53:884 grammar LogManager.java:25 import NOT=22
2023-08-23 02:34:53:885 grammar LogManager.java:25 import OR=23
2023-08-23 02:34:53:885 grammar LogManager.java:25 import AND=24
2023-08-23 02:34:53:886 grammar LogManager.java:25 import IG=25
2023-08-23 02:34:53:886 grammar LogManager.java:25 import IG_ADD=26
2023-08-23 02:34:53:886 grammar LogManager.java:25 import IG_SUB=27
2023-08-23 02:34:53:886 grammar LogManager.java:25 import MAY_IG=28
2023-08-23 02:34:53:886 grammar LogManager.java:25 import MEN_IG=29
2023-08-23 02:34:53:886 grammar LogManager.java:25 import MAYOR=30
2023-08-23 02:34:53:888 grammar LogManager.java:25 import MENOR=31
2023-08-23 02:34:53:891 grammar LogManager.java:25 import MUL=32
2023-08-23 02:34:53:892 grammar LogManager.java:25 import DIV=33
2023-08-23 02:34:53:893 grammar LogManager.java:25 import ADD=34
2023-08-23 02:34:53:893 grammar LogManager.java:25 import SUB=35
2023-08-23 02:34:53:894 grammar LogManager.java:25 import PERCENT=36
2023-08-23 02:34:53:894 grammar LogManager.java:25 import PARIZQ=37
2023-08-23 02:34:53:894 grammar LogManager.java:25 import PARDER=38
2023-08-23 02:34:53:894 grammar LogManager.java:25 import LLAVEIZQ=39
2023-08-23 02:34:53:895 grammar LogManager.java:25 import LLAVEDER=40
2023-08-23 02:34:53:895 grammar LogManager.java:25 import DOUBLEPTS=41
2023-08-23 02:34:53:895 grammar LogManager.java:25 import QUESTION=42
2023-08-23 02:34:53:895 grammar LogManager.java:25 import WHITESPACE=43
2023-08-23 02:34:53:895 grammar LogManager.java:25 import COMMENT=44
2023-08-23 02:34:53:896 grammar LogManager.java:25 import LINE_COMMENT=45
2023-08-23 02:34:53:896 grammar LogManager.java:25 import 'String'=1
2023-08-23 02:34:53:896 grammar LogManager.java:25 import 'Int'=2
2023-08-23 02:34:53:896 grammar LogManager.java:25 import 'Float'=3
2023-08-23 02:34:53:896 grammar LogManager.java:25 import 'Bool'=4
2023-08-23 02:34:53:896 grammar LogManager.java:25 import 'Character'=5
2023-08-23 02:34:53:897 grammar LogManager.java:25 import 'var'=6
2023-08-23 02:34:53:897 grammar LogManager.java:25 import 'nil'=7
2023-08-23 02:34:53:897 grammar LogManager.java:25 import 'true'=8
2023-08-23 02:34:53:897 grammar LogManager.java:25 import 'false'=9
2023-08-23 02:34:53:897 grammar LogManager.java:25 import 'print'=10
2023-08-23 02:34:53:897 grammar LogManager.java:25 import 'if'=11
2023-08-23 02:34:53:898 grammar LogManager.java:25 import 'else'=12
2023-08-23 02:34:53:899 grammar LogManager.java:25 import 'while'=13
2023-08-23 02:34:53:899 grammar LogManager.java:25 import 'let'=14
2023-08-23 02:34:53:899 grammar LogManager.java:25 import 'for'=15
2023-08-23 02:34:53:899 grammar LogManager.java:25 import 'in'=16
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '!='=20
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '=='=21
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '!'=22
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '||'=23
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '&&'=24
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '='=25
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '+='=26
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '-='=27
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '>='=28
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '<='=29
2023-08-23 02:34:53:900 grammar LogManager.java:25 import '>'=30
2023-08-23 02:34:53:901 grammar LogManager.java:25 import '<'=31
2023-08-23 02:34:53:901 grammar LogManager.java:25 import '*'=32
2023-08-23 02:34:53:901 grammar LogManager.java:25 import '/'=33
2023-08-23 02:34:53:902 grammar LogManager.java:25 import '+'=34
2023-08-23 02:34:53:902 grammar LogManager.java:25 import '-'=35
2023-08-23 02:34:53:902 grammar LogManager.java:25 import '%'=36
2023-08-23 02:34:53:902 grammar LogManager.java:25 import '('=37
2023-08-23 02:34:53:902 grammar LogManager.java:25 import ')'=38
2023-08-23 02:34:53:902 grammar LogManager.java:25 import '{'=39
2023-08-23 02:34:53:902 grammar LogManager.java:25 import '}'=40
2023-08-23 02:34:53:902 grammar LogManager.java:25 import ':'=41
2023-08-23 02:34:53:902 grammar LogManager.java:25 import '?'=42
2023-08-23 02:34:53:904 grammar LogManager.java:25 tokens={STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, NUMBER=17, STRING=18, ID=19, DIF=20, IG_IG=21, NOT=22, OR=23, AND=24, IG=25, IG_ADD=26, IG_SUB=27, MAY_IG=28, MEN_IG=29, MAYOR=30, MENOR=31, MUL=32, DIV=33, ADD=34, SUB=35, PERCENT=36, PARIZQ=37, PARDER=38, LLAVEIZQ=39, LLAVEDER=40, DOUBLEPTS=41, QUESTION=42, WHITESPACE=43, COMMENT=44, LINE_COMMENT=45, 'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, '!='=20, '=='=21, '!'=22, '||'=23, '&&'=24, '='=25, '+='=26, '-='=27, '>='=28, '<='=29, '>'=30, '<'=31, '*'=32, '/'=33, '+'=34, '-'=35, '%'=36, '('=37, ')'=38, '{'=39, '}'=40, ':'=41, '?'=42}
2023-08-23 02:34:53:906 semantics LogManager.java:25 tokens={EOF=-1, STRINGS=1, INTS=2, FLOATS=3, BOOLS=4, CHARACTERS=5, VAR=6, NIL=7, TRUE=8, FALSE=9, PRINT=10, IF=11, ELSE=12, WHILE=13, LET=14, FOR=15, IN=16, NUMBER=17, STRING=18, ID=19, DIF=20, IG_IG=21, NOT=22, OR=23, AND=24, IG=25, IG_ADD=26, IG_SUB=27, MAY_IG=28, MEN_IG=29, MAYOR=30, MENOR=31, MUL=32, DIV=33, ADD=34, SUB=35, PERCENT=36, PARIZQ=37, PARDER=38, LLAVEIZQ=39, LLAVEDER=40, DOUBLEPTS=41, QUESTION=42, WHITESPACE=43, COMMENT=44, LINE_COMMENT=45}
2023-08-23 02:34:53:907 semantics LogManager.java:25 strings={'String'=1, 'Int'=2, 'Float'=3, 'Bool'=4, 'Character'=5, 'var'=6, 'nil'=7, 'true'=8, 'false'=9, 'print'=10, 'if'=11, 'else'=12, 'while'=13, 'let'=14, 'for'=15, 'in'=16, '!='=20, '=='=21, '!'=22, '||'=23, '&&'=24, '='=25, '+='=26, '-='=27, '>='=28, '<='=29, '>'=30, '<'=31, '*'=32, '/'=33, '+'=34, '-'=35, '%'=36, '('=37, ')'=38, '{'=39, '}'=40, ':'=41, '?'=42}
2023-08-23 02:34:54:199 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-23 02:34:54:202 LL1 LogManager.java:25 look=[{6, 10..11, 14, 19}, {<EOF>, 40}]
2023-08-23 02:34:54:204 LL1 LogManager.java:25 LL(1)? true
2023-08-23 02:34:54:204 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-23 02:34:54:205 LL1 LogManager.java:25 look=[10, 6, 14, 11, 19, 19]
2023-08-23 02:34:54:205 LL1 LogManager.java:25 LL(1)? false
2023-08-23 02:34:54:205 LL1 LogManager.java:25 
DECISION 2 in rule declarestmt
2023-08-23 02:34:54:205 LL1 LogManager.java:25 look=[6, 6, 6]
2023-08-23 02:34:54:205 LL1 LogManager.java:25 LL(1)? false
2023-08-23 02:34:54:205 LL1 LogManager.java:25 
DECISION 3 in rule constantstmt
2023-08-23 02:34:54:205 LL1 LogManager.java:25 look=[14, 14]
2023-08-23 02:34:54:205 LL1 LogManager.java:25 LL(1)? false
2023-08-23 02:34:54:206 LL1 LogManager.java:25 
DECISION 4 in rule ifstmt
2023-08-23 02:34:54:207 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-23 02:34:54:207 LL1 LogManager.java:25 LL(1)? false
2023-08-23 02:34:54:207 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-23 02:34:54:207 LL1 LogManager.java:25 look=[22, 35, 37, 17, 18, 8, 9, 7, 19]
2023-08-23 02:34:54:207 LL1 LogManager.java:25 LL(1)? true
2023-08-23 02:34:54:207 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-23 02:34:54:208 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-23 02:34:54:208 LL1 LogManager.java:25 LL(1)? false
2023-08-23 02:34:54:209 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-23 02:34:54:212 LL1 LogManager.java:25 look=[null, null]
2023-08-23 02:34:54:212 LL1 LogManager.java:25 LL(1)? false
2023-08-23 02:34:54:212 LL1 LogManager.java:25 
DECISION 8 in rule increaseanddecreasestmt
2023-08-23 02:34:54:212 LL1 LogManager.java:25 look=[19, 19]
2023-08-23 02:34:54:212 LL1 LogManager.java:25 LL(1)? false
2023-08-23 02:34:54:212 LL1 LogManager.java:25 
DECISION 9 in rule type
2023-08-23 02:34:54:212 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-08-23 02:34:54:212 LL1 LogManager.java:25 LL(1)? true
2023-08-23 02:34:54:231 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-23 02:34:54:283 action-translator LogManager.java:25 translate $code = $block.blk
2023-08-23 02:34:54:284 action-translator LogManager.java:25 attr [@-1,1:4='code',<0>,18:13]
2023-08-23 02:34:54:289 action-translator LogManager.java:25 qattr [@-1,9:13='block',<0>,18:21].[@-1,15:17='blk',<0>,18:27]
2023-08-23 02:34:54:297 action-translator LogManager.java:25 translate 
$blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-23 02:34:54:298 action-translator LogManager.java:25 attr [@-1,3:5='blk',<0>,23:1]
2023-08-23 02:34:54:319 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-23 02:34:54:320 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,30:13]
2023-08-23 02:34:54:321 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,30:27]
2023-08-23 02:34:54:324 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-23 02:34:54:324 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,36:14]
2023-08-23 02:34:54:326 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,36:22].[@-1,20:23='prnt',<0>,36:32]
2023-08-23 02:34:54:327 action-translator LogManager.java:25 translate $inst = $declarestmt.dec
2023-08-23 02:34:54:327 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,37:15]
2023-08-23 02:34:54:328 action-translator LogManager.java:25 qattr [@-1,9:19='declarestmt',<0>,37:23].[@-1,21:23='dec',<0>,37:35]
2023-08-23 02:34:54:330 action-translator LogManager.java:25 translate $inst = $constantstmt.const
2023-08-23 02:34:54:331 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,38:16]
2023-08-23 02:34:54:331 action-translator LogManager.java:25 qattr [@-1,9:20='constantstmt',<0>,38:24].[@-1,22:26='const',<0>,38:37]
2023-08-23 02:34:54:333 action-translator LogManager.java:25 translate  $inst = $ifstmt.ift 
2023-08-23 02:34:54:334 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:11]
2023-08-23 02:34:54:335 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,39:19].[@-1,17:19='ift',<0>,39:26]
2023-08-23 02:34:54:336 action-translator LogManager.java:25 translate $inst = $assignationstmt.assign
2023-08-23 02:34:54:336 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:19]
2023-08-23 02:34:54:337 action-translator LogManager.java:25 qattr [@-1,9:23='assignationstmt',<0>,40:27].[@-1,25:30='assign',<0>,40:43]
2023-08-23 02:34:54:337 action-translator LogManager.java:25 translate $inst = $increaseanddecreasestmt.increasedecrease
2023-08-23 02:34:54:338 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,41:27]
2023-08-23 02:34:54:338 action-translator LogManager.java:25 qattr [@-1,9:31='increaseanddecreasestmt',<0>,41:35].[@-1,33:48='increasedecrease',<0>,41:59]
2023-08-23 02:34:54:344 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line, $PRINT.pos, $expr.e)
2023-08-23 02:34:54:344 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,45:29]
2023-08-23 02:34:54:344 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,45:59].[@-1,38:41='line',<0>,45:65]
2023-08-23 02:34:54:345 action-translator LogManager.java:25 qattr [@-1,45:49='PRINT',<0>,45:72].[@-1,51:53='pos',<0>,45:78]
2023-08-23 02:34:54:345 action-translator LogManager.java:25 qattr [@-1,57:60='expr',<0>,45:84].[@-1,62:62='e',<0>,45:89]
2023-08-23 02:34:54:353 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, $expr.e, false)
2023-08-23 02:34:54:354 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,50:33]
2023-08-23 02:34:54:354 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,50:66].[@-1,38:41='line',<0>,50:70]
2023-08-23 02:34:54:355 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,50:77].[@-1,49:51='pos',<0>,50:81]
2023-08-23 02:34:54:355 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,50:87].[@-1,58:61='text',<0>,50:90]
2023-08-23 02:34:54:372 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,50:97].[@-1,70:70='t',<0>,50:102]
2023-08-23 02:34:54:373 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,50:106].[@-1,79:79='e',<0>,50:111]
2023-08-23 02:34:54:375 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-08-23 02:34:54:376 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,51:18]
2023-08-23 02:34:54:376 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,51:51].[@-1,38:41='line',<0>,51:55]
2023-08-23 02:34:54:377 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,51:62].[@-1,49:51='pos',<0>,51:66]
2023-08-23 02:34:54:377 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,51:72].[@-1,58:61='text',<0>,51:75]
2023-08-23 02:34:54:378 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,51:100].[@-1,88:88='e',<0>,51:105]
2023-08-23 02:34:54:380 action-translator LogManager.java:25 translate $dec = instructions.NewTodeclare($VAR.line, $VAR.pos, $ID.text, $type.t, nil, false)
2023-08-23 02:34:54:381 action-translator LogManager.java:25 attr [@-1,1:3='dec',<0>,52:34]
2023-08-23 02:34:54:382 action-translator LogManager.java:25 qattr [@-1,34:36='VAR',<0>,52:67].[@-1,38:41='line',<0>,52:71]
2023-08-23 02:34:54:383 action-translator LogManager.java:25 qattr [@-1,45:47='VAR',<0>,52:78].[@-1,49:51='pos',<0>,52:82]
2023-08-23 02:34:54:383 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,52:88].[@-1,58:61='text',<0>,52:91]
2023-08-23 02:34:54:384 action-translator LogManager.java:25 qattr [@-1,65:68='type',<0>,52:98].[@-1,70:70='t',<0>,52:103]
2023-08-23 02:34:54:386 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, $type.t, $expr.e, true)
2023-08-23 02:34:54:387 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,56:33]
2023-08-23 02:34:54:387 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,56:68].[@-1,40:43='line',<0>,56:72]
2023-08-23 02:34:54:388 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,56:79].[@-1,51:53='pos',<0>,56:83]
2023-08-23 02:34:54:389 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,56:89].[@-1,60:63='text',<0>,56:92]
2023-08-23 02:34:54:389 action-translator LogManager.java:25 qattr [@-1,67:70='type',<0>,56:99].[@-1,72:72='t',<0>,56:104]
2023-08-23 02:34:54:390 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,56:108].[@-1,81:81='e',<0>,56:113]
2023-08-23 02:34:54:392 action-translator LogManager.java:25 translate $const = instructions.NewTodeclare($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-08-23 02:34:54:392 action-translator LogManager.java:25 attr [@-1,1:5='const',<0>,57:18]
2023-08-23 02:34:54:393 action-translator LogManager.java:25 qattr [@-1,36:38='LET',<0>,57:53].[@-1,40:43='line',<0>,57:57]
2023-08-23 02:34:54:394 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,57:64].[@-1,51:53='pos',<0>,57:68]
2023-08-23 02:34:54:395 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,57:74].[@-1,60:63='text',<0>,57:77]
2023-08-23 02:34:54:396 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,57:102].[@-1,90:90='e',<0>,57:107]
2023-08-23 02:34:54:405 action-translator LogManager.java:25 translate  $ift = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-08-23 02:34:54:405 action-translator LogManager.java:25 attr [@-1,2:4='ift',<0>,62:37]
2023-08-23 02:34:54:406 action-translator LogManager.java:25 qattr [@-1,28:29='IF',<0>,62:63].[@-1,31:34='line',<0>,62:66]
2023-08-23 02:34:54:406 action-translator LogManager.java:25 qattr [@-1,38:39='IF',<0>,62:73].[@-1,41:43='pos',<0>,62:76]
2023-08-23 02:34:54:407 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,62:82].[@-1,52:52='e',<0>,62:87]
2023-08-23 02:34:54:408 action-translator LogManager.java:25 qattr [@-1,56:60='block',<0>,62:91].[@-1,62:64='blk',<0>,62:97]
2023-08-23 02:34:54:415 action-translator LogManager.java:25 translate $assign = instructions.NewAssignation($IG.line, $IG.pos,  $ID.text, $expr.e)
2023-08-23 02:34:54:416 action-translator LogManager.java:25 attr [@-1,1:6='assign',<0>,68:14]
2023-08-23 02:34:54:416 action-translator LogManager.java:25 qattr [@-1,39:40='IG',<0>,68:52].[@-1,42:45='line',<0>,68:55]
2023-08-23 02:34:54:417 action-translator LogManager.java:25 qattr [@-1,49:50='IG',<0>,68:62].[@-1,52:54='pos',<0>,68:65]
2023-08-23 02:34:54:417 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,68:72].[@-1,62:65='text',<0>,68:75]
2023-08-23 02:34:54:418 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,68:82].[@-1,74:74='e',<0>,68:87]
2023-08-23 02:34:54:423 action-translator LogManager.java:25 translate $while = instructions.NewWhile($WHILE.line, $WHILE.pos,  $expr.e, $block.blk)
2023-08-23 02:34:54:424 action-translator LogManager.java:25 attr [@-1,1:5='while',<0>,72:38]
2023-08-23 02:34:54:424 action-translator LogManager.java:25 qattr [@-1,32:36='WHILE',<0>,72:69].[@-1,38:41='line',<0>,72:75]
2023-08-23 02:34:54:427 action-translator LogManager.java:25 qattr [@-1,45:49='WHILE',<0>,72:82].[@-1,51:53='pos',<0>,72:88]
2023-08-23 02:34:54:428 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,72:95].[@-1,63:63='e',<0>,72:100]
2023-08-23 02:34:54:428 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,72:104].[@-1,73:75='blk',<0>,72:110]
2023-08-23 02:34:54:443 action-translator LogManager.java:25 translate 
2023-08-23 02:34:54:445 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $left.e) 
2023-08-23 02:34:54:445 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:71]
2023-08-23 02:34:54:446 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,2:101].[@-1,37:41='start',<0>,2:106]
2023-08-23 02:34:54:447 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,2:124].[@-1,60:64='start',<0>,2:129]
2023-08-23 02:34:54:447 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,2:149].[@-1,85:85='e',<0>,2:154]
2023-08-23 02:34:54:447 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,2:158].[@-1,92:95='text',<0>,2:161]
2023-08-23 02:34:54:448 action-translator LogManager.java:25 qattr [@-1,99:102='left',<0>,2:168].[@-1,104:104='e',<0>,2:173]
2023-08-23 02:34:54:450 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e,  $op.text, nil)
2023-08-23 02:34:54:450 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:68]
2023-08-23 02:34:54:451 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,3:98].[@-1,37:41='start',<0>,3:103]
2023-08-23 02:34:54:451 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,3:121].[@-1,60:64='start',<0>,3:126]
2023-08-23 02:34:54:452 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,3:146].[@-1,85:85='e',<0>,3:151]
2023-08-23 02:34:54:452 action-translator LogManager.java:25 qattr [@-1,90:91='op',<0>,3:156].[@-1,93:96='text',<0>,3:159]
2023-08-23 02:34:54:453 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-23 02:34:54:453 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-08-23 02:34:54:454 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-08-23 02:34:54:484 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-23 02:34:54:484 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-23 02:34:54:485 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-23 02:34:54:486 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-23 02:34:54:486 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-23 02:34:54:486 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-23 02:34:54:488 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-23 02:34:54:491 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-23 02:34:54:491 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-23 02:34:54:492 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-23 02:34:54:492 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-23 02:34:54:492 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-23 02:34:54:493 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-23 02:34:54:493 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-23 02:34:54:494 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-23 02:34:54:495 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-23 02:34:54:496 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:33]
2023-08-23 02:34:54:496 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,26:63].[@-1,37:40='line',<0>,26:68]
2023-08-23 02:34:54:496 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,26:75].[@-1,49:51='pos',<0>,26:80]
2023-08-23 02:34:54:496 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-23 02:34:54:497 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:34]
2023-08-23 02:34:54:497 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,27:64].[@-1,38:41='line',<0>,27:70]
2023-08-23 02:34:54:497 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,27:77].[@-1,51:53='pos',<0>,27:83]
2023-08-23 02:34:54:498 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-08-23 02:34:54:498 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:32]
2023-08-23 02:34:54:501 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,28:62].[@-1,36:39='line',<0>,28:66]
2023-08-23 02:34:54:501 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,28:73].[@-1,47:49='pos',<0>,28:77]
2023-08-23 02:34:54:502 action-translator LogManager.java:25 translate $e = $accessstmt.access
2023-08-23 02:34:54:502 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,29:38]
2023-08-23 02:34:54:502 action-translator LogManager.java:25 qattr [@-1,6:15='accessstmt',<0>,29:43].[@-1,17:22='access',<0>,29:54]
2023-08-23 02:34:54:507 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-23 02:34:54:511 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 02:34:54:512 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:139]
2023-08-23 02:34:54:512 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:169].[@-1,37:41='start',<0>,32:174]
2023-08-23 02:34:54:513 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:192].[@-1,60:64='start',<0>,32:197]
2023-08-23 02:34:54:514 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:217].[@-1,85:85='e',<0>,32:222]
2023-08-23 02:34:54:514 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:226].[@-1,92:95='text',<0>,32:229]
2023-08-23 02:34:54:514 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:236].[@-1,105:105='e',<0>,32:242]
2023-08-23 02:34:54:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-23 02:34:54:517 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 02:34:54:517 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:173]
2023-08-23 02:34:54:522 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:203].[@-1,37:41='start',<0>,33:208]
2023-08-23 02:34:54:522 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:226].[@-1,60:64='start',<0>,33:231]
2023-08-23 02:34:54:522 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:251].[@-1,85:85='e',<0>,33:256]
2023-08-23 02:34:54:522 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:260].[@-1,92:95='text',<0>,33:263]
2023-08-23 02:34:54:523 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:270].[@-1,105:105='e',<0>,33:276]
2023-08-23 02:34:54:525 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-23 02:34:54:528 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 02:34:54:528 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:154]
2023-08-23 02:34:54:529 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:184].[@-1,37:41='start',<0>,34:189]
2023-08-23 02:34:54:529 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:207].[@-1,60:64='start',<0>,34:212]
2023-08-23 02:34:54:531 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:232].[@-1,85:85='e',<0>,34:237]
2023-08-23 02:34:54:531 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:241].[@-1,92:95='text',<0>,34:244]
2023-08-23 02:34:54:532 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:251].[@-1,105:105='e',<0>,34:257]
2023-08-23 02:34:54:532 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-23 02:34:54:533 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 02:34:54:534 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:154]
2023-08-23 02:34:54:534 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:184].[@-1,37:41='start',<0>,35:189]
2023-08-23 02:34:54:535 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:207].[@-1,60:64='start',<0>,35:212]
2023-08-23 02:34:54:535 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:232].[@-1,85:85='e',<0>,35:237]
2023-08-23 02:34:54:535 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:241].[@-1,92:95='text',<0>,35:244]
2023-08-23 02:34:54:537 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:251].[@-1,105:105='e',<0>,35:257]
2023-08-23 02:34:54:538 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-23 02:34:54:543 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 02:34:54:543 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:151]
2023-08-23 02:34:54:546 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:181].[@-1,37:41='start',<0>,36:186]
2023-08-23 02:34:54:546 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:204].[@-1,60:64='start',<0>,36:209]
2023-08-23 02:34:54:546 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:229].[@-1,85:85='e',<0>,36:234]
2023-08-23 02:34:54:546 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:238].[@-1,92:95='text',<0>,36:241]
2023-08-23 02:34:54:546 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:248].[@-1,105:105='e',<0>,36:254]
2023-08-23 02:34:54:548 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-23 02:34:54:549 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 02:34:54:549 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:127]
2023-08-23 02:34:54:551 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:157].[@-1,37:41='start',<0>,37:162]
2023-08-23 02:34:54:551 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:180].[@-1,60:64='start',<0>,37:185]
2023-08-23 02:34:54:553 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:205].[@-1,85:85='e',<0>,37:210]
2023-08-23 02:34:54:553 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:214].[@-1,92:95='text',<0>,37:217]
2023-08-23 02:34:54:553 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:224].[@-1,105:105='e',<0>,37:230]
2023-08-23 02:34:54:553 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-23 02:34:54:554 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 02:34:54:555 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:126]
2023-08-23 02:34:54:555 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:156].[@-1,37:41='start',<0>,38:161]
2023-08-23 02:34:54:555 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:179].[@-1,60:64='start',<0>,38:184]
2023-08-23 02:34:54:555 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:204].[@-1,85:85='e',<0>,38:209]
2023-08-23 02:34:54:556 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:213].[@-1,92:95='text',<0>,38:216]
2023-08-23 02:34:54:556 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:223].[@-1,105:105='e',<0>,38:229]
2023-08-23 02:34:54:574 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-23 02:34:54:574 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-23 02:34:54:574 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-23 02:34:54:574 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-23 02:34:54:574 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-23 02:34:54:576 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-23 02:34:54:576 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-23 02:34:54:577 action-translator LogManager.java:25 translate $access = expressions.NewAccess($op.line, $op.pos, $op.text)
2023-08-23 02:34:54:577 action-translator LogManager.java:25 attr [@-1,1:6='access',<0>,119:9]
2023-08-23 02:34:54:577 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,119:41].[@-1,36:39='line',<0>,119:44]
2023-08-23 02:34:54:581 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,119:51].[@-1,46:48='pos',<0>,119:54]
2023-08-23 02:34:54:582 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,119:60].[@-1,55:58='text',<0>,119:63]
2023-08-23 02:34:54:585 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_ADD.text, $expr.e)
2023-08-23 02:34:54:585 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,123:18]
2023-08-23 02:34:54:586 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,123:71].[@-1,57:60='line',<0>,123:74]
2023-08-23 02:34:54:587 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,123:81].[@-1,67:69='pos',<0>,123:84]
2023-08-23 02:34:54:587 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,123:90].[@-1,76:79='text',<0>,123:93]
2023-08-23 02:34:54:588 action-translator LogManager.java:25 qattr [@-1,83:88='IG_ADD',<0>,123:100].[@-1,90:93='text',<0>,123:107]
2023-08-23 02:34:54:589 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,123:114].[@-1,102:102='e',<0>,123:119]
2023-08-23 02:34:54:591 action-translator LogManager.java:25 translate $increasedecrease = instructions.NewIncreaseDecrease($ID.line, $ID.pos, $ID.text, $IG_SUB.text, $expr.e)
2023-08-23 02:34:54:593 action-translator LogManager.java:25 attr [@-1,1:16='increasedecrease',<0>,124:18]
2023-08-23 02:34:54:594 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,124:71].[@-1,57:60='line',<0>,124:74]
2023-08-23 02:34:54:594 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,124:81].[@-1,67:69='pos',<0>,124:84]
2023-08-23 02:34:54:595 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,124:90].[@-1,76:79='text',<0>,124:93]
2023-08-23 02:34:54:595 action-translator LogManager.java:25 qattr [@-1,83:88='IG_SUB',<0>,124:100].[@-1,90:93='text',<0>,124:107]
2023-08-23 02:34:54:596 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,124:114].[@-1,102:102='e',<0>,124:119]
2023-08-23 02:34:54:598 action-translator LogManager.java:25 translate $t = environment.STRING
2023-08-23 02:34:54:600 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,129:13]
2023-08-23 02:34:54:602 action-translator LogManager.java:25 translate $t = environment.INTEGER
2023-08-23 02:34:54:602 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,130:10]
2023-08-23 02:34:54:602 action-translator LogManager.java:25 translate $t = environment.FLOAT
2023-08-23 02:34:54:602 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,131:12]
2023-08-23 02:34:54:602 action-translator LogManager.java:25 translate $t = environment.BOOLEAN 
2023-08-23 02:34:54:603 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,132:17]
2023-08-23 02:34:54:603 action-translator LogManager.java:25 translate $t = environment.CHARACTER
2023-08-23 02:34:54:603 action-translator LogManager.java:25 attr [@-1,1:1='t',<0>,133:19]
2023-08-23 02:34:55:757 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-23 02:34:55:759 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-23 02:34:56:055 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-23 02:34:56:056 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

