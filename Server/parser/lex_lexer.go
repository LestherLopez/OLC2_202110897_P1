// Code generated from Lex.g4 by ANTLR 4.13.0. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type Lex struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var LexLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func lexLexerInit() {
	staticData := &LexLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'int'", "'float'", "'bool'", "'character'", "'var'", "'nil'", "'true'",
		"'false'", "'print'", "'if'", "'else'", "'while'", "", "", "", "'!='",
		"'=='", "'!'", "'||'", "'&&'", "'='", "'>='", "'<='", "'>'", "'<'",
		"'*'", "'/'", "'+'", "'-'", "'('", "')'", "'{'", "'}'",
	}
	staticData.SymbolicNames = []string{
		"", "INT", "FLOAT", "BOOL", "CHARACTER", "VAR", "NIL", "TRUE", "FALSE",
		"PRINT", "IF", "ELSE", "WHILE", "NUMBER", "STRING", "ID", "DIF", "IG_IG",
		"NOT", "OR", "AND", "IG", "MAY_IG", "MEN_IG", "MAYOR", "MENOR", "MUL",
		"DIV", "ADD", "SUB", "PARIZQ", "PARDER", "LLAVEIZQ", "LLAVEDER", "WHITESPACE",
		"COMMENT", "LINE_COMMENT",
	}
	staticData.RuleNames = []string{
		"INT", "FLOAT", "BOOL", "CHARACTER", "VAR", "NIL", "TRUE", "FALSE",
		"PRINT", "IF", "ELSE", "WHILE", "NUMBER", "STRING", "ID", "DIF", "IG_IG",
		"NOT", "OR", "AND", "IG", "MAY_IG", "MEN_IG", "MAYOR", "MENOR", "MUL",
		"DIV", "ADD", "SUB", "PARIZQ", "PARDER", "LLAVEIZQ", "LLAVEDER", "WHITESPACE",
		"COMMENT", "LINE_COMMENT", "ESC_SEQ",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 36, 245, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
		1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
		1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 4, 12, 141, 8, 12, 11,
		12, 12, 12, 142, 1, 12, 1, 12, 4, 12, 147, 8, 12, 11, 12, 12, 12, 148,
		3, 12, 151, 8, 12, 1, 13, 1, 13, 5, 13, 155, 8, 13, 10, 13, 12, 13, 158,
		9, 13, 1, 13, 1, 13, 1, 14, 1, 14, 5, 14, 164, 8, 14, 10, 14, 12, 14, 167,
		9, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1,
		18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22,
		1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1,
		27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 32,
		1, 32, 1, 33, 4, 33, 212, 8, 33, 11, 33, 12, 33, 213, 1, 33, 1, 33, 1,
		34, 1, 34, 1, 34, 1, 34, 5, 34, 222, 8, 34, 10, 34, 12, 34, 225, 9, 34,
		1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 5, 35, 236,
		8, 35, 10, 35, 12, 35, 239, 9, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1,
		223, 0, 37, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19,
		10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37,
		19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55,
		28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73,
		0, 1, 0, 7, 1, 0, 48, 57, 1, 0, 34, 34, 2, 0, 65, 90, 97, 122, 4, 0, 48,
		57, 65, 90, 95, 95, 97, 122, 4, 0, 9, 10, 13, 13, 32, 32, 92, 92, 2, 0,
		10, 10, 13, 13, 7, 0, 32, 33, 35, 35, 43, 43, 45, 46, 58, 58, 64, 64, 91,
		93, 251, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1,
		0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15,
		1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0,
		23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0,
		0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0,
		0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0,
		0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1,
		0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61,
		1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0,
		69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 1, 75, 1, 0, 0, 0, 3, 79, 1, 0, 0, 0,
		5, 85, 1, 0, 0, 0, 7, 90, 1, 0, 0, 0, 9, 100, 1, 0, 0, 0, 11, 104, 1, 0,
		0, 0, 13, 108, 1, 0, 0, 0, 15, 113, 1, 0, 0, 0, 17, 119, 1, 0, 0, 0, 19,
		125, 1, 0, 0, 0, 21, 128, 1, 0, 0, 0, 23, 133, 1, 0, 0, 0, 25, 140, 1,
		0, 0, 0, 27, 152, 1, 0, 0, 0, 29, 161, 1, 0, 0, 0, 31, 168, 1, 0, 0, 0,
		33, 171, 1, 0, 0, 0, 35, 174, 1, 0, 0, 0, 37, 176, 1, 0, 0, 0, 39, 179,
		1, 0, 0, 0, 41, 182, 1, 0, 0, 0, 43, 184, 1, 0, 0, 0, 45, 187, 1, 0, 0,
		0, 47, 190, 1, 0, 0, 0, 49, 192, 1, 0, 0, 0, 51, 194, 1, 0, 0, 0, 53, 196,
		1, 0, 0, 0, 55, 198, 1, 0, 0, 0, 57, 200, 1, 0, 0, 0, 59, 202, 1, 0, 0,
		0, 61, 204, 1, 0, 0, 0, 63, 206, 1, 0, 0, 0, 65, 208, 1, 0, 0, 0, 67, 211,
		1, 0, 0, 0, 69, 217, 1, 0, 0, 0, 71, 231, 1, 0, 0, 0, 73, 242, 1, 0, 0,
		0, 75, 76, 5, 105, 0, 0, 76, 77, 5, 110, 0, 0, 77, 78, 5, 116, 0, 0, 78,
		2, 1, 0, 0, 0, 79, 80, 5, 102, 0, 0, 80, 81, 5, 108, 0, 0, 81, 82, 5, 111,
		0, 0, 82, 83, 5, 97, 0, 0, 83, 84, 5, 116, 0, 0, 84, 4, 1, 0, 0, 0, 85,
		86, 5, 98, 0, 0, 86, 87, 5, 111, 0, 0, 87, 88, 5, 111, 0, 0, 88, 89, 5,
		108, 0, 0, 89, 6, 1, 0, 0, 0, 90, 91, 5, 99, 0, 0, 91, 92, 5, 104, 0, 0,
		92, 93, 5, 97, 0, 0, 93, 94, 5, 114, 0, 0, 94, 95, 5, 97, 0, 0, 95, 96,
		5, 99, 0, 0, 96, 97, 5, 116, 0, 0, 97, 98, 5, 101, 0, 0, 98, 99, 5, 114,
		0, 0, 99, 8, 1, 0, 0, 0, 100, 101, 5, 118, 0, 0, 101, 102, 5, 97, 0, 0,
		102, 103, 5, 114, 0, 0, 103, 10, 1, 0, 0, 0, 104, 105, 5, 110, 0, 0, 105,
		106, 5, 105, 0, 0, 106, 107, 5, 108, 0, 0, 107, 12, 1, 0, 0, 0, 108, 109,
		5, 116, 0, 0, 109, 110, 5, 114, 0, 0, 110, 111, 5, 117, 0, 0, 111, 112,
		5, 101, 0, 0, 112, 14, 1, 0, 0, 0, 113, 114, 5, 102, 0, 0, 114, 115, 5,
		97, 0, 0, 115, 116, 5, 108, 0, 0, 116, 117, 5, 115, 0, 0, 117, 118, 5,
		101, 0, 0, 118, 16, 1, 0, 0, 0, 119, 120, 5, 112, 0, 0, 120, 121, 5, 114,
		0, 0, 121, 122, 5, 105, 0, 0, 122, 123, 5, 110, 0, 0, 123, 124, 5, 116,
		0, 0, 124, 18, 1, 0, 0, 0, 125, 126, 5, 105, 0, 0, 126, 127, 5, 102, 0,
		0, 127, 20, 1, 0, 0, 0, 128, 129, 5, 101, 0, 0, 129, 130, 5, 108, 0, 0,
		130, 131, 5, 115, 0, 0, 131, 132, 5, 101, 0, 0, 132, 22, 1, 0, 0, 0, 133,
		134, 5, 119, 0, 0, 134, 135, 5, 104, 0, 0, 135, 136, 5, 105, 0, 0, 136,
		137, 5, 108, 0, 0, 137, 138, 5, 101, 0, 0, 138, 24, 1, 0, 0, 0, 139, 141,
		7, 0, 0, 0, 140, 139, 1, 0, 0, 0, 141, 142, 1, 0, 0, 0, 142, 140, 1, 0,
		0, 0, 142, 143, 1, 0, 0, 0, 143, 150, 1, 0, 0, 0, 144, 146, 5, 46, 0, 0,
		145, 147, 7, 0, 0, 0, 146, 145, 1, 0, 0, 0, 147, 148, 1, 0, 0, 0, 148,
		146, 1, 0, 0, 0, 148, 149, 1, 0, 0, 0, 149, 151, 1, 0, 0, 0, 150, 144,
		1, 0, 0, 0, 150, 151, 1, 0, 0, 0, 151, 26, 1, 0, 0, 0, 152, 156, 5, 34,
		0, 0, 153, 155, 8, 1, 0, 0, 154, 153, 1, 0, 0, 0, 155, 158, 1, 0, 0, 0,
		156, 154, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 159, 1, 0, 0, 0, 158,
		156, 1, 0, 0, 0, 159, 160, 5, 34, 0, 0, 160, 28, 1, 0, 0, 0, 161, 165,
		7, 2, 0, 0, 162, 164, 7, 3, 0, 0, 163, 162, 1, 0, 0, 0, 164, 167, 1, 0,
		0, 0, 165, 163, 1, 0, 0, 0, 165, 166, 1, 0, 0, 0, 166, 30, 1, 0, 0, 0,
		167, 165, 1, 0, 0, 0, 168, 169, 5, 33, 0, 0, 169, 170, 5, 61, 0, 0, 170,
		32, 1, 0, 0, 0, 171, 172, 5, 61, 0, 0, 172, 173, 5, 61, 0, 0, 173, 34,
		1, 0, 0, 0, 174, 175, 5, 33, 0, 0, 175, 36, 1, 0, 0, 0, 176, 177, 5, 124,
		0, 0, 177, 178, 5, 124, 0, 0, 178, 38, 1, 0, 0, 0, 179, 180, 5, 38, 0,
		0, 180, 181, 5, 38, 0, 0, 181, 40, 1, 0, 0, 0, 182, 183, 5, 61, 0, 0, 183,
		42, 1, 0, 0, 0, 184, 185, 5, 62, 0, 0, 185, 186, 5, 61, 0, 0, 186, 44,
		1, 0, 0, 0, 187, 188, 5, 60, 0, 0, 188, 189, 5, 61, 0, 0, 189, 46, 1, 0,
		0, 0, 190, 191, 5, 62, 0, 0, 191, 48, 1, 0, 0, 0, 192, 193, 5, 60, 0, 0,
		193, 50, 1, 0, 0, 0, 194, 195, 5, 42, 0, 0, 195, 52, 1, 0, 0, 0, 196, 197,
		5, 47, 0, 0, 197, 54, 1, 0, 0, 0, 198, 199, 5, 43, 0, 0, 199, 56, 1, 0,
		0, 0, 200, 201, 5, 45, 0, 0, 201, 58, 1, 0, 0, 0, 202, 203, 5, 40, 0, 0,
		203, 60, 1, 0, 0, 0, 204, 205, 5, 41, 0, 0, 205, 62, 1, 0, 0, 0, 206, 207,
		5, 123, 0, 0, 207, 64, 1, 0, 0, 0, 208, 209, 5, 125, 0, 0, 209, 66, 1,
		0, 0, 0, 210, 212, 7, 4, 0, 0, 211, 210, 1, 0, 0, 0, 212, 213, 1, 0, 0,
		0, 213, 211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215,
		216, 6, 33, 0, 0, 216, 68, 1, 0, 0, 0, 217, 218, 5, 47, 0, 0, 218, 219,
		5, 42, 0, 0, 219, 223, 1, 0, 0, 0, 220, 222, 9, 0, 0, 0, 221, 220, 1, 0,
		0, 0, 222, 225, 1, 0, 0, 0, 223, 224, 1, 0, 0, 0, 223, 221, 1, 0, 0, 0,
		224, 226, 1, 0, 0, 0, 225, 223, 1, 0, 0, 0, 226, 227, 5, 42, 0, 0, 227,
		228, 5, 47, 0, 0, 228, 229, 1, 0, 0, 0, 229, 230, 6, 34, 0, 0, 230, 70,
		1, 0, 0, 0, 231, 232, 5, 47, 0, 0, 232, 233, 5, 47, 0, 0, 233, 237, 1,
		0, 0, 0, 234, 236, 8, 5, 0, 0, 235, 234, 1, 0, 0, 0, 236, 239, 1, 0, 0,
		0, 237, 235, 1, 0, 0, 0, 237, 238, 1, 0, 0, 0, 238, 240, 1, 0, 0, 0, 239,
		237, 1, 0, 0, 0, 240, 241, 6, 35, 0, 0, 241, 72, 1, 0, 0, 0, 242, 243,
		5, 92, 0, 0, 243, 244, 7, 6, 0, 0, 244, 74, 1, 0, 0, 0, 9, 0, 142, 148,
		150, 156, 165, 213, 223, 237, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// LexInit initializes any static state used to implement Lex. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewLex(). You can call this function if you wish to initialize the static state ahead
// of time.
func LexInit() {
	staticData := &LexLexerStaticData
	staticData.once.Do(lexLexerInit)
}

// NewLex produces a new lexer instance for the optional input antlr.CharStream.
func NewLex(input antlr.CharStream) *Lex {
	LexInit()
	l := new(Lex)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &LexLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Lex.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// Lex tokens.
const (
	LexINT          = 1
	LexFLOAT        = 2
	LexBOOL         = 3
	LexCHARACTER    = 4
	LexVAR          = 5
	LexNIL          = 6
	LexTRUE         = 7
	LexFALSE        = 8
	LexPRINT        = 9
	LexIF           = 10
	LexELSE         = 11
	LexWHILE        = 12
	LexNUMBER       = 13
	LexSTRING       = 14
	LexID           = 15
	LexDIF          = 16
	LexIG_IG        = 17
	LexNOT          = 18
	LexOR           = 19
	LexAND          = 20
	LexIG           = 21
	LexMAY_IG       = 22
	LexMEN_IG       = 23
	LexMAYOR        = 24
	LexMENOR        = 25
	LexMUL          = 26
	LexDIV          = 27
	LexADD          = 28
	LexSUB          = 29
	LexPARIZQ       = 30
	LexPARDER       = 31
	LexLLAVEIZQ     = 32
	LexLLAVEDER     = 33
	LexWHITESPACE   = 34
	LexCOMMENT      = 35
	LexLINE_COMMENT = 36
)
