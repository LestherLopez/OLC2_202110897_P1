2023-08-09 12:47:30:120 grammar LogManager.java:25 before: (LEXER_GRAMMAR Lex (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-09 12:47:30:142 grammar LogManager.java:25 after: (LEXER_GRAMMAR Lex (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-09 12:47:30:560 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) AND (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) OR (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) })))))
2023-08-09 12:47:30:574 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) AND (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) OR (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) })))))
2023-08-09 12:47:30:576 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Grammar (OPTIONS (= tokenVocab Lex)) (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) AND (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) OR (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRUE { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT FALSE { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) })))))
2023-08-09 12:47:30:576 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GrammarLexer OPTIONS (@ header {
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"
}) RULES)
2023-08-09 12:47:30:594 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=254> expr<tokenIndex=256> PARDER<tokenIndex=258> { $e = $expr.e } 
        | NUMBER<tokenIndex=264>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=270>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRUE<tokenIndex=276> { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) } 
        | FALSE<tokenIndex=282> { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MUL<tokenIndex=133>|DIV<tokenIndex=135>) right=expr<tokenIndex=140,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(ADD<tokenIndex=153>|SUB<tokenIndex=155>) right=expr<tokenIndex=160,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(MAY_IG<tokenIndex=173>|MAYOR<tokenIndex=175>) right=expr<tokenIndex=180,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(MEN_IG<tokenIndex=193>|MENOR<tokenIndex=195>) right=expr<tokenIndex=200,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=(IG_IG<tokenIndex=213>|DIF<tokenIndex=215>) right=expr<tokenIndex=220,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> AND<tokenIndex=230> right=expr<tokenIndex=234,p=8> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> OR<tokenIndex=244> right=expr<tokenIndex=248,p=7> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-09 12:47:30:607 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 254))) (expr (ELEMENT_OPTIONS (= tokenIndex 256))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 258))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 264))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 270))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 276))) { $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) }) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 282))) { $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 133))) (DIV (ELEMENT_OPTIONS (= tokenIndex 135))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 140) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 153))) (SUB (ELEMENT_OPTIONS (= tokenIndex 155))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 160) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 173))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 175))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 180) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 193))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 195))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 200) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 213))) (DIF (ELEMENT_OPTIONS (= tokenIndex 215))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 220) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (AND (ELEMENT_OPTIONS (= tokenIndex 230))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 234) (= p 8)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (OR (ELEMENT_OPTIONS (= tokenIndex 244))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 248) (= p 7)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-09 12:47:30:615 grammar LogManager.java:25 import INT=1
2023-08-09 12:47:30:615 grammar LogManager.java:25 import FLOAT=2
2023-08-09 12:47:30:615 grammar LogManager.java:25 import BOOL=3
2023-08-09 12:47:30:616 grammar LogManager.java:25 import CHARACTER=4
2023-08-09 12:47:30:616 grammar LogManager.java:25 import VAR=5
2023-08-09 12:47:30:616 grammar LogManager.java:25 import NIL=6
2023-08-09 12:47:30:616 grammar LogManager.java:25 import TRUE=7
2023-08-09 12:47:30:616 grammar LogManager.java:25 import FALSE=8
2023-08-09 12:47:30:616 grammar LogManager.java:25 import PRINT=9
2023-08-09 12:47:30:616 grammar LogManager.java:25 import IF=10
2023-08-09 12:47:30:616 grammar LogManager.java:25 import ELSE=11
2023-08-09 12:47:30:616 grammar LogManager.java:25 import WHILE=12
2023-08-09 12:47:30:616 grammar LogManager.java:25 import NUMBER=13
2023-08-09 12:47:30:616 grammar LogManager.java:25 import STRING=14
2023-08-09 12:47:30:616 grammar LogManager.java:25 import ID=15
2023-08-09 12:47:30:616 grammar LogManager.java:25 import DIF=16
2023-08-09 12:47:30:616 grammar LogManager.java:25 import IG_IG=17
2023-08-09 12:47:30:617 grammar LogManager.java:25 import NOT=18
2023-08-09 12:47:30:617 grammar LogManager.java:25 import OR=19
2023-08-09 12:47:30:617 grammar LogManager.java:25 import AND=20
2023-08-09 12:47:30:617 grammar LogManager.java:25 import IG=21
2023-08-09 12:47:30:617 grammar LogManager.java:25 import MAY_IG=22
2023-08-09 12:47:30:617 grammar LogManager.java:25 import MEN_IG=23
2023-08-09 12:47:30:618 grammar LogManager.java:25 import MAYOR=24
2023-08-09 12:47:30:618 grammar LogManager.java:25 import MENOR=25
2023-08-09 12:47:30:619 grammar LogManager.java:25 import MUL=26
2023-08-09 12:47:30:619 grammar LogManager.java:25 import DIV=27
2023-08-09 12:47:30:619 grammar LogManager.java:25 import ADD=28
2023-08-09 12:47:30:619 grammar LogManager.java:25 import SUB=29
2023-08-09 12:47:30:619 grammar LogManager.java:25 import PARIZQ=30
2023-08-09 12:47:30:619 grammar LogManager.java:25 import PARDER=31
2023-08-09 12:47:30:619 grammar LogManager.java:25 import LLAVEIZQ=32
2023-08-09 12:47:30:620 grammar LogManager.java:25 import LLAVEDER=33
2023-08-09 12:47:30:620 grammar LogManager.java:25 import WHITESPACE=34
2023-08-09 12:47:30:620 grammar LogManager.java:25 import COMMENT=35
2023-08-09 12:47:30:620 grammar LogManager.java:25 import LINE_COMMENT=36
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'int'=1
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'float'=2
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'bool'=3
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'character'=4
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'var'=5
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'nil'=6
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'true'=7
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'false'=8
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'print'=9
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'if'=10
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'else'=11
2023-08-09 12:47:30:620 grammar LogManager.java:25 import 'while'=12
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '!='=16
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '=='=17
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '!'=18
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '||'=19
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '&&'=20
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '='=21
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '>='=22
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '<='=23
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '>'=24
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '<'=25
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '*'=26
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '/'=27
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '+'=28
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '-'=29
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '('=30
2023-08-09 12:47:30:621 grammar LogManager.java:25 import ')'=31
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '{'=32
2023-08-09 12:47:30:621 grammar LogManager.java:25 import '}'=33
2023-08-09 12:47:30:622 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, CHARACTER=4, VAR=5, NIL=6, TRUE=7, FALSE=8, PRINT=9, IF=10, ELSE=11, WHILE=12, NUMBER=13, STRING=14, ID=15, DIF=16, IG_IG=17, NOT=18, OR=19, AND=20, IG=21, MAY_IG=22, MEN_IG=23, MAYOR=24, MENOR=25, MUL=26, DIV=27, ADD=28, SUB=29, PARIZQ=30, PARDER=31, LLAVEIZQ=32, LLAVEDER=33, WHITESPACE=34, COMMENT=35, LINE_COMMENT=36, 'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'var'=5, 'nil'=6, 'true'=7, 'false'=8, 'print'=9, 'if'=10, 'else'=11, 'while'=12, '!='=16, '=='=17, '!'=18, '||'=19, '&&'=20, '='=21, '>='=22, '<='=23, '>'=24, '<'=25, '*'=26, '/'=27, '+'=28, '-'=29, '('=30, ')'=31, '{'=32, '}'=33}
2023-08-09 12:47:30:622 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHARACTER=4, VAR=5, NIL=6, TRUE=7, FALSE=8, PRINT=9, IF=10, ELSE=11, WHILE=12, NUMBER=13, STRING=14, ID=15, DIF=16, IG_IG=17, NOT=18, OR=19, AND=20, IG=21, MAY_IG=22, MEN_IG=23, MAYOR=24, MENOR=25, MUL=26, DIV=27, ADD=28, SUB=29, PARIZQ=30, PARDER=31, LLAVEIZQ=32, LLAVEDER=33, WHITESPACE=34, COMMENT=35, LINE_COMMENT=36}
2023-08-09 12:47:30:623 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'var'=5, 'nil'=6, 'true'=7, 'false'=8, 'print'=9, 'if'=10, 'else'=11, 'while'=12, '!='=16, '=='=17, '!'=18, '||'=19, '&&'=20, '='=21, '>='=22, '<='=23, '>'=24, '<'=25, '*'=26, '/'=27, '+'=28, '-'=29, '('=30, ')'=31, '{'=32, '}'=33}
2023-08-09 12:47:30:645 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-09 12:47:30:646 LL1 LogManager.java:25 look=[{9..10}, {<EOF>, 33}]
2023-08-09 12:47:30:646 LL1 LogManager.java:25 LL(1)? true
2023-08-09 12:47:30:646 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-09 12:47:30:646 LL1 LogManager.java:25 look=[9, 10]
2023-08-09 12:47:30:646 LL1 LogManager.java:25 LL(1)? true
2023-08-09 12:47:30:646 LL1 LogManager.java:25 
DECISION 2 in rule expr
2023-08-09 12:47:30:647 LL1 LogManager.java:25 look=[30, 13, 14, 7, 8]
2023-08-09 12:47:30:647 LL1 LogManager.java:25 LL(1)? true
2023-08-09 12:47:30:647 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-08-09 12:47:30:647 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-09 12:47:30:647 LL1 LogManager.java:25 LL(1)? false
2023-08-09 12:47:30:647 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-09 12:47:30:647 LL1 LogManager.java:25 look=[null, null]
2023-08-09 12:47:30:647 LL1 LogManager.java:25 LL(1)? false
2023-08-09 12:47:30:653 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-09 12:47:30:669 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-09 12:47:30:669 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-09 12:47:30:670 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-09 12:47:30:672 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-09 12:47:30:672 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-09 12:47:30:674 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-09 12:47:30:674 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-09 12:47:30:674 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-09 12:47:30:675 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-09 12:47:30:675 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-09 12:47:30:675 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-09 12:47:30:675 action-translator LogManager.java:25 translate  
2023-08-09 12:47:30:677 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-09 12:47:30:677 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,44:29]
2023-08-09 12:47:30:677 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,44:59].[@-1,38:41='line',<0>,44:65]
2023-08-09 12:47:30:677 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,44:71].[@-1,50:52='pos',<0>,44:77]
2023-08-09 12:47:30:678 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,44:82].[@-1,60:60='e',<0>,44:87]
2023-08-09 12:47:30:681 action-translator LogManager.java:25 translate 
2023-08-09 12:47:30:681 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-09 12:47:30:682 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-09 12:47:30:682 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-09 12:47:30:682 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-09 12:47:30:682 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,5:30].[@-1,39:42='text',<0>,5:37]
2023-08-09 12:47:30:682 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,6:43].[@-1,102:105='text',<0>,6:50]
2023-08-09 12:47:30:683 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,10:13]
2023-08-09 12:47:30:683 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,10:43].[@-1,240:243='line',<0>,10:50]
2023-08-09 12:47:30:683 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,10:56].[@-1,253:255='pos',<0>,10:63]
2023-08-09 12:47:30:683 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,12:37].[@-1,341:344='text',<0>,12:44]
2023-08-09 12:47:30:683 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,16:13]
2023-08-09 12:47:30:684 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,16:43].[@-1,474:477='line',<0>,16:50]
2023-08-09 12:47:30:684 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,16:56].[@-1,487:489='pos',<0>,16:63]
2023-08-09 12:47:30:684 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-09 12:47:30:685 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,21:16].[@-1,25:28='text',<0>,21:23]
2023-08-09 12:47:30:685 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,22:9]
2023-08-09 12:47:30:686 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,22:39].[@-1,77:80='line',<0>,22:46]
2023-08-09 12:47:30:686 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,22:53].[@-1,91:93='pos',<0>,22:60]
2023-08-09 12:47:30:686 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRUE.line, $TRUE.pos, true, environment.BOOLEAN) 
2023-08-09 12:47:30:687 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,24:33]
2023-08-09 12:47:30:687 action-translator LogManager.java:25 qattr [@-1,32:35='TRUE',<0>,24:63].[@-1,37:40='line',<0>,24:68]
2023-08-09 12:47:30:687 action-translator LogManager.java:25 qattr [@-1,44:47='TRUE',<0>,24:75].[@-1,49:51='pos',<0>,24:80]
2023-08-09 12:47:30:688 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FALSE.line, $FALSE.pos, false, environment.BOOLEAN) 
2023-08-09 12:47:30:688 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:34]
2023-08-09 12:47:30:688 action-translator LogManager.java:25 qattr [@-1,32:36='FALSE',<0>,25:64].[@-1,38:41='line',<0>,25:70]
2023-08-09 12:47:30:688 action-translator LogManager.java:25 qattr [@-1,45:49='FALSE',<0>,25:77].[@-1,51:53='pos',<0>,25:83]
2023-08-09 12:47:30:689 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-09 12:47:30:690 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-09 12:47:30:690 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:139]
2023-08-09 12:47:30:690 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,28:169].[@-1,37:41='start',<0>,28:174]
2023-08-09 12:47:30:691 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,28:192].[@-1,60:64='start',<0>,28:197]
2023-08-09 12:47:30:691 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,28:217].[@-1,85:85='e',<0>,28:222]
2023-08-09 12:47:30:691 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,28:226].[@-1,92:95='text',<0>,28:229]
2023-08-09 12:47:30:691 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,28:236].[@-1,105:105='e',<0>,28:242]
2023-08-09 12:47:30:692 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-09 12:47:30:692 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-09 12:47:30:692 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:149]
2023-08-09 12:47:30:692 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,29:179].[@-1,37:41='start',<0>,29:184]
2023-08-09 12:47:30:693 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,29:202].[@-1,60:64='start',<0>,29:207]
2023-08-09 12:47:30:693 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,29:227].[@-1,85:85='e',<0>,29:232]
2023-08-09 12:47:30:693 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,29:236].[@-1,92:95='text',<0>,29:239]
2023-08-09 12:47:30:693 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,29:246].[@-1,105:105='e',<0>,29:252]
2023-08-09 12:47:30:693 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-09 12:47:30:694 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-09 12:47:30:694 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:154]
2023-08-09 12:47:30:694 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:184].[@-1,37:41='start',<0>,30:189]
2023-08-09 12:47:30:694 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:207].[@-1,60:64='start',<0>,30:212]
2023-08-09 12:47:30:694 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:232].[@-1,85:85='e',<0>,30:237]
2023-08-09 12:47:30:694 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:241].[@-1,92:95='text',<0>,30:244]
2023-08-09 12:47:30:694 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:251].[@-1,105:105='e',<0>,30:257]
2023-08-09 12:47:30:694 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-09 12:47:30:695 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-09 12:47:30:695 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:152]
2023-08-09 12:47:30:695 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:182].[@-1,37:41='start',<0>,31:187]
2023-08-09 12:47:30:695 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:205].[@-1,60:64='start',<0>,31:210]
2023-08-09 12:47:30:695 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:230].[@-1,85:85='e',<0>,31:235]
2023-08-09 12:47:30:696 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:239].[@-1,92:95='text',<0>,31:242]
2023-08-09 12:47:30:696 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:249].[@-1,105:105='e',<0>,31:255]
2023-08-09 12:47:30:696 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-09 12:47:30:696 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-09 12:47:30:696 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:148]
2023-08-09 12:47:30:696 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:178].[@-1,37:41='start',<0>,32:183]
2023-08-09 12:47:30:697 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:201].[@-1,60:64='start',<0>,32:206]
2023-08-09 12:47:30:697 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:226].[@-1,85:85='e',<0>,32:231]
2023-08-09 12:47:30:697 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:235].[@-1,92:95='text',<0>,32:238]
2023-08-09 12:47:30:697 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:245].[@-1,105:105='e',<0>,32:251]
2023-08-09 12:47:30:697 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-09 12:47:30:697 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-09 12:47:30:698 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:121]
2023-08-09 12:47:30:698 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:151].[@-1,37:41='start',<0>,33:156]
2023-08-09 12:47:30:698 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:174].[@-1,60:64='start',<0>,33:179]
2023-08-09 12:47:30:698 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:199].[@-1,85:85='e',<0>,33:204]
2023-08-09 12:47:30:698 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:208].[@-1,92:95='text',<0>,33:211]
2023-08-09 12:47:30:698 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:218].[@-1,105:105='e',<0>,33:224]
2023-08-09 12:47:30:699 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-08-09 12:47:30:699 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-09 12:47:30:699 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:120]
2023-08-09 12:47:30:699 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:150].[@-1,37:41='start',<0>,34:155]
2023-08-09 12:47:30:699 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:173].[@-1,60:64='start',<0>,34:178]
2023-08-09 12:47:30:699 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:198].[@-1,85:85='e',<0>,34:203]
2023-08-09 12:47:30:699 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:207].[@-1,92:95='text',<0>,34:210]
2023-08-09 12:47:30:699 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:217].[@-1,105:105='e',<0>,34:223]
2023-08-09 12:47:30:702 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-09 12:47:30:702 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-09 12:47:30:702 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-09 12:47:30:702 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-09 12:47:30:702 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-09 12:47:30:702 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-09 12:47:30:702 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-08-09 12:47:30:913 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-09 12:47:30:913 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-09 12:47:30:994 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

2023-08-09 12:47:30:994 action-translator LogManager.java:25 translate 
    import "Server/Interfaces"
    import "Server/Environment"
    import "Server/Expression"
    import "Server/Instruction"
    import "strings"

